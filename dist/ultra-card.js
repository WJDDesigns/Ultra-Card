/*! For license information please see ultra-card.js.LICENSE.txt */
(()=>{"use strict";var t={57:(t,e,i)=>{i.d(e,{formatEntityState:()=>n});var o=i(340);const n=(t,e,i)=>{var n,a;const r=!1!==(null==i?void 0:i.includeUnit),s=null===(n=null==t?void 0:t.states)||void 0===n?void 0:n[e];if(!t||!s)return void 0!==(null==i?void 0:i.state)?String(i.state):"";const l=t.formatEntityState,d=l?l(s,void 0!==(null==i?void 0:i.state)?String(i.state):void 0):(0,o.nu)(t.localize,s,t.locale,null==i?void 0:i.state);if(r)return d;const c=null===(a=s.attributes)||void 0===a?void 0:a.unit_of_measurement;if(c&&"string"==typeof d){const t=` ${c}`;if(d.endsWith(t))return d.slice(0,-t.length)}return d}},340:(t,e,i)=>{i.d(e,{nu:()=>b,rC:()=>v});var o,n,a,r=function(t,e){return s(e).format(t)},s=function(t){return new Intl.DateTimeFormat(t.language,{year:"numeric",month:"long",day:"numeric"})};(a=o||(o={})).language="language",a.system="system",a.comma_decimal="comma_decimal",a.decimal_comma="decimal_comma",a.space_comma="space_comma",a.none="none",function(t){t.language="language",t.system="system",t.am_pm="12",t.twenty_four="24"}(n||(n={}));var l=function(t){if(t.time_format===n.language||t.time_format===n.system){var e=t.time_format===n.language?t.language:void 0,i=(new Date).toLocaleString(e);return i.includes("AM")||i.includes("PM")}return t.time_format===n.am_pm},d=function(t,e){return c(e).format(t)},c=function(t){return new Intl.DateTimeFormat(t.language,{year:"numeric",month:"long",day:"numeric",hour:l(t)?"numeric":"2-digit",minute:"2-digit",hour12:l(t)})},p=function(t,e){return u(e).format(t)},u=function(t){return new Intl.DateTimeFormat(t.language,{hour:"numeric",minute:"2-digit",hour12:l(t)})};function m(){return(m=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var i=arguments[e];for(var o in i)Object.prototype.hasOwnProperty.call(i,o)&&(t[o]=i[o])}return t}).apply(this,arguments)}var g=function(t,e,i){var n=e?function(t){switch(t.number_format){case o.comma_decimal:return["en-US","en"];case o.decimal_comma:return["de","es","it"];case o.space_comma:return["fr","sv","cs"];case o.system:return;default:return t.language}}(e):void 0;if(Number.isNaN=Number.isNaN||function t(e){return"number"==typeof e&&t(e)},(null==e?void 0:e.number_format)!==o.none&&!Number.isNaN(Number(t))&&Intl)try{return new Intl.NumberFormat(n,h(t,i)).format(Number(t))}catch(e){return console.error(e),new Intl.NumberFormat(void 0,h(t,i)).format(Number(t))}return"string"==typeof t?t:function(t,e){return void 0===e&&(e=2),Math.round(t*Math.pow(10,e))/Math.pow(10,e)}(t,null==i?void 0:i.maximumFractionDigits).toString()+("currency"===(null==i?void 0:i.style)?" "+i.currency:"")},h=function(t,e){var i=m({maximumFractionDigits:2},e);if("string"!=typeof t)return i;if(!e||!e.minimumFractionDigits&&!e.maximumFractionDigits){var o=t.indexOf(".")>-1?t.split(".")[1].length:0;i.minimumFractionDigits=o,i.maximumFractionDigits=o}return i},b=function(t,e,i,o){var n=void 0!==o?o:e.state;if("unknown"===n||"unavailable"===n)return t("state.default."+n);if(function(t){return!!t.attributes.unit_of_measurement||!!t.attributes.state_class}(e)){if("monetary"===e.attributes.device_class)try{return g(n,i,{style:"currency",currency:e.attributes.unit_of_measurement})}catch(t){}return g(n,i)+(e.attributes.unit_of_measurement?" "+e.attributes.unit_of_measurement:"")}var a=function(t){return function(t){return t.substr(0,t.indexOf("."))}(t.entity_id)}(e);if("input_datetime"===a){var s;if(void 0===o)return e.attributes.has_date&&e.attributes.has_time?(s=new Date(e.attributes.year,e.attributes.month-1,e.attributes.day,e.attributes.hour,e.attributes.minute),d(s,i)):e.attributes.has_date?(s=new Date(e.attributes.year,e.attributes.month-1,e.attributes.day),r(s,i)):e.attributes.has_time?((s=new Date).setHours(e.attributes.hour,e.attributes.minute),p(s,i)):e.state;try{var l=o.split(" ");if(2===l.length)return d(new Date(l.join("T")),i);if(1===l.length){if(o.includes("-"))return r(new Date(o+"T00:00"),i);if(o.includes(":")){var c=new Date;return p(new Date(c.toISOString().split("T")[0]+"T"+o),i)}}return o}catch(t){return o}}return"humidifier"===a&&"on"===n&&e.attributes.humidity?e.attributes.humidity+" %":"counter"===a||"number"===a||"input_number"===a?g(n,i):e.attributes.device_class&&t("component."+a+".state."+e.attributes.device_class+"."+n)||t("component."+a+".state._."+n)||n},v=(new Set(["fan","input_boolean","light","switch","group","automation"]),function(t,e,i,o){o=o||{},i=null==i?{}:i;var n=new Event(e,{bubbles:void 0===o.bubbles||o.bubbles,cancelable:Boolean(o.cancelable),composed:void 0===o.composed||o.composed});return n.detail=i,t.dispatchEvent(n),n});new Set(["call-service","divider","section","weblink","cast","select"])}},e={};function i(o){var n=e[o];if(void 0!==n)return n.exports;var a=e[o]={exports:{}};return t[o](a,a.exports,i),a.exports}i.d=(t,e)=>{for(var o in e)i.o(e,o)&&!i.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e);const o=globalThis,n=o.ShadowRoot&&(void 0===o.ShadyCSS||o.ShadyCSS.nativeShadow)&&"adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,a=Symbol(),r=new WeakMap;class s{constructor(t,e,i){if(this._$cssResult$=!0,i!==a)throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=t,this.t=e}get styleSheet(){let t=this.o;const e=this.t;if(n&&void 0===t){const i=void 0!==e&&1===e.length;i&&(t=r.get(e)),void 0===t&&((this.o=t=new CSSStyleSheet).replaceSync(this.cssText),i&&r.set(e,t))}return t}toString(){return this.cssText}}const l=(t,...e)=>{const i=1===t.length?t[0]:e.reduce(((e,i,o)=>e+(t=>{if(!0===t._$cssResult$)return t.cssText;if("number"==typeof t)return t;throw Error("Value passed to 'css' function must be a 'css' function result: "+t+". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.")})(i)+t[o+1]),t[0]);return new s(i,t,a)},d=(t,e)=>{if(n)t.adoptedStyleSheets=e.map((t=>t instanceof CSSStyleSheet?t:t.styleSheet));else for(const i of e){const e=document.createElement("style"),n=o.litNonce;void 0!==n&&e.setAttribute("nonce",n),e.textContent=i.cssText,t.appendChild(e)}},c=n?t=>t:t=>t instanceof CSSStyleSheet?(t=>{let e="";for(const i of t.cssRules)e+=i.cssText;return(t=>new s("string"==typeof t?t:t+"",void 0,a))(e)})(t):t,{is:p,defineProperty:u,getOwnPropertyDescriptor:m,getOwnPropertyNames:g,getOwnPropertySymbols:h,getPrototypeOf:b}=Object,v=globalThis,_=v.trustedTypes,f=_?_.emptyScript:"",y=v.reactiveElementPolyfillSupport,x=(t,e)=>t,w={toAttribute(t,e){switch(e){case Boolean:t=t?f:null;break;case Object:case Array:t=null==t?t:JSON.stringify(t)}return t},fromAttribute(t,e){let i=t;switch(e){case Boolean:i=null!==t;break;case Number:i=null===t?null:Number(t);break;case Object:case Array:try{i=JSON.parse(t)}catch(t){i=null}}return i}},$=(t,e)=>!p(t,e),k={attribute:!0,type:String,converter:w,reflect:!1,hasChanged:$};Symbol.metadata??=Symbol("metadata"),v.litPropertyMetadata??=new WeakMap;class S extends HTMLElement{static addInitializer(t){this._$Ei(),(this.l??=[]).push(t)}static get observedAttributes(){return this.finalize(),this._$Eh&&[...this._$Eh.keys()]}static createProperty(t,e=k){if(e.state&&(e.attribute=!1),this._$Ei(),this.elementProperties.set(t,e),!e.noAccessor){const i=Symbol(),o=this.getPropertyDescriptor(t,i,e);void 0!==o&&u(this.prototype,t,o)}}static getPropertyDescriptor(t,e,i){const{get:o,set:n}=m(this.prototype,t)??{get(){return this[e]},set(t){this[e]=t}};return{get(){return o?.call(this)},set(e){const a=o?.call(this);n.call(this,e),this.requestUpdate(t,a,i)},configurable:!0,enumerable:!0}}static getPropertyOptions(t){return this.elementProperties.get(t)??k}static _$Ei(){if(this.hasOwnProperty(x("elementProperties")))return;const t=b(this);t.finalize(),void 0!==t.l&&(this.l=[...t.l]),this.elementProperties=new Map(t.elementProperties)}static finalize(){if(this.hasOwnProperty(x("finalized")))return;if(this.finalized=!0,this._$Ei(),this.hasOwnProperty(x("properties"))){const t=this.properties,e=[...g(t),...h(t)];for(const i of e)this.createProperty(i,t[i])}const t=this[Symbol.metadata];if(null!==t){const e=litPropertyMetadata.get(t);if(void 0!==e)for(const[t,i]of e)this.elementProperties.set(t,i)}this._$Eh=new Map;for(const[t,e]of this.elementProperties){const i=this._$Eu(t,e);void 0!==i&&this._$Eh.set(i,t)}this.elementStyles=this.finalizeStyles(this.styles)}static finalizeStyles(t){const e=[];if(Array.isArray(t)){const i=new Set(t.flat(1/0).reverse());for(const t of i)e.unshift(c(t))}else void 0!==t&&e.push(c(t));return e}static _$Eu(t,e){const i=e.attribute;return!1===i?void 0:"string"==typeof i?i:"string"==typeof t?t.toLowerCase():void 0}constructor(){super(),this._$Ep=void 0,this.isUpdatePending=!1,this.hasUpdated=!1,this._$Em=null,this._$Ev()}_$Ev(){this._$ES=new Promise((t=>this.enableUpdating=t)),this._$AL=new Map,this._$E_(),this.requestUpdate(),this.constructor.l?.forEach((t=>t(this)))}addController(t){(this._$EO??=new Set).add(t),void 0!==this.renderRoot&&this.isConnected&&t.hostConnected?.()}removeController(t){this._$EO?.delete(t)}_$E_(){const t=new Map,e=this.constructor.elementProperties;for(const i of e.keys())this.hasOwnProperty(i)&&(t.set(i,this[i]),delete this[i]);t.size>0&&(this._$Ep=t)}createRenderRoot(){const t=this.shadowRoot??this.attachShadow(this.constructor.shadowRootOptions);return d(t,this.constructor.elementStyles),t}connectedCallback(){this.renderRoot??=this.createRenderRoot(),this.enableUpdating(!0),this._$EO?.forEach((t=>t.hostConnected?.()))}enableUpdating(t){}disconnectedCallback(){this._$EO?.forEach((t=>t.hostDisconnected?.()))}attributeChangedCallback(t,e,i){this._$AK(t,i)}_$EC(t,e){const i=this.constructor.elementProperties.get(t),o=this.constructor._$Eu(t,i);if(void 0!==o&&!0===i.reflect){const n=(void 0!==i.converter?.toAttribute?i.converter:w).toAttribute(e,i.type);this._$Em=t,null==n?this.removeAttribute(o):this.setAttribute(o,n),this._$Em=null}}_$AK(t,e){const i=this.constructor,o=i._$Eh.get(t);if(void 0!==o&&this._$Em!==o){const t=i.getPropertyOptions(o),n="function"==typeof t.converter?{fromAttribute:t.converter}:void 0!==t.converter?.fromAttribute?t.converter:w;this._$Em=o,this[o]=n.fromAttribute(e,t.type),this._$Em=null}}requestUpdate(t,e,i){if(void 0!==t){if(i??=this.constructor.getPropertyOptions(t),!(i.hasChanged??$)(this[t],e))return;this.P(t,e,i)}!1===this.isUpdatePending&&(this._$ES=this._$ET())}P(t,e,i){this._$AL.has(t)||this._$AL.set(t,e),!0===i.reflect&&this._$Em!==t&&(this._$Ej??=new Set).add(t)}async _$ET(){this.isUpdatePending=!0;try{await this._$ES}catch(t){Promise.reject(t)}const t=this.scheduleUpdate();return null!=t&&await t,!this.isUpdatePending}scheduleUpdate(){return this.performUpdate()}performUpdate(){if(!this.isUpdatePending)return;if(!this.hasUpdated){if(this.renderRoot??=this.createRenderRoot(),this._$Ep){for(const[t,e]of this._$Ep)this[t]=e;this._$Ep=void 0}const t=this.constructor.elementProperties;if(t.size>0)for(const[e,i]of t)!0!==i.wrapped||this._$AL.has(e)||void 0===this[e]||this.P(e,this[e],i)}let t=!1;const e=this._$AL;try{t=this.shouldUpdate(e),t?(this.willUpdate(e),this._$EO?.forEach((t=>t.hostUpdate?.())),this.update(e)):this._$EU()}catch(e){throw t=!1,this._$EU(),e}t&&this._$AE(e)}willUpdate(t){}_$AE(t){this._$EO?.forEach((t=>t.hostUpdated?.())),this.hasUpdated||(this.hasUpdated=!0,this.firstUpdated(t)),this.updated(t)}_$EU(){this._$AL=new Map,this.isUpdatePending=!1}get updateComplete(){return this.getUpdateComplete()}getUpdateComplete(){return this._$ES}shouldUpdate(t){return!0}update(t){this._$Ej&&=this._$Ej.forEach((t=>this._$EC(t,this[t]))),this._$EU()}updated(t){}firstUpdated(t){}}S.elementStyles=[],S.shadowRootOptions={mode:"open"},S[x("elementProperties")]=new Map,S[x("finalized")]=new Map,y?.({ReactiveElement:S}),(v.reactiveElementVersions??=[]).push("2.0.4");const C=globalThis,z=C.trustedTypes,I=z?z.createPolicy("lit-html",{createHTML:t=>t}):void 0,T="$lit$",A=`lit$${Math.random().toFixed(9).slice(2)}$`,P="?"+A,D=`<${P}>`,L=document,M=()=>L.createComment(""),O=t=>null===t||"object"!=typeof t&&"function"!=typeof t,j=Array.isArray,E=t=>j(t)||"function"==typeof t?.[Symbol.iterator],F="[ \t\n\f\r]",U=/<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g,R=/-->/g,N=/>/g,H=RegExp(`>|${F}(?:([^\\s"'>=/]+)(${F}*=${F}*(?:[^ \t\n\f\r"'\`<>=]|("|')|))|$)`,"g"),B=/'/g,W=/"/g,V=/^(?:script|style|textarea|title)$/i,G=t=>(e,...i)=>({_$litType$:t,strings:e,values:i}),q=G(1),Y=G(2),X=(G(3),Symbol.for("lit-noChange")),J=Symbol.for("lit-nothing"),K=new WeakMap,Z=L.createTreeWalker(L,129);function Q(t,e){if(!j(t)||!t.hasOwnProperty("raw"))throw Error("invalid template strings array");return void 0!==I?I.createHTML(e):e}const tt=(t,e)=>{const i=t.length-1,o=[];let n,a=2===e?"<svg>":3===e?"<math>":"",r=U;for(let e=0;e<i;e++){const i=t[e];let s,l,d=-1,c=0;for(;c<i.length&&(r.lastIndex=c,l=r.exec(i),null!==l);)c=r.lastIndex,r===U?"!--"===l[1]?r=R:void 0!==l[1]?r=N:void 0!==l[2]?(V.test(l[2])&&(n=RegExp("</"+l[2],"g")),r=H):void 0!==l[3]&&(r=H):r===H?">"===l[0]?(r=n??U,d=-1):void 0===l[1]?d=-2:(d=r.lastIndex-l[2].length,s=l[1],r=void 0===l[3]?H:'"'===l[3]?W:B):r===W||r===B?r=H:r===R||r===N?r=U:(r=H,n=void 0);const p=r===H&&t[e+1].startsWith("/>")?" ":"";a+=r===U?i+D:d>=0?(o.push(s),i.slice(0,d)+T+i.slice(d)+A+p):i+A+(-2===d?e:p)}return[Q(t,a+(t[i]||"<?>")+(2===e?"</svg>":3===e?"</math>":"")),o]};class et{constructor({strings:t,_$litType$:e},i){let o;this.parts=[];let n=0,a=0;const r=t.length-1,s=this.parts,[l,d]=tt(t,e);if(this.el=et.createElement(l,i),Z.currentNode=this.el.content,2===e||3===e){const t=this.el.content.firstChild;t.replaceWith(...t.childNodes)}for(;null!==(o=Z.nextNode())&&s.length<r;){if(1===o.nodeType){if(o.hasAttributes())for(const t of o.getAttributeNames())if(t.endsWith(T)){const e=d[a++],i=o.getAttribute(t).split(A),r=/([.?@])?(.*)/.exec(e);s.push({type:1,index:n,name:r[2],strings:i,ctor:"."===r[1]?rt:"?"===r[1]?st:"@"===r[1]?lt:at}),o.removeAttribute(t)}else t.startsWith(A)&&(s.push({type:6,index:n}),o.removeAttribute(t));if(V.test(o.tagName)){const t=o.textContent.split(A),e=t.length-1;if(e>0){o.textContent=z?z.emptyScript:"";for(let i=0;i<e;i++)o.append(t[i],M()),Z.nextNode(),s.push({type:2,index:++n});o.append(t[e],M())}}}else if(8===o.nodeType)if(o.data===P)s.push({type:2,index:n});else{let t=-1;for(;-1!==(t=o.data.indexOf(A,t+1));)s.push({type:7,index:n}),t+=A.length-1}n++}}static createElement(t,e){const i=L.createElement("template");return i.innerHTML=t,i}}function it(t,e,i=t,o){if(e===X)return e;let n=void 0!==o?i._$Co?.[o]:i._$Cl;const a=O(e)?void 0:e._$litDirective$;return n?.constructor!==a&&(n?._$AO?.(!1),void 0===a?n=void 0:(n=new a(t),n._$AT(t,i,o)),void 0!==o?(i._$Co??=[])[o]=n:i._$Cl=n),void 0!==n&&(e=it(t,n._$AS(t,e.values),n,o)),e}class ot{constructor(t,e){this._$AV=[],this._$AN=void 0,this._$AD=t,this._$AM=e}get parentNode(){return this._$AM.parentNode}get _$AU(){return this._$AM._$AU}u(t){const{el:{content:e},parts:i}=this._$AD,o=(t?.creationScope??L).importNode(e,!0);Z.currentNode=o;let n=Z.nextNode(),a=0,r=0,s=i[0];for(;void 0!==s;){if(a===s.index){let e;2===s.type?e=new nt(n,n.nextSibling,this,t):1===s.type?e=new s.ctor(n,s.name,s.strings,this,t):6===s.type&&(e=new dt(n,this,t)),this._$AV.push(e),s=i[++r]}a!==s?.index&&(n=Z.nextNode(),a++)}return Z.currentNode=L,o}p(t){let e=0;for(const i of this._$AV)void 0!==i&&(void 0!==i.strings?(i._$AI(t,i,e),e+=i.strings.length-2):i._$AI(t[e])),e++}}class nt{get _$AU(){return this._$AM?._$AU??this._$Cv}constructor(t,e,i,o){this.type=2,this._$AH=J,this._$AN=void 0,this._$AA=t,this._$AB=e,this._$AM=i,this.options=o,this._$Cv=o?.isConnected??!0}get parentNode(){let t=this._$AA.parentNode;const e=this._$AM;return void 0!==e&&11===t?.nodeType&&(t=e.parentNode),t}get startNode(){return this._$AA}get endNode(){return this._$AB}_$AI(t,e=this){t=it(this,t,e),O(t)?t===J||null==t||""===t?(this._$AH!==J&&this._$AR(),this._$AH=J):t!==this._$AH&&t!==X&&this._(t):void 0!==t._$litType$?this.$(t):void 0!==t.nodeType?this.T(t):E(t)?this.k(t):this._(t)}O(t){return this._$AA.parentNode.insertBefore(t,this._$AB)}T(t){this._$AH!==t&&(this._$AR(),this._$AH=this.O(t))}_(t){this._$AH!==J&&O(this._$AH)?this._$AA.nextSibling.data=t:this.T(L.createTextNode(t)),this._$AH=t}$(t){const{values:e,_$litType$:i}=t,o="number"==typeof i?this._$AC(t):(void 0===i.el&&(i.el=et.createElement(Q(i.h,i.h[0]),this.options)),i);if(this._$AH?._$AD===o)this._$AH.p(e);else{const t=new ot(o,this),i=t.u(this.options);t.p(e),this.T(i),this._$AH=t}}_$AC(t){let e=K.get(t.strings);return void 0===e&&K.set(t.strings,e=new et(t)),e}k(t){j(this._$AH)||(this._$AH=[],this._$AR());const e=this._$AH;let i,o=0;for(const n of t)o===e.length?e.push(i=new nt(this.O(M()),this.O(M()),this,this.options)):i=e[o],i._$AI(n),o++;o<e.length&&(this._$AR(i&&i._$AB.nextSibling,o),e.length=o)}_$AR(t=this._$AA.nextSibling,e){for(this._$AP?.(!1,!0,e);t&&t!==this._$AB;){const e=t.nextSibling;t.remove(),t=e}}setConnected(t){void 0===this._$AM&&(this._$Cv=t,this._$AP?.(t))}}class at{get tagName(){return this.element.tagName}get _$AU(){return this._$AM._$AU}constructor(t,e,i,o,n){this.type=1,this._$AH=J,this._$AN=void 0,this.element=t,this.name=e,this._$AM=o,this.options=n,i.length>2||""!==i[0]||""!==i[1]?(this._$AH=Array(i.length-1).fill(new String),this.strings=i):this._$AH=J}_$AI(t,e=this,i,o){const n=this.strings;let a=!1;if(void 0===n)t=it(this,t,e,0),a=!O(t)||t!==this._$AH&&t!==X,a&&(this._$AH=t);else{const o=t;let r,s;for(t=n[0],r=0;r<n.length-1;r++)s=it(this,o[i+r],e,r),s===X&&(s=this._$AH[r]),a||=!O(s)||s!==this._$AH[r],s===J?t=J:t!==J&&(t+=(s??"")+n[r+1]),this._$AH[r]=s}a&&!o&&this.j(t)}j(t){t===J?this.element.removeAttribute(this.name):this.element.setAttribute(this.name,t??"")}}class rt extends at{constructor(){super(...arguments),this.type=3}j(t){this.element[this.name]=t===J?void 0:t}}class st extends at{constructor(){super(...arguments),this.type=4}j(t){this.element.toggleAttribute(this.name,!!t&&t!==J)}}class lt extends at{constructor(t,e,i,o,n){super(t,e,i,o,n),this.type=5}_$AI(t,e=this){if((t=it(this,t,e,0)??J)===X)return;const i=this._$AH,o=t===J&&i!==J||t.capture!==i.capture||t.once!==i.once||t.passive!==i.passive,n=t!==J&&(i===J||o);o&&this.element.removeEventListener(this.name,this,i),n&&this.element.addEventListener(this.name,this,t),this._$AH=t}handleEvent(t){"function"==typeof this._$AH?this._$AH.call(this.options?.host??this.element,t):this._$AH.handleEvent(t)}}class dt{constructor(t,e,i){this.element=t,this.type=6,this._$AN=void 0,this._$AM=e,this.options=i}get _$AU(){return this._$AM._$AU}_$AI(t){it(this,t)}}const ct={M:T,P:A,A:P,C:1,L:tt,R:ot,D:E,V:it,I:nt,H:at,N:st,U:lt,B:rt,F:dt},pt=C.litHtmlPolyfillSupport;pt?.(et,nt),(C.litHtmlVersions??=[]).push("3.2.1");class ut extends S{constructor(){super(...arguments),this.renderOptions={host:this},this._$Do=void 0}createRenderRoot(){const t=super.createRenderRoot();return this.renderOptions.renderBefore??=t.firstChild,t}update(t){const e=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(t),this._$Do=((t,e,i)=>{const o=i?.renderBefore??e;let n=o._$litPart$;if(void 0===n){const t=i?.renderBefore??null;o._$litPart$=n=new nt(e.insertBefore(M(),t),t,void 0,i??{})}return n._$AI(t),n})(e,this.renderRoot,this.renderOptions)}connectedCallback(){super.connectedCallback(),this._$Do?.setConnected(!0)}disconnectedCallback(){super.disconnectedCallback(),this._$Do?.setConnected(!1)}render(){return X}}ut._$litElement$=!0,ut.finalized=!0,globalThis.litElementHydrateSupport?.({LitElement:ut});const mt=globalThis.litElementPolyfillSupport;mt?.({LitElement:ut}),(globalThis.litElementVersions??=[]).push("4.1.1");const gt=t=>(e,i)=>{void 0!==i?i.addInitializer((()=>{customElements.define(t,e)})):customElements.define(t,e)},ht={attribute:!0,type:String,converter:w,reflect:!1,hasChanged:$},bt=(t=ht,e,i)=>{const{kind:o,metadata:n}=i;let a=globalThis.litPropertyMetadata.get(n);if(void 0===a&&globalThis.litPropertyMetadata.set(n,a=new Map),a.set(i.name,t),"accessor"===o){const{name:o}=i;return{set(i){const n=e.get.call(this);e.set.call(this,i),this.requestUpdate(o,n,t)},init(e){return void 0!==e&&this.P(o,void 0,t),e}}}if("setter"===o){const{name:o}=i;return function(i){const n=this[o];e.call(this,i),this.requestUpdate(o,n,t)}}throw Error("Unsupported decorator location: "+o)};function vt(t){return(e,i)=>"object"==typeof i?bt(t,e,i):((t,e,i)=>{const o=e.hasOwnProperty(i);return e.constructor.createProperty(i,o?{...t,wrapped:!0}:t),o?Object.getOwnPropertyDescriptor(e,i):void 0})(t,e,i)}function _t(t){return vt({...t,state:!0,attribute:!1})}class ft{static render(t,e,i,o){if(!("tap_action"in t)||!("hold_action"in t)||!("double_tap_action"in t)){const e={};"tap_action"in t||(e.tap_action={action:"default"}),"hold_action"in t||(e.hold_action={action:"default"}),"double_tap_action"in t||(e.double_tap_action={action:"default"}),Object.keys(e).length>0&&o(e)}const n={tap_action:t.tap_action||{action:"default"},hold_action:t.hold_action||{action:"default"},double_tap_action:t.double_tap_action||{action:"default"}};return q`
      <div class="global-actions-tab">
        <style>
          .global-actions-tab {
            padding: 0px;
          }

          .actions-section {
            background: var(--secondary-background-color);
            border: 2px solid var(--primary-color);
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
          }

          .section-header {
            margin-bottom: 16px;
            padding-bottom: 12px;
            border-bottom: 1px solid rgba(var(--rgb-primary-color), 0.2);
          }

          .section-header h4 {
            margin: 0;
            color: var(--primary-text-color);
            font-size: 16px;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 8px;
          }

          .section-header p {
            margin: 6px 0 0 0;
            color: var(--secondary-text-color);
            font-size: 13px;
            line-height: 1.4;
          }

          .action-form {
            margin-bottom: 20px;
          }

          .action-description {
            color: var(--secondary-text-color);
            font-size: 13px;
            margin-bottom: 16px;
            line-height: 1.4;
            font-style: italic;
          }

          /* Allow native HA form styling to show through */
          .global-actions-tab ha-form {
            display: block;
            margin: 0;
            padding: 0;
          }

          /* Style native expansion panels if they appear */
          .global-actions-tab ha-expansion-panel {
            margin-bottom: 8px;
          }

          /* Style the action selectors */
          ha-form .mdc-text-field,
          ha-form .mdc-select,
          ha-form ha-selector {
            margin-top: 0 !important;
          }

          ha-form .mdc-text-field--outlined .mdc-notched-outline {
            border-radius: 6px;
          }

          /* Hide any blank list items generated by selector internals */
          .global-actions-tab ha-select ha-list-item:not([value]),
          .global-actions-tab ha-select ha-list-item[value=''],
          .global-actions-tab ha-select ha-list-item[aria-label=''],
          .global-actions-tab ha-select .mdc-deprecated-list-item:not([data-value]),
          .global-actions-tab ha-select .mdc-deprecated-list-item[data-value=''],
          .global-actions-tab ha-select .mdc-list-item:not([data-value]),
          .global-actions-tab ha-select .mdc-list-item[data-value=''] {
            display: none !important;
          }

          /* Hide unwanted action options */
          .global-actions-tab ha-form mwc-list-item[value='toggle'],
          .global-actions-tab
            ha-form
            mwc-list-item[graphic='icon']:has(ha-icon[icon='mdi:gesture-tap']),
          .global-actions-tab ha-form .mdc-deprecated-list-item[data-value='toggle'],
          .global-actions-tab ha-form .mdc-list-item[data-value='toggle'],
          .global-actions-tab ha-form option[value='toggle'] {
            display: none !important;
          }

          /* Hide "Default ()" option - target by text content */
          .global-actions-tab ha-form mwc-list-item:has-text('Default ()'),
          .global-actions-tab ha-form .mdc-deprecated-list-item:has-text('Default ()'),
          .global-actions-tab ha-form .mdc-list-item:has-text('Default ()'),
          .global-actions-tab ha-form option:has-text('Default ()') {
            display: none !important;
          }

          /* Alternative approach using CSS attribute selectors for text content */
          .global-actions-tab ha-form mwc-list-item[textContent*='Default ()'],
          .global-actions-tab ha-form .mdc-deprecated-list-item[textContent*='Default ()'],
          .global-actions-tab ha-form .mdc-list-item[textContent*='Default ()'] {
            display: none !important;
          }

          /* Style the ha-select dropdown */
          ha-select {
            width: 100%;
            display: block;
            --mdc-theme-surface: var(--card-background-color);
            --mdc-theme-primary: var(--primary-color);
            --mdc-select-fill-color: var(--input-fill-color, transparent);
            --mdc-select-outlined-idle-border-color: var(--input-idle-line-color);
            --mdc-select-outlined-hover-border-color: var(--input-hover-line-color);
            --mdc-select-dropdown-icon-color: var(--secondary-text-color);
            --mdc-select-label-ink-color: var(--secondary-text-color);
            --mdc-select-ink-color: var(--primary-text-color);
          }
          /* Ensure consistent spacing */
        </style>

        <div class="actions-section">
          <div class="section-header">
            <h4>
              <ha-icon icon="mdi:gesture-tap"></ha-icon>
              Actions Configuration
            </h4>
            <p>
              Configure how this module responds to user interactions. Uses Home Assistant's native
              action system for consistent behavior across your dashboard.
            </p>
          </div>

          ${this.renderActionConfig("Tap Action","Action performed when tapping/clicking the module",n.tap_action||{action:"default"},e,(t=>o({tap_action:t})))}
          ${this.renderActionConfig("Hold Action","Action performed when holding down on the module",n.hold_action||{action:"default"},e,(t=>o({hold_action:t})))}
          ${this.renderActionConfig("Double Tap Action","Action performed when double-tapping the module",n.double_tap_action||{action:"default"},e,(t=>o({double_tap_action:t})))}
        </div>
      </div>
    `}static renderActionConfig(t,e,i,o,n){const a="nothing"===(null==i?void 0:i.action)?Object.assign(Object.assign({},i),{action:"default"}):i,r=[];try{const t=o.services||{};Object.keys(t).sort().forEach((e=>{Object.keys(t[e]||{}).sort().forEach((t=>r.push({id:`${e}.${t}`,name:`${e}.${t}`})))}))}catch(t){}return q`
      <div class="action-form">
        <div class="action-description">${e}</div>

        <div style="margin-bottom: 16px;">
          <div
            style="font-size: 16px; font-weight: 600; margin-bottom: 8px; color: var(--primary-text-color);"
          >
            ${t}
          </div>
          <div style="margin-bottom: 12px;">
            <ha-form
              .hass=${o}
              .data=${{action_config:a}}
              .schema=${[{name:"action_config",label:"",selector:{ui_action:{actions:["more-info","toggle","navigate","url","perform-action","assist"]}}}]}
              .computeLabel=${this.computeLabel}
              @value-changed=${t=>{var e;const i=null===(e=t.detail.value)||void 0===e?void 0:e.action_config;i&&n(i)}}
            ></ha-form>
          </div>

          ${"more-info"===(null==i?void 0:i.action)?q`
                <div
                  class="conditional-fields-group"
                  style="margin-top: 16px; border-left: 4px solid var(--primary-color); background: rgba(var(--rgb-primary-color), 0.08); border-radius: 0 8px 8px 0; overflow: hidden;"
                >
                  <div
                    class="conditional-fields-header"
                    style="background: rgba(var(--rgb-primary-color), 0.15); padding: 12px 16px; font-size: 14px; font-weight: 600; color: var(--primary-color); border-bottom: 1px solid rgba(var(--rgb-primary-color), 0.2); text-transform: uppercase; letter-spacing: 0.5px;"
                  >
                    More Info Configuration
                  </div>
                  <div class="conditional-fields-content" style="padding: 16px;">
                    <div
                      class="field-title"
                      style="font-size: 16px; font-weight: 600; margin-bottom: 4px;"
                    >
                      Entity
                    </div>
                    <div
                      class="field-description"
                      style="font-size: 13px; color: var(--secondary-text-color); margin-bottom: 12px; opacity: 0.8; line-height: 1.4;"
                    >
                      Select which entity to show more information for
                    </div>
                    <ha-form
                      .hass=${o}
                      .data=${{entity:i.entity||""}}
                      .schema=${[{name:"entity",label:"",selector:{entity:{}}}]}
                      .computeLabel=${this.computeLabel}
                      @value-changed=${t=>{var e;const o=null===(e=t.detail.value)||void 0===e?void 0:e.entity;n(Object.assign(Object.assign({},i),{entity:o}))}}
                    ></ha-form>
                  </div>
                </div>
              `:""}
        </div>
      </div>
    `}static getDefaultActions(){return{tap_action:{action:"default"},hold_action:{action:"default"},double_tap_action:{action:"default"}}}static validateActions(t){const e=[];return["tap_action","hold_action","double_tap_action"].forEach((i=>{const o=t[i];o&&("navigate"!==o.action||o.navigation_path||e.push(`${i}: Navigation path is required for navigate action`),"url"!==o.action||o.url_path||e.push(`${i}: URL is required for URL action`),"perform-action"!==o.action||o.perform_action||o.service||e.push(`${i}: Action is required for perform-action`))})),{valid:0===e.length,errors:e}}}ft.computeLabel=t=>{var e;return Object.prototype.hasOwnProperty.call(t,"label")&&null!==(e=t.label)&&void 0!==e?e:""};class yt{static renderForm(t,e,i,o,n=!1){return q`
      <ha-form
        .hass=${t}
        .data=${e}
        .schema=${i}
        .computeLabel=${n?this._defaultComputeLabel:this._hideLabels}
        .computeDescription=${n?this._defaultComputeDescription:this._hideDescriptions}
        @value-changed=${o}
      ></ha-form>
    `}static renderFieldSection(t,e,i,o,n,a){return q`
      <div class="field-section" style="margin-bottom: 16px;">
        ${t?q`<div
              class="field-title"
              style="font-size: 16px; font-weight: 600; color: var(--primary-text-color); margin-bottom: 4px;"
            >
              ${t}
            </div>`:""}
        ${e?q`<div
              class="field-description"
              style="font-size: 13px; color: var(--secondary-text-color); margin-bottom: 12px; opacity: 0.8; line-height: 1.4;"
            >
              ${e}
            </div>`:""}
        ${yt.renderForm(i,o,n,a,!1)}
      </div>
    `}static renderSettingsSection(t,e,i){return q`
      <div
        class="settings-section"
        style="background: var(--secondary-background-color); border-radius: 8px; padding: 16px; margin-bottom: 32px;"
      >
        ${t?q`
              <div
                class="section-title"
                style="font-size: 18px; font-weight: 700; text-transform: uppercase; color: var(--primary-color); margin-bottom: 16px; letter-spacing: 0.5px;"
              >
                ${t}
              </div>
            `:""}
        ${e?q`
              <div
                style="font-size: 13px; color: var(--secondary-text-color); margin-bottom: 16px; opacity: 0.8; line-height: 1.4;"
              >
                ${e}
              </div>
            `:""}
        ${i.map((t=>yt.renderFieldSection(t.title,t.description,t.hass,t.data,t.schema,t.onChange)))}
      </div>
    `}static entity(t,e){return{name:t,selector:{entity:e?{domain:e}:{}}}}static text(t,e=!1){return{name:t,selector:{text:e?{multiline:!0}:{}}}}static select(t,e){return{name:t,selector:{select:{options:e,mode:"dropdown"}}}}static icon(t){return{name:t,selector:{icon:{}}}}static boolean(t){return{name:t,selector:{boolean:{}}}}static number(t,e,i,o){const n={};return void 0!==e&&(n.min=e),void 0!==i&&(n.max=i),void 0!==o&&(n.step=o),{name:t,selector:{number:Object.keys(n).length?n:{}}}}static color(t){return{name:t,selector:{color_rgb:{}}}}static grid(t){return{type:"grid",name:"",schema:t}}static expandable(t,e,i){return{type:"expandable",name:t,title:e,schema:i}}static getCleanFormStyles(){return"\n      .field-section {\n        margin-bottom: 16px;\n      }\n\n      .field-title {\n        font-size: 16px !important;\n        font-weight: 600 !important;\n       \n        margin-bottom: 4px !important;\n        display: block !important;\n      }\n\n      .field-description {\n        font-size: 13px !important;\n        color: var(--secondary-text-color) !important;\n        margin-bottom: 12px !important;\n        display: block !important;\n        opacity: 0.8 !important;\n        line-height: 1.4 !important;\n      }\n\n      .section-title {\n        font-size: 18px !important;\n        font-weight: 700 !important;\n        color: var(--primary-color) !important;\n        text-transform: uppercase !important;\n        letter-spacing: 0.5px !important;\n      }\n\n      .settings-section {\n        margin-bottom: 16px;\n        max-width: 100%;\n        box-sizing: border-box;\n      }\n\n      /* Ensure form elements are properly sized */\n      ha-form {\n        display: block;\n        width: 100%;\n      }\n\n      ha-form ha-select,\n      ha-form ha-textfield,\n      ha-form ha-entity-picker,\n      ha-form ha-icon-picker {\n        width: 100%;\n        --mdc-theme-primary: var(--primary-color);\n      }\n    "}static injectCleanFormStyles(){return q`
      <style>
        ${yt.getCleanFormStyles()}
      </style>
    `}}yt._hideLabels=()=>"",yt._defaultComputeLabel=t=>t.name,yt._hideDescriptions=()=>"",yt._defaultComputeDescription=t=>t.description||"";class xt{constructor(){this.renderUcForm=(t,e,i,o,n=!0)=>yt.renderForm(t,e,i,o,n),this.renderFieldSection=(t,e,i,o,n,a)=>yt.renderFieldSection(t,e,i,o,n,a),this.renderSettingsSection=(t,e,i)=>yt.renderSettingsSection(t,e,i),this.injectUcFormStyles=()=>yt.injectCleanFormStyles(),this.entityField=yt.entity,this.textField=yt.text,this.selectField=yt.select,this.iconField=yt.icon,this.booleanField=yt.boolean,this.numberField=yt.number,this.colorField=yt.color,this.gridField=yt.grid,this.expandableField=yt.expandable}renderActionsTab(t,e,i,o){return ft.render(t,e,i,o)}validate(t){const e=[];return t.id||e.push("Module ID is required"),t.type||e.push("Module type is required"),{valid:0===e.length,errors:e}}generateId(t){return`${t}-${Date.now()}-${Math.random().toString(36).substr(2,9)}`}renderFormField(t,e,i){return q`
      <div class="form-field">
        <label class="form-label">${t}</label>
        ${e} ${i?q`<div class="form-description">${i}</div>`:""}
      </div>
    `}renderColorPicker(t,e,i,o){return this.renderFormField(t,q`
        <input
          type="color"
          .value=${e||"#000000"}
          @change=${t=>i(t.target.value)}
        />
      `,o)}renderNumberInput(t,e,i,o={},n){var a;const r=null!==(a=o.defaultValue)&&void 0!==a?a:0;return this.renderFormField(t,q`
        <input
          type="number"
          .value=${null!=e?e:""}
          placeholder=${r.toString()}
          min=${o.min||0}
          max=${o.max||1e3}
          step=${o.step||1}
          @input=${t=>{const e=t.target.value.trim();i(""===e?r:Number(e))}}
        />
      `,n)}renderTextInput(t,e,i,o,n){return this.renderFormField(t,q`
        <input
          type="text"
          .value=${e||""}
          placeholder=${o||""}
          @input=${t=>i(t.target.value)}
        />
      `,n)}renderEntityPicker(t,e,i,o,n,a,r){return this.renderFormField("",q`
        <ha-form
          .hass=${o}
          .data=${{entity:e||""}}
          .schema=${[{name:"entity",selector:{entity:{}},label:t,description:a||""}]}
          .computeLabel=${t=>t.label||t.name}
          .computeDescription=${t=>t.description||""}
          @value-changed=${t=>i(t.detail.value.entity)}
        ></ha-form>
      `,"")}renderTextArea(t,e,i,o,n){return this.renderFormField(t,q`
        <textarea
          .value=${e||""}
          placeholder=${o||""}
          rows="3"
          @input=${t=>i(t.target.value)}
        ></textarea>
      `,n)}renderSelect(t,e,i,o,n){return this.renderFormField(t,q`
        <select
          .value=${e||""}
          @change=${t=>o(t.target.value)}
        >
          ${i.map((t=>q`<option value="${t.value}">${t.label}</option>`))}
        </select>
      `,n)}renderCheckbox(t,e,i,o){return this.renderFormField("",q`
        <label class="checkbox-wrapper">
          <input
            type="checkbox"
            .checked=${e||!1}
            @change=${t=>i(t.target.checked)}
          />
          ${t}
        </label>
      `,o)}renderConditionalFieldsGroup(t,e){return q`
      <div class="conditional-fields-group">
        <div class="conditional-fields-header">${t}</div>
        <div class="conditional-fields-content">${e}</div>
      </div>
    `}}class wt{static render(t,e,i,o="Link Configuration"){var n,a,r;return q`
      <div class="ultra-link-config">
        <style>
          .ultra-link-config {
            padding: 16px;
          }

          .field-title {
            font-size: 16px;
            font-weight: 600;
            margin-bottom: 4px;
          }

          .field-description {
            font-size: 13px;
            font-weight: 400;
            margin-bottom: 16px;
            color: var(--secondary-text-color);
            line-height: 1.4;
          }

          .behavior-group {
            margin-bottom: 24px;
          }

          /* Hide unwanted form elements */
          .ultra-link-config ha-form {
            display: block;
            margin: 0;
            padding: 0;
          }

          /* Hide redundant labels */
          .ultra-link-config ha-form .mdc-form-field > label,
          .ultra-link-config ha-form .mdc-text-field > label,
          .ultra-link-config ha-form .mdc-floating-label,
          .ultra-link-config ha-form .mdc-notched-outline__leading,
          .ultra-link-config ha-form .mdc-notched-outline__notch,
          .ultra-link-config ha-form .mdc-notched-outline__trailing,
          .ultra-link-config ha-form .mdc-floating-label--float-above,
          .ultra-link-config ha-form label[for],
          .ultra-link-config ha-form .ha-form-label,
          .ultra-link-config ha-form .form-label {
            display: none !important;
          }

          /* Hide labels containing underscores */
          .ultra-link-config ha-form label[data-label*='_'],
          .ultra-link-config ha-form .label-text:contains('_'),
          .ultra-link-config label:contains('_') {
            display: none !important;
          }

          /* Additional safeguards for underscore labels */
          .ultra-link-config ha-form .mdc-text-field-character-counter,
          .ultra-link-config ha-form .mdc-text-field-helper-text,
          .ultra-link-config ha-form mwc-formfield,
          .ultra-link-config ha-form .formfield {
            display: none !important;
          }
        </style>

        <div class="field-title" style="font-size: 18px; font-weight: 700; margin-bottom: 8px;">
          ${o}
        </div>
        <div
          class="field-description"
          style="font-size: 13px; font-weight: 400; margin-bottom: 16px; color: var(--secondary-text-color);"
        >
          Configure what happens when users interact with this element. Choose different actions for
          tap, hold, and double-tap gestures.
        </div>

        <!-- Tap Behavior -->
        <div class="tap-behavior-group" style="margin-bottom: 24px;">
          <div class="field-title" style="font-size: 16px; font-weight: 600; margin-bottom: 4px;">
            Tap Behavior
          </div>
          <div
            class="field-description"
            style="font-size: 13px; font-weight: 400; margin-bottom: 12px; color: var(--secondary-text-color);"
          >
            Action to perform when the element is tapped/clicked.
          </div>
          ${wt.renderCleanForm(t,{action:(null===(n=e.tap_action)||void 0===n?void 0:n.action)||"default"},[{name:"action",selector:{select:{options:[{value:"nothing",label:"Nothing"},{value:"more-info",label:"More info"},{value:"toggle",label:"Toggle"},{value:"navigate",label:"Navigate"},{value:"url",label:"URL"},{value:"perform-action",label:"Perform action"},{value:"assist",label:"Assist"}],mode:"dropdown"}}}],(t=>{const o=Object.assign(Object.assign({},e.tap_action),{action:t.detail.value.action});i({tap_action:o})}))}
          ${wt.renderActionFields(t,e.tap_action||{action:"nothing"},(t=>{const o=Object.assign(Object.assign({},e.tap_action),t);i({tap_action:o})}))}
        </div>

        <!-- Hold Behavior -->
        <div class="hold-behavior-group" style="margin-bottom: 24px;">
          <div class="field-title" style="font-size: 16px; font-weight: 600; margin-bottom: 4px;">
            Hold Behavior
          </div>
          <div
            class="field-description"
            style="font-size: 13px; font-weight: 400; margin-bottom: 12px; color: var(--secondary-text-color);"
          >
            Action to perform when the element is pressed and held.
          </div>
          ${wt.renderCleanForm(t,{action:(null===(a=e.hold_action)||void 0===a?void 0:a.action)||"default"},[{name:"action",selector:{select:{options:[{value:"nothing",label:"Nothing"},{value:"more-info",label:"More info"},{value:"toggle",label:"Toggle"},{value:"navigate",label:"Navigate"},{value:"url",label:"URL"},{value:"perform-action",label:"Perform action"},{value:"assist",label:"Assist"}],mode:"dropdown"}}}],(t=>{const o=Object.assign(Object.assign({},e.hold_action),{action:t.detail.value.action});i({hold_action:o})}))}
          ${wt.renderActionFields(t,e.hold_action||{action:"nothing"},(t=>{const o=Object.assign(Object.assign({},e.hold_action),t);i({hold_action:o})}))}
        </div>

        <!-- Double Tap Behavior -->
        <div class="double-tap-behavior-group">
          <div class="field-title" style="font-size: 16px; font-weight: 600; margin-bottom: 4px;">
            Double Tap Behavior
          </div>
          <div
            class="field-description"
            style="font-size: 13px; font-weight: 400; margin-bottom: 12px; color: var(--secondary-text-color);"
          >
            Action to perform when the element is double-tapped/clicked.
          </div>
          ${wt.renderCleanForm(t,{action:(null===(r=e.double_tap_action)||void 0===r?void 0:r.action)||"default"},[{name:"action",selector:{select:{options:[{value:"nothing",label:"Nothing"},{value:"more-info",label:"More info"},{value:"toggle",label:"Toggle"},{value:"navigate",label:"Navigate"},{value:"url",label:"URL"},{value:"perform-action",label:"Perform action"},{value:"assist",label:"Assist"}],mode:"dropdown"}}}],(t=>{const o=Object.assign(Object.assign({},e.double_tap_action),{action:t.detail.value.action});i({double_tap_action:o})}))}
          ${wt.renderActionFields(t,e.double_tap_action||{action:"nothing"},(t=>{const o=Object.assign(Object.assign({},e.double_tap_action),t);i({double_tap_action:o})}))}
        </div>
      </div>
    `}static renderCleanForm(t,e,i,o){return q`
      <div class="ultra-clean-form">
        <ha-form .hass=${t} .data=${e} .schema=${i} @value-changed=${o}></ha-form>
      </div>
    `}static renderActionFields(t,e,i){switch(e.action){case"default":break;case"more-info":case"toggle":return q`
          <div style="margin-top: 16px;">
            <div class="field-title" style="font-size: 14px; font-weight: 600; margin-bottom: 4px;">
              Entity
            </div>
            <div
              class="field-description"
              style="font-size: 12px; font-weight: 400; margin-bottom: 8px; color: var(--secondary-text-color);"
            >
              Select the entity to
              ${"more-info"===e.action?"show more info for":"toggle"}.
            </div>
            ${wt.renderCleanForm(t,{entity:e.entity||""},[{name:"entity",selector:{entity:{}}}],(t=>i({entity:t.detail.value.entity})))}
          </div>
        `;case"navigate":return q`
          <div style="margin-top: 16px;">
            <div class="field-title" style="font-size: 14px; font-weight: 600; margin-bottom: 4px;">
              Navigation Path
            </div>
            <div
              class="field-description"
              style="font-size: 12px; font-weight: 400; margin-bottom: 8px; color: var(--secondary-text-color);"
            >
              Choose where to navigate or enter a custom path (e.g., /lovelace/dashboard).
            </div>
            ${wt.renderNavigationPicker(t,e.navigation_path||"",(t=>i({navigation_path:t})))}
          </div>
        `;case"url":return q`
          <div style="margin-top: 16px;">
            <div class="field-title" style="font-size: 14px; font-weight: 600; margin-bottom: 4px;">
              URL Path
            </div>
            <div
              class="field-description"
              style="font-size: 12px; font-weight: 400; margin-bottom: 8px; color: var(--secondary-text-color);"
            >
              Enter the URL to navigate to (e.g., https://www.example.com).
            </div>
            ${wt.renderCleanForm(t,{url_path:e.url_path||""},[{name:"url_path",selector:{text:{}}}],(t=>i({url_path:t.detail.value.url_path})))}
          </div>
        `;case"perform-action":return q`
          <div style="margin-top: 16px;">
            <div class="field-title" style="font-size: 14px; font-weight: 600; margin-bottom: 4px;">
              Service
            </div>
            <div
              class="field-description"
              style="font-size: 12px; font-weight: 400; margin-bottom: 8px; color: var(--secondary-text-color);"
            >
              Choose the service to call or enter a custom service.
            </div>
            ${wt.renderCleanForm(t,{service:e.service||""},[{name:"service",selector:{select:{options:[{value:"homeassistant.restart",label:"Restart Home Assistant"},{value:"homeassistant.stop",label:"Stop Home Assistant"},{value:"homeassistant.reload_core_config",label:"Reload Core Config"},{value:"homeassistant.reload_config_entry",label:"Reload Config Entry"},{value:"homeassistant.update_entity",label:"Update Entity"},{value:"system_log.clear",label:"Clear System Log"},{value:"recorder.purge",label:"Purge Recorder"},{value:"hassio.host_reboot",label:"Reboot Host System"},{value:"hassio.host_shutdown",label:"Shutdown Host System"},{value:"light.turn_on",label:"Turn On Light"},{value:"light.turn_off",label:"Turn Off Light"},{value:"light.toggle",label:"Toggle Light"},{value:"switch.turn_on",label:"Turn On Switch"},{value:"switch.turn_off",label:"Turn Off Switch"},{value:"switch.toggle",label:"Toggle Switch"},{value:"climate.set_temperature",label:"Set Temperature"},{value:"climate.turn_on",label:"Turn On Climate"},{value:"climate.turn_off",label:"Turn Off Climate"},{value:"media_player.play_media",label:"Play Media"},{value:"media_player.media_play",label:"Media Play"},{value:"media_player.media_pause",label:"Media Pause"},{value:"media_player.media_stop",label:"Media Stop"},{value:"media_player.volume_set",label:"Set Volume"},{value:"automation.trigger",label:"Trigger Automation"},{value:"automation.turn_on",label:"Enable Automation"},{value:"automation.turn_off",label:"Disable Automation"},{value:"script.turn_on",label:"Run Script"},{value:"scene.turn_on",label:"Activate Scene"},{value:"cover.open_cover",label:"Open Cover"},{value:"cover.close_cover",label:"Close Cover"},{value:"cover.toggle",label:"Toggle Cover"},{value:"lock.lock",label:"Lock"},{value:"lock.unlock",label:"Unlock"},{value:"notify.persistent_notification",label:"Send Notification"},{value:"input_boolean.toggle",label:"Toggle Input Boolean"},{value:"input_select.select_option",label:"Select Input Option"},{value:"custom",label:"Custom Service..."}],mode:"dropdown",custom_value:!0}}}],(t=>{var o;const n=(null===(o=t.detail.value)||void 0===o?void 0:o.service)||t.detail.value;console.log("🔍 UltraLink: Service dropdown changed:",{fullEvent:t.detail,detailValue:t.detail.value,serviceValue:n,currentAction:e}),i({service:n})}))}

            <div style="margin-top: 12px;">
              <div
                class="field-title"
                style="font-size: 14px; font-weight: 600; margin-bottom: 4px;"
              >
                Target Entity (optional)
              </div>
              <div
                class="field-description"
                style="font-size: 12px; font-weight: 400; margin-bottom: 8px; color: var(--secondary-text-color);"
              >
                Choose an entity to target with this service call.
              </div>
              ${wt.renderCleanForm(t,{entity:e.entity||""},[{name:"entity",selector:{entity:{}}}],(t=>{var o;const n=(null===(o=t.detail.value)||void 0===o?void 0:o.entity)||t.detail.value;console.log("🔍 UltraLink: Entity selector changed:",{fullEvent:t.detail,detailValue:t.detail.value,entityValue:n,currentAction:e}),i({entity:n})}))}
            </div>

            <div style="margin-top: 12px;">
              <div
                class="field-title"
                style="font-size: 14px; font-weight: 600; margin-bottom: 4px;"
              >
                Service Data (optional)
              </div>
              <div
                class="field-description"
                style="font-size: 12px; font-weight: 400; margin-bottom: 8px; color: var(--secondary-text-color);"
              >
                Enter service data as YAML (e.g., entity_id: light.living_room).
              </div>
              ${wt.renderCleanForm(t,{service_data:e.service_data?JSON.stringify(e.service_data,null,2):""},[{name:"service_data",selector:{text:{multiline:!0,type:"text"}}}],(t=>{try{const e=t.detail.value.service_data?JSON.parse(t.detail.value.service_data):void 0;i({service_data:e})}catch(t){}}))}
            </div>
          </div>
        `;default:return q``}}static renderNavigationPicker(t,e,i){const o=[{value:"/lovelace",label:"Overview (/lovelace)"},{value:"/config",label:"Settings (/config)"},{value:"/config/dashboard",label:"Dashboards (/config/dashboard)"},{value:"/config/entities",label:"Entities (/config/entities)"},{value:"/config/devices",label:"Devices (/config/devices)"},{value:"/config/automations",label:"Automations (/config/automations)"},{value:"/config/scripts",label:"Scripts (/config/scripts)"},{value:"/config/scenes",label:"Scenes (/config/scenes)"},{value:"/developer-tools",label:"Developer Tools (/developer-tools)"},...Object.keys(t.panels).filter((e=>t.panels[e].url_path||"lovelace"===e)).map((e=>({value:t.panels[e].url_path||`/lovelace/${e}`,label:`${t.panels[e].title||e} (${t.panels[e].url_path||`/lovelace/${e}`})`})))];return wt.renderCleanForm(t,{navigation_path:e},[{name:"navigation_path",selector:{select:{options:[{value:"",label:"Custom path..."},...o],mode:"dropdown",custom_value:!0}}}],(t=>i(t.detail.value.navigation_path)))}static getDefaultConfig(){return{tap_action:{action:"nothing"},hold_action:{action:"nothing"},double_tap_action:{action:"nothing"}}}static handleAction(t,e,i){const o=t.service||t.perform_action;switch(t.action){case"more-info":if(t.entity){const e=new CustomEvent("hass-more-info",{bubbles:!0,composed:!0,detail:{entityId:t.entity}});null==i||i.dispatchEvent(e)}break;case"toggle":if(t.entity)e.callService("homeassistant","toggle",{entity_id:t.entity});else if(t.target){const i={};t.target.entity_id&&(i.entity_id=t.target.entity_id),t.target.device_id&&(i.device_id=t.target.device_id),t.target.area_id&&(i.area_id=t.target.area_id),t.target.floor_id&&(i.floor_id=t.target.floor_id),t.target.label_id&&(i.label_id=t.target.label_id),console.log("🔧 Ultra Link: Toggle action with target:",i),e.callService("homeassistant","toggle",i)}break;case"navigate":if(t.navigation_path){window.history.pushState(null,"",t.navigation_path);const e=new CustomEvent("location-changed",{bubbles:!0,composed:!0,detail:{replace:!1}});window.dispatchEvent(e)}break;case"url":t.url_path&&window.open(t.url_path,"_blank");break;case"perform-action":if(o){const[i,n]=o.split(".");if(i&&n){let a=Object.assign({},t.data||t.service_data);t.entity&&!a.entity_id&&(a.entity_id=t.entity),t.target&&(t.target.entity_id&&!a.entity_id&&(a.entity_id=t.target.entity_id),t.target.device_id&&!a.device_id&&(a.device_id=t.target.device_id),t.target.area_id&&!a.area_id&&(a.area_id=t.target.area_id),t.target.floor_id&&!a.floor_id&&(a.floor_id=t.target.floor_id),t.target.label_id&&!a.label_id&&(a.label_id=t.target.label_id));try{console.log(`🚀 Ultra Card: Executing service ${o}`,{domain:i,service:n,serviceData:a,entity:t.entity,target:t.target,originalAction:t}),e.callService(i,n,a)}catch(t){console.error(`❌ Ultra Card: Failed to execute service ${o}:`,t)}}else console.warn(`⚠️ Ultra Card: Invalid service format "${o}". Expected format: domain.service`)}else console.warn("⚠️ Ultra Card: No service specified for perform-action",{action:t,serviceProperty:t.service,performActionProperty:t.perform_action});break;case"assist":const n=new CustomEvent("hass-assist",{bubbles:!0,composed:!0});null==i||i.dispatchEvent(n)}}}class $t{static render(t,e,i,o,n){return q`
      ${n()}
      <div class="module-actions-container">
        <!-- Global Actions Tab -->
        ${ft.render(t,e,i,o)}

        <!-- Hover Effects Section -->
        <div class="actions-section">
          <div class="section-header">
            <h4>
              <ha-icon icon="mdi:cursor-default-gesture"></ha-icon>
              Hover Effects
            </h4>
            <p>Configure visual feedback when hovering over clickable elements in this module.</p>
          </div>

          <div style="margin-bottom: 16px;">
            <ha-form
              .hass=${e}
              .data=${{enable_hover_effect:!1!==t.enable_hover_effect}}
              .schema=${[{name:"enable_hover_effect",label:"Enable Hover Effects",description:"Show visual feedback when hovering over clickable items",selector:{boolean:{}}}]}
              .computeLabel=${t=>t.label||""}
              .computeDescription=${t=>t.description||""}
              @value-changed=${t=>{o({enable_hover_effect:t.detail.value.enable_hover_effect})}}
            ></ha-form>
          </div>

          ${!1!==t.enable_hover_effect?q`
                <div style="margin-bottom: 16px;">
                  <div
                    class="field-title"
                    style="font-size: 16px !important; font-weight: 600 !important; margin-bottom: 12px;"
                  >
                    Hover Background Color
                  </div>
                  <ultra-color-picker
                    .value=${t.hover_background_color||""}
                    .defaultValue=${"var(--divider-color)"}
                    .hass=${e}
                    @value-changed=${t=>{o({hover_background_color:t.detail.value})}}
                  ></ultra-color-picker>
                </div>
              `:""}
        </div>

        <style>
          .module-actions-container {
            display: flex;
            flex-direction: column;
            gap: 0;
          }

          .actions-section {
            background: var(--secondary-background-color);
            border: 2px solid var(--primary-color);
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
          }

          .section-header {
            margin-bottom: 16px;
            padding-bottom: 12px;
            border-bottom: 1px solid rgba(var(--rgb-primary-color), 0.2);
          }

          .section-header h4 {
            margin: 0;
            color: var(--primary-text-color);
            font-size: 16px;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 8px;
          }

          .section-header p {
            margin: 6px 0 0 0;
            color: var(--secondary-text-color);
            font-size: 13px;
            line-height: 1.4;
          }

          .field-title {
            font-size: 16px !important;
            font-weight: 600 !important;

            margin-bottom: 12px !important;
            display: block !important;
          }
        </style>
      </div>
    `}static hasActiveActions(t){return t.tap_action&&"nothing"!==t.tap_action.action||t.hold_action&&"nothing"!==t.hold_action.action||t.double_tap_action&&"nothing"!==t.double_tap_action.action}static getHoverStyles(){return"\n      /* Clickable element hover styles */\n      .module-clickable {\n        transition: all 0.2s ease;\n      }\n\n      .module-clickable.hover-enabled:hover {\n        background: var(--hover-background);\n        border-radius: 8px !important;\n        transform: scale(1.02);\n      }\n\n      .module-clickable:active {\n        transform: scale(0.98);\n        background: var(--primary-color);\n        color: white;\n      }\n    "}static getClickableClass(t){return("module-clickable "+(!1!==t.enable_hover_effect?"hover-enabled":"")).trim()}static getClickableStyle(t){return`\n      cursor: pointer;\n      transition: all 0.2s ease;\n      border-radius: 4px;\n      padding: 4px;\n      --hover-background: ${t.hover_background_color||"var(--divider-color)"};\n    `}}class kt{constructor(t){this.hass=t,this._templateSubscriptions=new Map,this._templateResults=new Map,this._evaluationCache=new Map,this.CACHE_TTL=1e3}getTemplateResult(t){const e=this._evaluationCache.get(t);return e&&Date.now()-e.timestamp<this.CACHE_TTL?e.value:this._templateResults.get(t)}hasTemplateSubscription(t){return this._templateSubscriptions.has(t)}getAllTemplateResults(){return this._templateResults}async evaluateTemplate(t){var e;if(!t||!this.hass)return!1;const i=t.trim();if(!i)return!1;const o=`eval_${i}`,n=this._evaluationCache.get(o);if(n&&Date.now()-n.timestamp<this.CACHE_TTL)return n.value;try{const t=await this.hass.callApi("POST","template",{template:i}),e=t.toLowerCase().trim();let n;if(["true","on","yes","1"].includes(e))n=!0;else if(["false","off","no","0","unavailable","unknown","none",""].includes(e))n=!1;else{const i=parseFloat(e);isNaN(i)?(console.warn(`[UltraVehicleCard] Template evaluated to ambiguous string '${t}', interpreting as false.`),n=!1):n=0!==i}return this._evaluationCache.set(o,{value:n,timestamp:Date.now(),stringValue:t}),n}catch(t){const o=(null===(e=t.error)||void 0===e?void 0:e.message)||t.message||String(t);return console.error(`[UltraVehicleCard] Error evaluating template via API: ${i}. Error: ${o}`),!1}}async subscribeToTemplate(t,e,i){if(t&&this.hass){if(this._templateSubscriptions.has(e)){try{const t=this._templateSubscriptions.get(e);if(t){const e=await t;e&&"function"==typeof e&&await e()}}catch(t){}this._templateSubscriptions.delete(e)}try{const o=new Promise(((o,n)=>{o(this.hass.connection.subscribeMessage((t=>{const o=t.result;this.hass.__uvc_template_strings||(this.hass.__uvc_template_strings={}),this.hass.__uvc_template_strings[e]=o;const n=this.parseTemplateResult(o,e);n!==this._templateResults.get(e)&&i&&i(),this._templateResults.set(e,n),this._evaluationCache.set(e,{value:n,timestamp:Date.now(),stringValue:o})}),{type:"render_template",template:t}))}));this._templateSubscriptions.set(e,o)}catch(e){console.error(`[UltraVehicleCard] Failed to subscribe to template: ${t}`,e)}}}parseTemplateResult(t,e){if(e&&e.startsWith("info_entity_"))return!0;if(e&&e.startsWith("state_text_"))return!0;if(null==t)return!1;if("boolean"==typeof t)return t;if("number"==typeof t)return 0!==t;if("string"==typeof t){const e=t.toLowerCase().trim();return"true"===e||"on"===e||"yes"===e||"active"===e||"home"===e||"1"===e||"open"===e||"unlocked"===e||"false"!==e&&"off"!==e&&"no"!==e&&"inactive"!==e&&"not_home"!==e&&"away"!==e&&"0"!==e&&"closed"!==e&&"locked"!==e&&"unavailable"!==e&&"unknown"!==e&&""!==e}return console.warn(`[UltraVehicleCard] Template evaluated to ambiguous type '${typeof t}', interpreting as false.`),!1}async unsubscribeAllTemplates(){for(const[t,e]of this._templateSubscriptions.entries())try{if(e){const t=await Promise.resolve(e).catch((t=>null));if(t&&"function"==typeof t)try{await t()}catch(t){}}}catch(t){}this._templateSubscriptions.clear(),this._templateResults.clear(),this._evaluationCache.clear()}updateHass(t){this.hass=t,this._evaluationCache.clear()}}class St extends xt{constructor(){super(...arguments),this.metadata={type:"text",title:"Text Module",description:"Display custom text content",author:"WJD Designs",version:"1.0.0",icon:"mdi:format-text",category:"content",tags:["text","content","typography","template"]},this.clickTimeout=null,this.holdTimeout=null,this.isHolding=!1}createDefault(t,e){return{id:t||this.generateId("text"),type:"text",text:"Sample Text",link:"",hide_if_no_link:!1,tap_action:{action:"nothing"},hold_action:{action:"nothing"},double_tap_action:{action:"nothing"},icon:"",icon_position:"before",template_mode:!1,template:"",enable_hover_effect:!0,hover_background_color:"var(--divider-color)",font_size:26,font_weight:"700",text_transform:"uppercase",design:{text_align:"center"}}}renderGeneralTab(t,e,i,o){const n=t;return q`
      ${this.injectUcFormStyles()}
      <div class="module-general-settings">
        <!-- Content Configuration -->
        ${this.renderSettingsSection("Content Configuration","Configure the text content and basic settings for this module.",[{title:"Text Content",description:"Enter the text content to display in this module.",hass:e,data:{text:n.text||""},schema:[this.textField("text")],onChange:t=>o(t.detail.value)}])}

        <!-- Icon Configuration -->
        <div
          class="settings-section"
          style="background: var(--secondary-background-color); border-radius: 8px; padding: 16px; margin-bottom: 32px;"
        >
          <div
            class="section-title"
            style="font-size: 18px; font-weight: 700; text-transform: uppercase; color: var(--primary-color); margin-bottom: 16px; letter-spacing: 0.5px;"
          >
            Icon Configuration
          </div>
          <div
            style="font-size: 13px; color: var(--secondary-text-color); margin-bottom: 16px; opacity: 0.8; line-height: 1.4;"
          >
            Choose an icon to display alongside the text content.
          </div>

          ${yt.renderFieldSection("Icon","Choose an icon to display alongside the text. Leave empty for no icon.",e,{icon:n.icon||""},[this.iconField("icon")],(t=>o(t.detail.value)))}
          ${n.icon&&""!==n.icon.trim()?q`
                <div style="margin-top: 24px;">
                  <div
                    class="field-title"
                    style="font-size: 16px; font-weight: 600; margin-bottom: 4px;"
                  >
                    Icon Position
                  </div>
                  <div
                    class="field-description"
                    style="font-size: 13px; font-weight: 400; margin-bottom: 12px;"
                  >
                    Choose where to position the icon relative to the text.
                  </div>
                  <div
                    style="display: flex; gap: 8px; justify-content: flex-start; flex-wrap: wrap;"
                  >
                    <button
                      type="button"
                      style="padding: 8px 12px; border: 2px solid ${"before"===(n.icon_position||"before")?"var(--primary-color)":"var(--divider-color)"}; background: ${"before"===(n.icon_position||"before")?"var(--primary-color)":"transparent"}; color: ${"before"===(n.icon_position||"before")?"white":"var(--primary-text-color)"}; border-radius: 6px; cursor: pointer; display: flex; align-items: center; gap: 4px; flex: 1; min-width: 0; box-sizing: border-box;"
                      @click=${()=>o({icon_position:"before"})}
                    >
                      <ha-icon
                        icon="mdi:format-align-left"
                        style="font-size: 16px; flex-shrink: 0;"
                      ></ha-icon>
                      <span style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                        >Before Text</span
                      >
                    </button>
                    <button
                      type="button"
                      style="padding: 8px 12px; border: 2px solid ${"after"===(n.icon_position||"before")?"var(--primary-color)":"var(--divider-color)"}; background: ${"after"===(n.icon_position||"before")?"var(--primary-color)":"transparent"}; color: ${"after"===(n.icon_position||"before")?"white":"var(--primary-text-color)"}; border-radius: 6px; cursor: pointer; display: flex; align-items: center; gap: 4px; flex: 1; min-width: 0; box-sizing: border-box;"
                      @click=${()=>o({icon_position:"after"})}
                    >
                      <ha-icon
                        icon="mdi:format-align-right"
                        style="font-size: 16px; flex-shrink: 0;"
                      ></ha-icon>
                      <span style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                        >After Text</span
                      >
                    </button>
                  </div>
                </div>
              `:""}
        </div>

        <!-- Template Configuration -->
        <div
          class="settings-section template-mode-section"
          style="background: var(--secondary-background-color); border-radius: 8px; padding: 16px; margin-top: 24px;"
        >
          <div
            class="section-title"
            style="font-size: 18px !important; font-weight: 700 !important; text-transform: uppercase !important; color: var(--primary-color); margin-bottom: 16px; border-bottom: 2px solid var(--primary-color); padding-bottom: 8px;"
          >
            Template Mode
          </div>
          <div
            class="field-description"
            style="font-size: 13px !important; font-weight: 400 !important; margin-bottom: 16px;"
          >
            Use a template to render the text. Templates use Home Assistant's Jinja2 syntax.
          </div>

          <div class="field-group" style="margin-bottom: 16px;">
            <ha-form
              .hass=${e}
              .data=${{template_mode:n.template_mode||!1}}
              .schema=${[{name:"template_mode",label:"Template Mode",description:"Use Home Assistant templating syntax to render text",selector:{boolean:{}}}]}
              .computeLabel=${t=>t.label||t.name}
              .computeDescription=${t=>t.description||""}
              @value-changed=${t=>o({template_mode:t.detail.value.template_mode})}
            ></ha-form>
          </div>

          ${n.template_mode?q`
                <div class="field-group" style="margin-bottom: 16px;">
                  <ha-form
                    .hass=${e}
                    .data=${{template:n.template||""}}
                    .schema=${[{name:"template",label:"Value Template",description:"Template to render the text using Jinja2 syntax",selector:{text:{multiline:!0}}}]}
                    .computeLabel=${t=>t.label||t.name}
                    .computeDescription=${t=>t.description||""}
                    @value-changed=${t=>o({template:t.detail.value.template})}
                  ></ha-form>
                </div>

                <div class="template-examples">
                  <div
                    class="field-title"
                    style="font-size: 16px !important; font-weight: 600 !important; margin-bottom: 12px;"
                  >
                    Common Examples:
                  </div>

                  <div class="example-item" style="margin-bottom: 16px;">
                    <div
                      class="example-code"
                      style="background: var(--code-editor-background-color, #1e1e1e); padding: 12px; border-radius: 4px; font-family: 'Courier New', monospace; font-size: 12px; color: #d4d4d4; margin-bottom: 8px;"
                    >
                      {{ states('sensor.example') }}
                    </div>
                    <div
                      class="example-description"
                      style="font-size: 12px; color: var(--secondary-text-color);"
                    >
                      Basic value
                    </div>
                  </div>

                  <div class="example-item" style="margin-bottom: 16px;">
                    <div
                      class="example-code"
                      style="background: var(--code-editor-background-color, #1e1e1e); padding: 12px; border-radius: 4px; font-family: 'Courier New', monospace; font-size: 12px; color: #d4d4d4; margin-bottom: 8px;"
                    >
                      {{ states('sensor.example') | int(default=0) }}%
                    </div>
                    <div
                      class="example-description"
                      style="font-size: 12px; color: var(--secondary-text-color);"
                    >
                      With percent
                    </div>
                  </div>
                </div>
              `:""}
        </div>

        <!-- Text Alignment moved to Design tab per spec -->
      </div>
    `}renderActionsTab(t,e,i,o){const n=t;return $t.render(n,e,i,o,(()=>this.injectUcFormStyles()))}renderTextActionConfig(t,e,i){return q`
      <div style="margin-bottom: 16px;">
        ${this.renderSingleActionConfig("Tap Action","Action to perform when text is tapped",t.tap_action||{action:"nothing"},e,(t=>i({tap_action:t})))}
      </div>

      <div style="margin-bottom: 16px;">
        ${this.renderSingleActionConfig("Hold Action","Action to perform when text is held down",t.hold_action||{action:"nothing"},e,(t=>i({hold_action:t})))}
      </div>

      <div style="margin-bottom: 16px;">
        ${this.renderSingleActionConfig("Double Tap Action","Action to perform when text is double-tapped",t.double_tap_action||{action:"nothing"},e,(t=>i({double_tap_action:t})))}
      </div>
    `}renderSingleActionConfig(t,e,i,o,n){return q`
      <div style="margin-bottom: 16px;">
        <div
          class="field-title"
          style="font-size: 16px !important; font-weight: 600 !important; margin-bottom: 12px;"
        >
          ${t}
        </div>
        <div style="margin-bottom: 12px;">
          <ha-form
            .hass=${o}
            .data=${{action_config:"nothing"===(null==i?void 0:i.action)?Object.assign(Object.assign({},i),{action:"default"}):i}}
            .schema=${[{name:"action_config",label:"",selector:{ui_action:{actions:["default","more-info","toggle","navigate","url","perform-action","assist"]}}}]}
            .computeLabel=${t=>t.label||""}
            .computeDescription=${t=>t.description||""}
            @value-changed=${t=>{var e;const i=null===(e=t.detail.value)||void 0===e?void 0:e.action_config;i&&n(i)}}
          ></ha-form>
        </div>
      </div>
    `}renderPreview(t,e){var i;const o=t;if(o.hide_if_no_link&&!this.hasActiveLink(o))return q`<div class="text-module-hidden">Hidden (no link)</div>`;const n=o,a=o.design||{},r=a.text_align&&"inherit"!==a.text_align?a.text_align:n.alignment&&"inherit"!==n.alignment?n.alignment:"center",s={fontSize:a.font_size?a.font_size:void 0!==n.font_size?`${n.font_size}px`:"26px",fontFamily:a.font_family||n.font_family||"inherit",color:a.color||n.color||"inherit",textAlign:r,fontWeight:a.font_weight?a.font_weight:void 0!==n.font_weight?n.font_weight:"700",fontStyle:a.font_style||n.font_style||"inherit",textTransform:a.text_transform?a.text_transform:void 0!==n.text_transform?n.text_transform:"uppercase",textDecoration:"none",lineHeight:a.line_height||n.line_height||"inherit",letterSpacing:a.letter_spacing||n.letter_spacing||"inherit",margin:"0",display:"flex",alignItems:"center",justifyContent:{left:"flex-start",center:"center",right:"flex-end"}[r]||"center",gap:"8px",width:"100%",textShadow:a.text_shadow_h&&a.text_shadow_v?`${a.text_shadow_h||"0"} ${a.text_shadow_v||"0"} ${a.text_shadow_blur||"0"} ${a.text_shadow_color||"rgba(0,0,0,0.5)"}`:n.text_shadow_h&&n.text_shadow_v?`${n.text_shadow_h||"0"} ${n.text_shadow_v||"0"} ${n.text_shadow_blur||"0"} ${n.text_shadow_color||"rgba(0,0,0,0.5)"}`:"none",boxShadow:a.box_shadow_h&&a.box_shadow_v?`${a.box_shadow_h||"0"} ${a.box_shadow_v||"0"} ${a.box_shadow_blur||"0"} ${a.box_shadow_spread||"0"} ${a.box_shadow_color||"rgba(0,0,0,0.1)"}`:n.box_shadow_h&&n.box_shadow_v?`${n.box_shadow_h||"0"} ${n.box_shadow_v||"0"} ${n.box_shadow_blur||"0"} ${n.box_shadow_spread||"0"} ${n.box_shadow_color||"rgba(0,0,0,0.1)"}`:"none"},l=o.icon?q`<ha-icon icon="${o.icon}"></ha-icon>`:"";let d=o.text||"Sample Text";if(o.template_mode&&o.template&&(!this._templateService&&e&&(this._templateService=new kt(e)),e)){e.__uvc_template_strings||(e.__uvc_template_strings={});const t=this._hashString(o.template),n=`state_text_text_${o.id}_${t}`;this._templateService&&!this._templateService.hasTemplateSubscription(n)&&this._templateService.subscribeToTemplate(o.template,n,(()=>{"undefined"!=typeof window&&window.dispatchEvent(new CustomEvent("ultra-card-template-update"))}));const a=null===(i=e.__uvc_template_strings)||void 0===i?void 0:i[n];void 0!==a&&""!==String(a).trim()&&(d=String(a))}const c=q`<span>${d}</span>`;let p;p="before"!==o.icon_position&&o.icon_position?"after"===o.icon_position?q`${c}${l}`:c:q`${l}${c}`;const u=this.hasActiveLink(o)?q`<div
          class="${$t.getClickableClass(o)}"
          style="${$t.getClickableStyle(o)}"
          @click=${t=>this.handleClick(t,o,e)}
          @dblclick=${t=>this.handleDoubleClick(t,o,e)}
          @mousedown=${t=>this.handleMouseDown(t,o,e)}
          @mouseup=${t=>this.handleMouseUp(t,o,e)}
          @mouseleave=${t=>this.handleMouseLeave(t,o,e)}
          @touchstart=${t=>this.handleTouchStart(t,o,e)}
          @touchend=${t=>this.handleTouchEnd(t,o,e)}
        >
          ${p}
        </div>`:p,m={padding:a.padding_top||a.padding_bottom||a.padding_left||a.padding_right||n.padding_top||n.padding_bottom||n.padding_left||n.padding_right?`${this.addPixelUnit(a.padding_top||n.padding_top)||"8px"} ${this.addPixelUnit(a.padding_right||n.padding_right)||"0px"} ${this.addPixelUnit(a.padding_bottom||n.padding_bottom)||"8px"} ${this.addPixelUnit(a.padding_left||n.padding_left)||"0px"}`:"8px 0",margin:a.margin_top||a.margin_bottom||a.margin_left||a.margin_right||n.margin_top||n.margin_bottom||n.margin_left||n.margin_right?`${this.addPixelUnit(a.margin_top||n.margin_top)||"0px"} ${this.addPixelUnit(a.margin_right||n.margin_right)||"0px"} ${this.addPixelUnit(a.margin_bottom||n.margin_bottom)||"0px"} ${this.addPixelUnit(a.margin_left||n.margin_left)||"0px"}`:"0",background:a.background_color||n.background_color||"inherit",backgroundImage:this.getBackgroundImageCSS(Object.assign(Object.assign({},n),a),e),backgroundSize:"cover",backgroundPosition:"center",backgroundRepeat:"no-repeat",border:(a.border_style||n.border_style)&&"none"!==(a.border_style||n.border_style)?`${a.border_width||n.border_width||"1px"} ${a.border_style||n.border_style} ${a.border_color||n.border_color||"var(--divider-color)"}`:"none",borderRadius:this.addPixelUnit(a.border_radius||n.border_radius)||"inherit",position:a.position||n.position||"static",top:a.top||n.top||"auto",bottom:a.bottom||n.bottom||"auto",left:a.left||n.left||"auto",right:a.right||n.right||"auto",zIndex:a.z_index||n.z_index||"auto",width:a.width||n.width||"auto",height:a.height||n.height||"auto",maxWidth:a.max_width||n.max_width||"none",maxHeight:a.max_height||n.max_height||"none",minWidth:a.min_width||n.min_width||"auto",minHeight:a.min_height||n.min_height||"auto",overflow:a.overflow||n.overflow||"visible",clipPath:a.clip_path||n.clip_path||"none",backdropFilter:a.backdrop_filter||n.backdrop_filter||"none",boxShadow:a.box_shadow_h&&a.box_shadow_v?`${a.box_shadow_h||"0"} ${a.box_shadow_v||"0"} ${a.box_shadow_blur||"0"} ${a.box_shadow_spread||"0"} ${a.box_shadow_color||"rgba(0,0,0,0.1)"}`:n.box_shadow_h&&n.box_shadow_v?`${n.box_shadow_h||"0"} ${n.box_shadow_v||"0"} ${n.box_shadow_blur||"0"} ${n.box_shadow_spread||"0"} ${n.box_shadow_color||"rgba(0,0,0,0.1)"}`:"none",boxSizing:"border-box"};return q`
      <div class="text-module-container" style=${this.styleObjectToCss(m)}>
        <div class="text-module-preview" style=${this.styleObjectToCss(s)}>${u}</div>
      </div>
    `}validate(t){const e=t,i=[...super.validate(t).errors];if(e.text&&""!==e.text.trim()||i.push("Text content is required"),e.icon&&""!==e.icon.trim()&&(e.icon.includes(":")||i.push('Icon must be in format "mdi:icon-name" or "hass:icon-name"')),e.link&&""!==e.link.trim())try{new URL(e.link)}catch(t){e.link.startsWith("/")||e.link.startsWith("#")||i.push('Link must be a valid URL or start with "/" for relative paths')}return e.tap_action&&"default"!==e.tap_action.action&&"nothing"!==e.tap_action.action&&i.push(...this.validateAction(e.tap_action)),e.hold_action&&"default"!==e.hold_action.action&&"nothing"!==e.hold_action.action&&i.push(...this.validateAction(e.hold_action)),e.double_tap_action&&"default"!==e.double_tap_action.action&&"nothing"!==e.double_tap_action.action&&i.push(...this.validateAction(e.double_tap_action)),!e.template_mode||e.template&&""!==e.template.trim()||i.push("Template code is required when template mode is enabled"),{valid:0===i.length,errors:i}}hasActiveLink(t){const e=t.link&&""!==t.link.trim(),i=t.tap_action&&"default"!==t.tap_action.action&&"nothing"!==t.tap_action.action,o=t.hold_action&&"default"!==t.hold_action.action&&"nothing"!==t.hold_action.action,n=t.double_tap_action&&"default"!==t.double_tap_action.action&&"nothing"!==t.double_tap_action.action;return e||i||o||n}validateAction(t){const e=[];switch(t.action){case"more-info":case"toggle":t.entity||e.push(`Entity is required for ${t.action} action`);break;case"navigate":t.navigation_path||e.push("Navigation path is required for navigate action");break;case"url":t.url_path||e.push("URL path is required for url action");break;case"perform-action":t.perform_action||t.service||e.push("Action is required for perform-action")}return e}handleClick(t,e,i){t.preventDefault(),this.clickTimeout&&clearTimeout(this.clickTimeout),this.clickTimeout=setTimeout((()=>{this.handleTapAction(t,e,i)}),300)}handleDoubleClick(t,e,i){t.preventDefault(),this.clickTimeout&&(clearTimeout(this.clickTimeout),this.clickTimeout=null),this.handleDoubleAction(t,e,i)}handleMouseDown(t,e,i){this.startHold(t,e,i)}handleMouseUp(t,e,i){this.endHold(t,e,i)}handleMouseLeave(t,e,i){this.endHold(t,e,i)}handleTouchStart(t,e,i){this.startHold(t,e,i)}handleTouchEnd(t,e,i){this.endHold(t,e,i)}startHold(t,e,i){this.isHolding=!1,this.holdTimeout=setTimeout((()=>{this.isHolding=!0,this.handleHoldAction(t,e,i)}),500)}endHold(t,e,i){this.holdTimeout&&(clearTimeout(this.holdTimeout),this.holdTimeout=null),this.isHolding=!1}handleTapAction(t,e,i){this.isHolding||(e.link&&""!==e.link.trim()?e.link.startsWith("http")||e.link.startsWith("https")?window.open(e.link,"_blank"):window.location.href=e.link:e.tap_action&&"default"!==e.tap_action.action&&"nothing"!==e.tap_action.action&&wt.handleAction(e.tap_action,i,t.target))}handleDoubleAction(t,e,i){e.double_tap_action&&"default"!==e.double_tap_action.action&&"nothing"!==e.double_tap_action.action&&wt.handleAction(e.double_tap_action,i,t.target)}handleHoldAction(t,e,i){e.hold_action&&"default"!==e.hold_action.action&&"nothing"!==e.hold_action.action&&wt.handleAction(e.hold_action,i,t.target)}getStyles(){return`\n      .text-module-preview {\n        min-height: 20px;\n        word-wrap: break-word;\n      }\n      \n      .text-module-hidden {\n        color: var(--secondary-text-color);\n        font-style: italic;\n        text-align: center;\n        padding: 12px;\n        background: var(--secondary-background-color);\n        border-radius: 4px;\n      }\n      \n      /* Field styling */\n      .field-title {\n        font-size: 16px !important;\n        font-weight: 600 !important;\n \n        margin-bottom: 4px !important;\n        display: block !important;\n      }\n\n      .field-description {\n        font-size: 13px !important;\n        color: var(--secondary-text-color) !important;\n        margin-bottom: 12px !important;\n        display: block !important;\n        opacity: 0.8 !important;\n        line-height: 1.4 !important;\n      }\n\n      .section-title {\n        font-size: 18px !important;\n        font-weight: 700 !important;\n        color: var(--primary-color) !important;\n        text-transform: uppercase !important;\n        letter-spacing: 0.5px !important;\n      }\n\n      .settings-section {\n        margin-bottom: 16px;\n        max-width: 100%;\n        box-sizing: border-box;\n      }\n\n      /* Conditional Fields Grouping CSS */\n      .conditional-fields-group {\n        margin-top: 16px;\n        border-left: 4px solid var(--primary-color);\n        background: rgba(var(--rgb-primary-color), 0.08);\n        border-radius: 0 8px 8px 0;\n        overflow: hidden;\n        transition: all 0.2s ease;\n        animation: slideInFromLeft 0.3s ease-out;\n      }\n\n      .conditional-fields-group:hover {\n        background: rgba(var(--rgb-primary-color), 0.12);\n      }\n\n      .conditional-fields-header {\n        background: rgba(var(--rgb-primary-color), 0.15);\n        padding: 12px 16px;\n        font-size: 14px;\n        font-weight: 600;\n        color: var(--primary-color);\n        border-bottom: 1px solid rgba(var(--rgb-primary-color), 0.2);\n        text-transform: uppercase;\n        letter-spacing: 0.5px;\n      }\n\n      .conditional-fields-content {\n        padding: 16px;\n      }\n\n      .conditional-fields-content > .field-title:first-child {\n        margin-top: 0 !important;\n      }\n\n      @keyframes slideInFromLeft {\n        from { \n          opacity: 0; \n          transform: translateX(-10px); \n        }\n        to { \n          opacity: 1; \n          transform: translateX(0); \n        }\n      }\n\n      /* Icon picker specific styling */\n      ha-icon-picker {\n        --ha-icon-picker-width: 100%;\n        --ha-icon-picker-height: 56px;\n      }\n\n      /* Text field and select consistency */\n      ha-textfield,\n      ha-select {\n        --mdc-shape-small: 8px;\n        --mdc-theme-primary: var(--primary-color);\n      }\n\n      code {\n        background: var(--secondary-background-color);\n        padding: 2px 6px;\n        border-radius: 4px;\n        font-family: 'Courier New', monospace;\n        font-size: 0.9em;\n        color: var(--primary-color);\n      }\n\n      /* Clickable text hover styles */\n      ${$t.getHoverStyles()}\n    `}getBackgroundImageCSS(t,e){const i=t.background_image_type,o=t.background_image,n=t.background_image_entity;switch(i){case"upload":if(o)return o.startsWith("/api/image/serve/")?`url("${this.getImageUrl(e,o)}")`:(o.startsWith("data:image/"),`url("${o}")`);break;case"entity":if(n&&e){const t=e.states[n];if(t){const e=t.attributes.entity_picture||t.attributes.image||t.state;if(e&&"unknown"!==e&&"unavailable"!==e)return`url("${e}")`}}break;case"url":if(o)return`url("${o}")`;break;default:return"none"}return"none"}getImageUrl(t,e){if(!e)return"";if(e.startsWith("http"))return e;if(e.startsWith("data:image/"))return e;if(e.includes("/api/image/serve/")){const i=e.match(/\/api\/image\/serve\/([^\/]+)/);if(i&&i[1]){const o=i[1];try{return`${(t.hassUrl?t.hassUrl():"").replace(/\/$/,"")}/api/image/serve/${o}/original`}catch(t){return e}}return e}return e.startsWith("/")?`${(t.hassUrl?t.hassUrl():"").replace(/\/$/,"")}${e}`:e}styleObjectToCss(t){return Object.entries(t).map((([t,e])=>`${this.camelToKebab(t)}: ${e}`)).join("; ")}camelToKebab(t){return t.replace(/([a-z0-9]|(?=[A-Z]))([A-Z])/g,"$1-$2").toLowerCase()}addPixelUnit(t){return t?/^\d+$/.test(t)?`${t}px`:/^[\d\s]+$/.test(t)?t.split(" ").map((t=>t.trim()?`${t}px`:t)).join(" "):t:t}_hashString(t){let e=0;for(let i=0;i<t.length;i+=1)e=(e<<5)-e+t.charCodeAt(i),e|=0;return Math.abs(e)}}class Ct{static renderCleanForm(t,e,i,o){const n=`clean-form-${Math.random().toString(36).substr(2,9)}`;return setTimeout((()=>{const t=document.getElementById(n);t&&(Ct.setupFormObserver(t,n),Ct.aggressiveCleanup(t))}),0),setTimeout((()=>{const t=document.getElementById(n);t&&Ct.aggressiveCleanup(t)}),100),q`
      <div class="ultra-clean-form" id="${n}">
        <ha-form
          .hass=${t}
          .data=${e}
          .schema=${i}
          .computeLabel=${()=>""}
          .computeDescription=${()=>""}
          @value-changed=${t=>{o(t),setTimeout((()=>{const t=document.getElementById(n);t&&Ct.aggressiveCleanup(t)}),0)}}
        ></ha-form>
      </div>
    `}static setupFormObserver(t,e){var i;Ct.activeObservers.has(e)&&(null===(i=Ct.activeObservers.get(e))||void 0===i||i.disconnect());const o=new MutationObserver((i=>{let o=!1;i.forEach((t=>{"childList"===t.type&&t.addedNodes.forEach((t=>{t.nodeType===Node.ELEMENT_NODE&&(o=!0)}))})),o&&!Ct.cleanupQueue.has(e)&&(Ct.cleanupQueue.add(e),setTimeout((()=>{Ct.aggressiveCleanup(t),Ct.cleanupQueue.delete(e)}),10))}));o.observe(t,{childList:!0,subtree:!0,characterData:!0}),Ct.activeObservers.set(e,o),setTimeout((()=>{document.contains(t)||(o.disconnect(),Ct.activeObservers.delete(e))}),3e4)}static aggressiveCleanup(t){var e;if(!t)return;const i=["action","entity","template_mode","icon","name","value","text","url","path","attribute","state","condition","enabled","disabled","template","mode","type","size","color","style","width","height","radius","opacity","service","data","latitude","longitude","navigation_path","show_icon","label","button"],o=t.querySelector("ha-form");if(!o)return;const n=document.createTreeWalker(o,NodeFilter.SHOW_TEXT,null),a=[];let r;for(;r=n.nextNode();){const t=null===(e=r.textContent)||void 0===e?void 0:e.trim().toLowerCase();t&&i.includes(t)&&a.push(r)}a.forEach((t=>{var e;const i=t.parentElement;if(i){const o=i.querySelector("input, select, ha-entity-picker, ha-selector, mwc-select, mwc-textfield");t.textContent&&t.textContent.trim().length<30&&(o||(null===(e=i.parentElement)||void 0===e?void 0:e.querySelector("input, select, ha-entity-picker, ha-selector")))&&t.remove()}})),o.querySelectorAll("*").forEach((t=>{var e,o;const n=null===(e=t.textContent)||void 0===e?void 0:e.trim().toLowerCase();n&&i.includes(n)&&0===t.children.length&&(null===(o=t.parentElement)||void 0===o?void 0:o.querySelector("input, select, ha-entity-picker, ha-selector"))&&(t.style.cssText="display: none !important; visibility: hidden !important; opacity: 0 !important; height: 0 !important; width: 0 !important; margin: 0 !important; padding: 0 !important;")})),['div[role="group"] > div:first-child:not([class])','div[role="group"] > span:first-child:not([class])',".mdc-form-field__label",".mdc-text-field__label",".mdc-select__label","label:not([for])","div:not([class]):not([id])","span:not([class]):not([id])"].forEach((t=>{try{o.querySelectorAll(t).forEach((t=>{var e;const o=null===(e=t.textContent)||void 0===e?void 0:e.trim().toLowerCase();o&&i.includes(o)&&(t.style.cssText="display: none !important;")}))}catch(t){}})),o.querySelectorAll('[class*="mdc-"]').forEach((t=>{var e;const o=null===(e=t.textContent)||void 0===e?void 0:e.trim().toLowerCase();o&&i.includes(o)&&0===t.children.length&&(t.classList.contains("mdc-floating-label")||t.classList.contains("mdc-form-field__label")||t.classList.contains("mdc-text-field__label"))&&(t.style.cssText="display: none !important;")})),setTimeout((()=>{var t;const e=document.createTreeWalker(o,NodeFilter.SHOW_TEXT,null),n=[];let a;for(;a=e.nextNode();){const e=null===(t=a.textContent)||void 0===t?void 0:t.trim().toLowerCase();e&&i.includes(e)&&n.push(a)}n.forEach((t=>{t.parentNode&&(t.textContent="")}))}),50)}static getCleanFormStyles(){return"\n      /* Ultra-aggressive label hiding */\n      .ultra-clean-form ha-form label,\n      .ultra-clean-form ha-form .label,\n      .ultra-clean-form ha-form .mdc-floating-label,\n      .ultra-clean-form ha-form .mdc-text-field__label,\n      .ultra-clean-form ha-form .mdc-select__label,\n      .ultra-clean-form ha-form .mdc-form-field__label,\n      .ultra-clean-form ha-form .ha-form-label,\n      .ultra-clean-form ha-form .mdc-notched-outline__leading,\n      .ultra-clean-form ha-form .mdc-notched-outline__notch,\n      .ultra-clean-form ha-form .mdc-notched-outline__trailing,\n      .ultra-clean-form ha-form .mdc-line-ripple {\n        display: none !important;\n        visibility: hidden !important;\n        opacity: 0 !important;\n        height: 0 !important;\n        width: 0 !important;\n        margin: 0 !important;\n        padding: 0 !important;\n        font-size: 0 !important;\n        line-height: 0 !important;\n      }\n\n      /* Override any existing label styles completely */\n      .ultra-clean-form label,\n      .ultra-clean-form .ultra-clean-form label *,\n      .ultra-clean-form ha-form label,\n      .ultra-clean-form ha-form label * {\n        display: none !important;\n        visibility: hidden !important;\n        opacity: 0 !important;\n        height: 0 !important;\n        width: 0 !important;\n        margin: 0 !important;\n        padding: 0 !important;\n        border: none !important;\n        outline: none !important;\n        background: none !important;\n        font-size: 0 !important;\n        line-height: 0 !important;\n        position: absolute !important;\n        left: -9999px !important;\n        top: -9999px !important;\n        z-index: -1 !important;\n        pointer-events: none !important;\n      }\n\n      /* Hide any text that could be a redundant label */\n      .ultra-clean-form ha-form div:not([class]):not([id]),\n      .ultra-clean-form ha-form span:not([class]):not([id]),\n      .ultra-clean-form ha-form p:not([class]):not([id]) {\n        font-size: 0 !important;\n        line-height: 0 !important;\n        color: transparent !important;\n        height: 0 !important;\n        overflow: hidden !important;\n      }\n\n      /* Make sure form inputs still work */\n      .ultra-clean-form ha-form input,\n      .ultra-clean-form ha-form select,\n      .ultra-clean-form ha-form textarea,\n      .ultra-clean-form ha-form ha-entity-picker,\n      .ultra-clean-form ha-form ha-icon-picker,\n      .ultra-clean-form ha-form ha-selector,\n      .ultra-clean-form ha-form .mdc-text-field,\n      .ultra-clean-form ha-form .mdc-select,\n      .ultra-clean-form ha-form .mdc-switch {\n        font-size: 14px !important;\n        line-height: normal !important;\n        color: var(--primary-text-color) !important;\n        height: auto !important;\n        width: auto !important;\n        margin-top: 0 !important;\n        border-radius: 8px !important;\n      }\n\n      /* Ensure dropdowns work */\n      .ultra-clean-form ha-form .mdc-select__selected-text,\n      .ultra-clean-form ha-form .mdc-select__dropdown-icon {\n        font-size: 14px !important;\n        color: var(--primary-text-color) !important;\n        opacity: 1 !important;\n        height: auto !important;\n        width: auto !important;\n      }\n\n      /* Style field titles and descriptions consistently */\n      .field-title {\n        font-size: 16px !important;\n        font-weight: 600 !important;\n       \n        margin-bottom: 4px !important;\n        display: block !important;\n      }\n\n      .field-description {\n        font-size: 13px !important;\n        color: var(--secondary-text-color) !important;\n        margin-bottom: 12px !important;\n        display: block !important;\n        opacity: 0.8 !important;\n        line-height: 1.4 !important;\n      }\n\n      .section-title {\n        font-size: 18px !important;\n        font-weight: 700 !important;\n        color: var(--primary-color) !important;\n        text-transform: uppercase !important;\n        letter-spacing: 0.5px !important;\n      }\n    "}static cleanupRedundantLabels(t){Ct.aggressiveCleanup(t)}static renderField(t,e,i,o,n,a){return q`
      <div class="form-field-container">
        <div class="field-title" style="font-size: 16px; font-weight: 600; margin-bottom: 4px;">
          ${t}
        </div>
        <div
          class="field-description"
          style="font-size: 13px; font-weight: 400; margin-bottom: 12px; color: var(--secondary-text-color);"
        >
          ${e}
        </div>
        ${Ct.renderCleanForm(i,o,n,a)}
      </div>
    `}static createSchemaItem(t,e){return{name:t,selector:e}}static renderSection(t,e,i){return q`
      <div
        class="settings-section"
        style="background: var(--secondary-background-color); border-radius: 8px; padding: 16px; margin-bottom: 32px;"
      >
        <div
          class="section-title"
          style="font-size: 18px; font-weight: 700; text-transform: uppercase; color: var(--primary-color); margin-bottom: 16px; padding-bottom: 0; border-bottom: none; letter-spacing: 0.5px;"
        >
          ${t}
        </div>
        ${e?q`
              <div
                class="field-description"
                style="font-size: 13px; font-weight: 400; margin-bottom: 16px; color: var(--secondary-text-color);"
              >
                ${e}
              </div>
            `:""}
        ${i.map((t=>q`
            <div style="margin-bottom: 16px;">
              ${Ct.renderField(t.title,t.description,t.hass,t.data,t.schema,t.onChange)}
            </div>
          `))}
      </div>
    `}static injectCleanFormStyles(){return q`
      <style>
        ${Ct.getCleanFormStyles()}
      </style>
    `}}Ct.activeObservers=new Map,Ct.cleanupQueue=new Set;class zt extends xt{constructor(){super(...arguments),this.metadata={type:"separator",title:"Separator Module",description:"Visual dividers and spacing",author:"WJD Designs",version:"1.0.0",icon:"mdi:minus",category:"content",tags:["separator","divider","spacing","layout"]}}createDefault(t,e){return{id:t||this.generateId("separator"),type:"separator",separator_style:"line",thickness:1,width_percent:100,color:"var(--divider-color)",show_title:!1,title:"",title_size:14,title_color:"var(--secondary-text-color)",title_bold:!1,title_italic:!1,title_uppercase:!1,title_strikethrough:!1,title_underline:!1,tap_action:{action:"nothing"},hold_action:{action:"nothing"},double_tap_action:{action:"nothing"},enable_hover_effect:!0,hover_background_color:"var(--divider-color)"}}renderGeneralTab(t,e,i,o){const n=t;return q`
      ${this.injectUcFormStyles()}
      <div class="module-general-settings">
        <!-- Separator Configuration -->
        <div
          class="settings-section"
          style="background: var(--secondary-background-color); border-radius: 8px; padding: 16px; margin-bottom: 32px;"
        >
          <div
            class="section-title"
            style="font-size: 18px; font-weight: 700; text-transform: uppercase; color: var(--primary-color); margin-bottom: 16px; padding-bottom: 0; border-bottom: none; letter-spacing: 0.5px;"
          >
            Separator Configuration
          </div>

          <!-- Separator Style -->
          <div class="field-title" style="font-size: 16px; font-weight: 600; margin-bottom: 4px;">
            Separator Style
          </div>
          <div
            class="field-description"
            style="font-size: 13px; font-weight: 400; margin-bottom: 12px;"
          >
            Choose the visual style of the separator line.
          </div>
          <ha-form
            .hass=${e}
            .data=${{separator_style:n.separator_style||"line"}}
            .schema=${[{name:"separator_style",selector:{select:{options:[{value:"line",label:"Solid Line"},{value:"double_line",label:"Double Line"},{value:"dotted",label:"Dotted Line"},{value:"double_dotted",label:"Double Dotted"},{value:"shadow",label:"Shadow"},{value:"blank",label:"Blank Space"}],mode:"dropdown"}},label:""}]}
            @value-changed=${t=>{const e=t.detail.value.separator_style,i={separator_style:e};"blank"===e&&(i.show_title=!1),o(i)}}
          ></ha-form>
        </div>

        <!-- Appearance Configuration -->
        ${"blank"!==n.separator_style?q`
              <div
                class="settings-section"
                style="background: var(--secondary-background-color); border-radius: 8px; padding: 16px; margin-bottom: 32px;"
              >
                <div
                  class="section-title"
                  style="font-size: 18px; font-weight: 700; text-transform: uppercase; color: var(--primary-color); margin-bottom: 16px; padding-bottom: 0; border-bottom: none; letter-spacing: 0.5px;"
                >
                  Appearance
                </div>

                <!-- Thickness -->
                <div class="field-container" style="margin-bottom: 24px;">
                  <div class="field-title">Thickness (px)</div>
                  <div class="field-description">Thickness of the separator line.</div>
                  <div
                    class="gap-control-container"
                    style="display: flex; align-items: center; gap: 12px;"
                  >
                    <input
                      type="range"
                      class="gap-slider"
                      min="1"
                      max="20"
                      step="1"
                      .value="${n.thickness||1}"
                      @input=${t=>{const e=t.target,i=parseFloat(e.value);o({thickness:i})}}
                    />
                    <input
                      type="number"
                      class="gap-input"
                      min="1"
                      max="20"
                      step="1"
                      .value="${n.thickness||1}"
                      @input=${t=>{const e=t.target,i=parseFloat(e.value);isNaN(i)||o({thickness:i})}}
                      @keydown=${t=>{if("ArrowUp"===t.key||"ArrowDown"===t.key){t.preventDefault();const e=t.target,i=parseFloat(e.value)||1,n="ArrowUp"===t.key?1:-1,a=Math.max(1,Math.min(20,i+n));o({thickness:a})}}}
                    />
                    <button
                      class="reset-btn"
                      @click=${()=>o({thickness:1})}
                      title="Reset to default (1)"
                    >
                      <ha-icon icon="mdi:refresh"></ha-icon>
                    </button>
                  </div>
                </div>

                <!-- Width -->
                ${"shadow"===n.separator_style||"blank"===n.separator_style?q``:q`
                      <div class="field-container" style="margin-bottom: 24px;">
                        <div class="field-title">Width (%)</div>
                        <div class="field-description">
                          Width of the separator as percentage of container.
                        </div>
                        <div
                          class="gap-control-container"
                          style="display: flex; align-items: center; gap: 12px;"
                        >
                          <input
                            type="range"
                            class="gap-slider"
                            min="10"
                            max="100"
                            step="5"
                            .value="${n.width_percent||100}"
                            @input=${t=>{const e=t.target,i=parseFloat(e.value);o({width_percent:i})}}
                          />
                          <input
                            type="number"
                            class="gap-input"
                            min="10"
                            max="100"
                            step="5"
                            .value="${n.width_percent||100}"
                            @input=${t=>{const e=t.target,i=parseFloat(e.value);isNaN(i)||o({width_percent:i})}}
                            @keydown=${t=>{if("ArrowUp"===t.key||"ArrowDown"===t.key){t.preventDefault();const e=t.target,i=parseFloat(e.value)||100,n="ArrowUp"===t.key?5:-5,a=Math.max(10,Math.min(100,i+n));o({width_percent:a})}}}
                          />
                          <button
                            class="reset-btn"
                            @click=${()=>o({width_percent:100})}
                            title="Reset to default (100)"
                          >
                            <ha-icon icon="mdi:refresh"></ha-icon>
                          </button>
                        </div>
                      </div>
                    `}

                <!-- Color -->
                <div class="field-group">
                  <div
                    class="field-title"
                    style="font-size: 16px; font-weight: 600; margin-bottom: 4px;"
                  >
                    Color
                  </div>
                  <div
                    class="field-description"
                    style="font-size: 13px; font-weight: 400; margin-bottom: 12px;"
                  >
                    Color of the separator line.
                  </div>
                  <ultra-color-picker
                    .label=${""}
                    .value=${n.color||""}
                    .defaultValue=${"var(--divider-color)"}
                    .hass=${e}
                    @value-changed=${t=>{const e=t.detail.value;o({color:e})}}
                  ></ultra-color-picker>
                </div>
              </div>
            `:""}
        ${"blank"!==n.separator_style?q` <!-- Text in Separator -->
              <div
                class="settings-section"
                style="background: var(--secondary-background-color); border-radius: 8px; padding: 16px; margin-bottom: 32px;"
              >
                <div style="margin-bottom: 16px;">
                  ${Ct.renderField("Show Title","Add text in the middle of the separator line (e.g., ------ Text ------)",e,{show_title:n.show_title||!1},[Ct.createSchemaItem("show_title",{boolean:{}})],(t=>o({show_title:t.detail.value.show_title})))}
                </div>

                ${n.show_title?q`
                      <!-- Text Content -->
                      <div class="field-group" style="margin-bottom: 16px;">
                        <div
                          class="field-title"
                          style="font-size: 16px; font-weight: 600; margin-bottom: 4px;"
                        >
                          Text Content
                        </div>
                        <div
                          class="field-description"
                          style="font-size: 13px; font-weight: 400; margin-bottom: 12px;"
                        >
                          Text to display in the middle of the separator.
                        </div>
                        <ha-form
                          .hass=${e}
                          .data=${{title:n.title||""}}
                          .schema=${[{name:"title",selector:{text:{}},label:""}]}
                          @value-changed=${t=>o({title:t.detail.value.title})}
                        ></ha-form>
                      </div>

                      <!-- Font Size -->
                      <div class="field-container" style="margin-bottom: 24px;">
                        <div class="field-title">Font Size</div>
                        <div class="field-description">Size of the text in pixels.</div>
                        <div
                          class="gap-control-container"
                          style="display: flex; align-items: center; gap: 12px;"
                        >
                          <input
                            type="range"
                            class="gap-slider"
                            min="8"
                            max="48"
                            step="1"
                            .value="${n.title_size||14}"
                            @input=${t=>{const e=t.target,i=parseFloat(e.value);o({title_size:i})}}
                          />
                          <input
                            type="number"
                            class="gap-input"
                            min="8"
                            max="48"
                            step="1"
                            .value="${n.title_size||14}"
                            @input=${t=>{const e=t.target,i=parseFloat(e.value);isNaN(i)||o({title_size:i})}}
                            @keydown=${t=>{if("ArrowUp"===t.key||"ArrowDown"===t.key){t.preventDefault();const e=t.target,i=parseFloat(e.value)||14,n="ArrowUp"===t.key?1:-1,a=Math.max(8,Math.min(48,i+n));o({title_size:a})}}}
                          />
                          <button
                            class="reset-btn"
                            @click=${()=>o({title_size:14})}
                            title="Reset to default (14)"
                          >
                            <ha-icon icon="mdi:refresh"></ha-icon>
                          </button>
                        </div>
                      </div>

                      <!-- Text Color -->
                      <div class="field-group" style="margin-bottom: 16px;">
                        <div
                          class="field-title"
                          style="font-size: 16px; font-weight: 600; margin-bottom: 4px;"
                        >
                          Text Color
                        </div>
                        <div
                          class="field-description"
                          style="font-size: 13px; font-weight: 400; margin-bottom: 12px;"
                        >
                          Color of the separator text.
                        </div>
                        <ultra-color-picker
                          .label=${""}
                          .value=${n.title_color||""}
                          .defaultValue=${"var(--secondary-text-color)"}
                          .hass=${e}
                          @value-changed=${t=>{const e=t.detail.value;o({title_color:e})}}
                        ></ultra-color-picker>
                      </div>

                      <!-- Text Formatting -->
                      <div class="field-group">
                        <div
                          class="field-title"
                          style="font-size: 16px; font-weight: 600; margin-bottom: 4px;"
                        >
                          Text Formatting
                        </div>
                        <div
                          class="field-description"
                          style="font-size: 13px; font-weight: 400; margin-bottom: 12px;"
                        >
                          Apply formatting styles to the separator text.
                        </div>
                        <div
                          class="format-buttons"
                          style="display: flex; gap: 8px; flex-wrap: wrap;"
                        >
                          <button
                            class="format-btn ${n.title_bold?"active":""}"
                            @click=${()=>o({title_bold:!n.title_bold})}
                            style="padding: 8px; border: 1px solid var(--divider-color); border-radius: 4px; background: ${n.title_bold?"var(--primary-color)":"var(--secondary-background-color)"}; cursor: pointer; transition: all 0.2s ease; color: ${n.title_bold?"white":"var(--primary-text-color)"};"
                            title="Bold"
                          >
                            <ha-icon icon="mdi:format-bold"></ha-icon>
                          </button>
                          <button
                            class="format-btn ${n.title_italic?"active":""}"
                            @click=${()=>o({title_italic:!n.title_italic})}
                            style="padding: 8px; border: 1px solid var(--divider-color); border-radius: 4px; background: ${n.title_italic?"var(--primary-color)":"var(--secondary-background-color)"}; cursor: pointer; transition: all 0.2s ease; color: ${n.title_italic?"white":"var(--primary-text-color)"};"
                            title="Italic"
                          >
                            <ha-icon icon="mdi:format-italic"></ha-icon>
                          </button>
                          <button
                            class="format-btn ${n.title_underline?"active":""}"
                            @click=${()=>o({title_underline:!n.title_underline})}
                            style="padding: 8px; border: 1px solid var(--divider-color); border-radius: 4px; background: ${n.title_underline?"var(--primary-color)":"var(--secondary-background-color)"}; cursor: pointer; transition: all 0.2s ease; color: ${n.title_underline?"white":"var(--primary-text-color)"};"
                            title="Underline"
                          >
                            <ha-icon icon="mdi:format-underline"></ha-icon>
                          </button>
                          <button
                            class="format-btn ${n.title_uppercase?"active":""}"
                            @click=${()=>o({title_uppercase:!n.title_uppercase})}
                            style="padding: 8px; border: 1px solid var(--divider-color); border-radius: 4px; background: ${n.title_uppercase?"var(--primary-color)":"var(--secondary-background-color)"}; cursor: pointer; transition: all 0.2s ease; color: ${n.title_uppercase?"white":"var(--primary-text-color)"};"
                            title="Uppercase"
                          >
                            <ha-icon icon="mdi:format-letter-case-upper"></ha-icon>
                          </button>
                          <button
                            class="format-btn ${n.title_strikethrough?"active":""}"
                            @click=${()=>o({title_strikethrough:!n.title_strikethrough})}
                            style="padding: 8px; border: 1px solid var(--divider-color); border-radius: 4px; background: ${n.title_strikethrough?"var(--primary-color)":"var(--secondary-background-color)"}; cursor: pointer; transition: all 0.2s ease; color: ${n.title_strikethrough?"white":"var(--primary-text-color)"};"
                            title="Strikethrough"
                          >
                            <ha-icon icon="mdi:format-strikethrough"></ha-icon>
                          </button>
                        </div>
                      </div>
                    `:""}
              </div>`:q`
              <!-- Spacer (Blank) Thickness Control -->
              <div
                class="settings-section"
                style="background: var(--secondary-background-color); border-radius: 8px; padding: 16px; margin-bottom: 32px;"
              >
                <div
                  class="section-title"
                  style="font-size: 18px; font-weight: 700; text-transform: uppercase; color: var(--primary-color); margin-bottom: 16px; padding-bottom: 0; border-bottom: none; letter-spacing: 0.5px;"
                >
                  Spacer Height
                </div>
                <div class="field-container" style="margin-bottom: 24px;">
                  <div class="field-title">Height (px)</div>
                  <div class="field-description">Controls the visual gap for Blank Space.</div>
                  <div
                    class="gap-control-container"
                    style="display: flex; align-items: center; gap: 12px;"
                  >
                    <input
                      type="range"
                      class="gap-slider"
                      min="1"
                      max="300"
                      step="1"
                      .value="${n.thickness||1}"
                      @input=${t=>{const e=t.target,i=parseInt(e.value);o({thickness:i})}}
                    />
                    <input
                      type="number"
                      class="gap-input"
                      min="1"
                      max="300"
                      step="1"
                      .value="${n.thickness||1}"
                      @input=${t=>{const e=t.target,i=parseInt(e.value);isNaN(i)||o({thickness:i})}}
                    />
                    <button
                      class="reset-btn"
                      @click=${()=>o({thickness:1})}
                      title="Reset to default (1)"
                    >
                      <ha-icon icon="mdi:refresh"></ha-icon>
                    </button>
                  </div>
                </div>
              </div>
            `}
      </div>
    `}renderActionsTab(t,e,i,o){return $t.render(t,e,i,o,(()=>this.injectUcFormStyles()))}renderPreview(t,e){const i=t,o=i,n=i.design||{},a={padding:n.padding_top||n.padding_bottom||n.padding_left||n.padding_right||o.padding_top||o.padding_bottom||o.padding_left||o.padding_right?`${this.addPixelUnit(n.padding_top||o.padding_top)||"8px"} ${this.addPixelUnit(n.padding_right||o.padding_right)||"0px"} ${this.addPixelUnit(n.padding_bottom||o.padding_bottom)||"8px"} ${this.addPixelUnit(n.padding_left||o.padding_left)||"0px"}`:"8px 0",margin:n.margin_top||n.margin_bottom||n.margin_left||n.margin_right||o.margin_top||o.margin_bottom||o.margin_left||o.margin_right?`${this.addPixelUnit(n.margin_top||o.margin_top)||"0px"} ${this.addPixelUnit(n.margin_right||o.margin_right)||"0px"} ${this.addPixelUnit(n.margin_bottom||o.margin_bottom)||"0px"} ${this.addPixelUnit(n.margin_left||o.margin_left)||"0px"}`:"0",background:n.background_color||o.background_color||"transparent",backgroundImage:this.getBackgroundImageCSS(Object.assign(Object.assign({},o),n),e),backgroundSize:"cover",backgroundPosition:"center",backgroundRepeat:"no-repeat",border:(n.border_style||o.border_style)&&"none"!==(n.border_style||o.border_style)?`${this.addPixelUnit(n.border_width||o.border_width)||"1px"} ${n.border_style||o.border_style} ${n.border_color||o.border_color||"var(--divider-color)"}`:"none",borderRadius:this.addPixelUnit(n.border_radius||o.border_radius)||"0",position:n.position||o.position||"relative",top:n.top||o.top||"auto",bottom:n.bottom||o.bottom||"auto",left:n.left||o.left||"auto",right:n.right||o.right||"auto",zIndex:n.z_index||o.z_index||"auto",width:n.width||o.width||"100%",height:n.height||o.height||"auto",maxWidth:n.max_width||o.max_width||"100%",maxHeight:n.max_height||o.max_height||"none",minWidth:n.min_width||o.min_width||"none",minHeight:n.min_height||o.min_height||"auto",overflow:n.overflow||o.overflow||"visible",clipPath:n.clip_path||o.clip_path||"none",backdropFilter:n.backdrop_filter||o.backdrop_filter||"none",boxShadow:n.box_shadow_h&&n.box_shadow_v?`${n.box_shadow_h||"0"} ${n.box_shadow_v||"0"} ${n.box_shadow_blur||"0"} ${n.box_shadow_spread||"0"} ${n.box_shadow_color||"rgba(0,0,0,0.1)"}`:o.box_shadow_h&&o.box_shadow_v?`${o.box_shadow_h||"0"} ${o.box_shadow_v||"0"} ${o.box_shadow_blur||"0"} ${o.box_shadow_spread||"0"} ${o.box_shadow_color||"rgba(0,0,0,0.1)"}`:"none",boxSizing:"border-box"};if("blank"===i.separator_style)return q`
        <div class="separator-module-container" style=${this.styleObjectToCss(a)}>
          <div
            class="separator-preview blank-separator"
            style="height: ${i.thickness||1}px;"
          ></div>
        </div>
      `;const r=this.getSeparatorStyles(i);let s=null,l=null,d=!1,c=0,p=0;return q`
      <div
        class="separator-module-container"
        style="${this.styleObjectToCss(a)}; cursor: ${i.tap_action&&"nothing"!==i.tap_action.action||i.hold_action&&"nothing"!==i.hold_action.action||i.double_tap_action&&"nothing"!==i.double_tap_action.action?"pointer":"default"};"
        @pointerdown=${t=>{t.preventDefault(),t.stopPropagation(),d=!1,l=setTimeout((()=>{d=!0,i.hold_action&&"nothing"!==i.hold_action.action&&wt.handleAction(i.hold_action,e,t.target)}),500)}}
        @pointerup=${t=>{if(t.preventDefault(),t.stopPropagation(),l&&(clearTimeout(l),l=null),d)return void(d=!1);const o=Date.now();o-p<300&&1===c?(s&&(clearTimeout(s),s=null),c=0,i.double_tap_action&&"nothing"!==i.double_tap_action.action&&wt.handleAction(i.double_tap_action,e,t.target)):(c=1,p=o,s=setTimeout((()=>{c=0,i.tap_action&&"nothing"!==i.tap_action.action&&wt.handleAction(i.tap_action,e,t.target)}),300))}}
      >
        <div class="separator-preview" style="width: 100%; text-align: center;">
          ${i.show_title&&i.title?q`
                <div
                  class="separator-with-title"
                  style="position: relative; display: flex; align-items: center; justify-content: center; width: 100%;"
                >
                  <div
                    class="separator-line-left"
                    style=${this.getSeparatorLineStyles(i,"left")}
                  ></div>
                  <div
                    class="separator-title"
                    style=${this.getTitleStyles(i,i.design||{})}
                  >
                    ${i.title}
                  </div>
                  <div
                    class="separator-line-right"
                    style=${this.getSeparatorLineStyles(i,"right")}
                  ></div>
                </div>
              `:q` <div class="separator-line" style=${r}></div> `}
        </div>
      </div>
    `}validate(t){const e=t,i=[...super.validate(t).errors];return"blank"!==e.separator_style?e.thickness&&(e.thickness<1||e.thickness>50)&&i.push("Thickness must be between 1 and 50 pixels"):e.thickness&&(e.thickness<1||e.thickness>300)&&i.push("Spacer height must be between 1 and 300 pixels"),e.width_percent&&(e.width_percent<1||e.width_percent>100)&&i.push("Width must be between 1 and 100 percent"),!e.show_title||e.title&&""!==e.title.trim()||i.push("Title text is required when show title is enabled"),{valid:0===i.length,errors:i}}getStyles(){return"\n      .separator-preview {\n        min-height: 20px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n      }\n      \n      .blank-separator {\n        background: transparent;\n        display: block;\n        min-height: 0;\n      }\n      \n      .separator-with-title {\n        position: relative;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        width: 100%;\n      }\n      \n      .separator-title {\n        margin: 0;\n        line-height: 1.2;\n        background: var(--card-background-color);\n        padding: 0 8px;\n        position: relative;\n        z-index: 1;\n        white-space: nowrap;\n      }\n      \n      .separator-line,\n      .separator-line-left,\n      .separator-line-right {\n        display: block;\n      }\n      \n      .separator-line-left,\n      .separator-line-right {\n        flex: 1;\n      }\n      \n      /* Format button styles */\n      .format-buttons {\n        display: flex;\n        gap: 8px;\n        flex-wrap: wrap;\n      }\n      \n      .format-btn {\n        padding: 8px;\n        border: 1px solid var(--divider-color);\n        border-radius: 4px;\n        cursor: pointer;\n        transition: all 0.2s ease;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        min-width: 36px;\n        min-height: 36px;\n      }\n      \n      .format-btn:hover {\n        transform: translateY(-1px);\n        box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n      }\n      \n      .format-btn ha-icon {\n        font-size: 16px;\n      }\n      \n      /* Settings section styling */\n      .settings-section {\n        background: var(--secondary-background-color);\n        border-radius: 8px;\n        padding: 16px;\n        margin-bottom: 32px;\n      }\n      \n      .section-title {\n        font-size: 18px;\n        font-weight: 700;\n        text-transform: uppercase;\n        color: var(--primary-color);\n        margin-bottom: 16px;\n        padding-bottom: 0;\n        border-bottom: none;\n        letter-spacing: 0.5px;\n      }\n      \n      .field-title {\n        font-size: 16px;\n        font-weight: 600;\n        margin-bottom: 4px;\n      }\n      \n      .field-description {\n        font-size: 13px;\n        font-weight: 400;\n        margin-bottom: 12px;\n        color: var(--secondary-text-color);\n      }\n      \n      .field-group {\n        margin-bottom: 16px;\n      }\n\n      /* Gap control styles */\n      .gap-control-container {\n        display: flex;\n        align-items: center;\n        gap: 12px;\n      }\n\n      .gap-slider {\n        flex: 1;\n        height: 6px;\n        background: var(--divider-color);\n        border-radius: 3px;\n        outline: none;\n        appearance: none;\n        -webkit-appearance: none;\n        cursor: pointer;\n        transition: all 0.2s ease;\n      }\n\n      .gap-slider::-webkit-slider-thumb {\n        appearance: none;\n        -webkit-appearance: none;\n        width: 20px;\n        height: 20px;\n        background: var(--primary-color);\n        border-radius: 50%;\n        cursor: pointer;\n        transition: all 0.2s ease;\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n      }\n\n      .gap-slider::-moz-range-thumb {\n        width: 20px;\n        height: 20px;\n        background: var(--primary-color);\n        border-radius: 50%;\n        cursor: pointer;\n        border: none;\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n      }\n\n      .gap-slider:hover {\n        background: var(--primary-color);\n        opacity: 0.7;\n      }\n\n      .gap-slider:hover::-webkit-slider-thumb {\n        transform: scale(1.1);\n      }\n\n      .gap-slider:hover::-moz-range-thumb {\n        transform: scale(1.1);\n      }\n\n      .gap-input {\n        width: 48px !important;\n        max-width: 48px !important;\n        min-width: 48px !important;\n        padding: 4px 6px !important;\n        border: 1px solid var(--divider-color);\n        border-radius: 4px;\n        background: var(--secondary-background-color);\n        color: var(--primary-text-color);\n        font-size: 13px;\n        text-align: center;\n        transition: all 0.2s ease;\n        flex-shrink: 0;\n        box-sizing: border-box;\n      }\n\n      .gap-input:focus {\n        outline: none;\n        border-color: var(--primary-color);\n        box-shadow: 0 0 0 2px rgba(var(--rgb-primary-color), 0.2);\n      }\n\n      .reset-btn {\n        width: 36px;\n        height: 36px;\n        padding: 0;\n        border: 1px solid var(--divider-color);\n        border-radius: 4px;\n        background: var(--secondary-background-color);\n        color: var(--primary-text-color);\n        cursor: pointer;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        transition: all 0.2s ease;\n        flex-shrink: 0;\n      }\n\n      .reset-btn:hover {\n        background: var(--primary-color);\n        color: var(--text-primary-color);\n        border-color: var(--primary-color);\n      }\n\n      .reset-btn ha-icon {\n        font-size: 16px;\n      }\n    "}getSeparatorStyles(t){const e={width:`${t.width_percent||100}%`,height:`${t.thickness||1}px`,margin:"0 auto"};switch(t.separator_style){case"line":e.backgroundColor=t.color||"var(--divider-color)";break;case"double_line":e.borderTop=`${t.thickness||1}px solid ${t.color||"var(--divider-color)"}`,e.borderBottom=`${t.thickness||1}px solid ${t.color||"var(--divider-color)"}`,e.height=3*(t.thickness||1)+"px";break;case"dotted":e.borderTop=`${t.thickness||1}px dotted ${t.color||"var(--divider-color)"}`,e.height="0";break;case"double_dotted":e.borderTop=`${t.thickness||1}px dotted ${t.color||"var(--divider-color)"}`,e.borderBottom=`${t.thickness||1}px dotted ${t.color||"var(--divider-color)"}`,e.height=3*(t.thickness||1)+"px";break;case"shadow":{const i=t.thickness||1,o=Math.max(8*i,14),n=this._colorWithAlpha(t.color||"#000000",.35);e.width="calc(100% + (var(--ha-card-padding, 16px) * 2))",e.margin="0 calc(var(--ha-card-padding, 16px) * -1)",e.height=`${o}px`,e.background=`linear-gradient(to bottom, ${n} 0%, rgba(0,0,0,0) 100%)`;break}}return Object.entries(e).map((([t,e])=>`${this.camelToKebab(t)}: ${e}`)).join("; ")}getSeparatorLineStyles(t,e){const i={flex:"1",height:`${t.thickness||1}px`,margin:"left"===e?"0 8px 0 0":"0 0 0 8px"};switch(t.separator_style){case"line":i.backgroundColor=t.color||"var(--divider-color)";break;case"double_line":i.borderTop=`${t.thickness||1}px solid ${t.color||"var(--divider-color)"}`,i.borderBottom=`${t.thickness||1}px solid ${t.color||"var(--divider-color)"}`,i.height=3*(t.thickness||1)+"px";break;case"dotted":i.borderTop=`${t.thickness||1}px dotted ${t.color||"var(--divider-color)"}`,i.height="0";break;case"double_dotted":i.borderTop=`${t.thickness||1}px dotted ${t.color||"var(--divider-color)"}`,i.borderBottom=`${t.thickness||1}px dotted ${t.color||"var(--divider-color)"}`,i.height=3*(t.thickness||1)+"px";break;case"shadow":{const e=t.thickness||1,o=Math.max(8*e,14),n=this._colorWithAlpha(t.color||"#000000",.35),a=this._colorWithAlpha(t.color||"#000000",.22),r=this._colorWithAlpha(t.color||"#000000",.25);i.height=`${o}px`,i.margin="0",i.background=`\n          linear-gradient(to bottom, ${r}, rgba(0,0,0,0) 66%) top/100% 2px no-repeat,\n          radial-gradient(ellipse at center, ${n} 0%, ${a} 55%, rgba(0,0,0,0) 80%) bottom/120% 100% no-repeat\n        `;break}}return Object.entries(i).map((([t,e])=>`${this.camelToKebab(t)}: ${e}`)).join("; ")}getTitleStyles(t,e={}){const i={fontSize:void 0!==e.font_size&&null!==e.font_size?"number"==typeof e.font_size?`${e.font_size}px`:String(e.font_size):`${t.title_size||14}px`,color:e.color||t.title_color||"var(--secondary-text-color)",fontWeight:e.font_weight||(t.title_bold?"bold":"normal"),fontStyle:e.font_style||(t.title_italic?"italic":"normal"),textTransform:e.text_transform||(t.title_uppercase?"uppercase":"none"),letterSpacing:e.letter_spacing||void 0,lineHeight:e.line_height||void 0,textAlign:e.text_align||void 0,margin:"0",padding:"0 8px",backgroundColor:"transparent",position:"relative",zIndex:"1"},o=[];return t.title_strikethrough&&o.push("line-through"),t.title_underline&&o.push("underline"),i.textDecoration=o.length>0?o.join(" "):"none",e.text_shadow_h&&e.text_shadow_v&&(i.textShadow=`${e.text_shadow_h||"0"} ${e.text_shadow_v||"0"} ${e.text_shadow_blur||"0"} ${e.text_shadow_color||"rgba(0,0,0,0.25)"}`),Object.entries(i).filter((([t,e])=>null!=e&&""!==e)).map((([t,e])=>`${this.camelToKebab(t)}: ${e}`)).join("; ")}camelToKebab(t){return t.replace(/([a-z0-9]|(?=[A-Z]))([A-Z])/g,"$1-$2").toLowerCase()}_colorWithAlpha(t,e){if(!t)return`rgba(0,0,0,${e})`;if(t.startsWith("rgba(")){const i=t.replace("rgba(","").replace(")","").split(",").map((t=>t.trim())),[o,n,a]=i.map(((t,e)=>e<3?Number(t):t));return`rgba(${o||0}, ${n||0}, ${a||0}, ${e})`}if(t.startsWith("rgb(")){const i=t.replace("rgb(","").replace(")","").split(",").map((t=>Number(t.trim()))),[o,n,a]=i;return`rgba(${o||0}, ${n||0}, ${a||0}, ${e})`}if(t.startsWith("#")){const i=t.replace("#",""),o=parseInt(3===i.length?i.split("").map((t=>t+t)).join(""):i,16);return`rgba(${o>>16&255}, ${o>>8&255}, ${255&o}, ${e})`}return`rgba(0,0,0,${e})`}getBackgroundImageCSS(t,e){var i,o;if(!t.background_image_type||"none"===t.background_image_type)return"none";switch(t.background_image_type){case"upload":case"url":if(t.background_image)return`url("${t.background_image}")`;break;case"entity":if(t.background_image_entity&&(null==e?void 0:e.states[t.background_image_entity])){const n=e.states[t.background_image_entity];let a="";if((null===(i=n.attributes)||void 0===i?void 0:i.entity_picture)?a=n.attributes.entity_picture:(null===(o=n.attributes)||void 0===o?void 0:o.image)?a=n.attributes.image:n.state&&"string"==typeof n.state&&(n.state.startsWith("/")||n.state.startsWith("http"))&&(a=n.state),a)return a.startsWith("/local/")||a.startsWith("/media/")||a.startsWith("/"),`url("${a}")`}}return"none"}styleObjectToCss(t){return Object.entries(t).map((([t,e])=>`${t.replace(/[A-Z]/g,(t=>`-${t.toLowerCase()}`))}: ${e}`)).join("; ")}addPixelUnit(t){return t?/^\d+$/.test(t)?`${t}px`:/^[\d\s]+$/.test(t)?t.split(" ").map((t=>t.trim()?`${t}px`:t)).join(" "):t:t}}var It=function(t,e,i,o){var n,a=arguments.length,r=a<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,i):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(t,e,i,o);else for(var s=t.length-1;s>=0;s--)(n=t[s])&&(r=(a<3?n(r):a>3?n(e,i,r):n(e,i))||r);return a>3&&r&&Object.defineProperty(e,i,r),r};const Tt=["#000000","#333333","#666666","#999999","#CCCCCC","#FFFFFF","#FF0000","#FF3333","#FF6666","#FF9999","#FFCCCC","#FF6600","#FF8833","#FFAA66","#FFCC99","#FFE6CC","#FFFF00","#FFFF33","#FFFF66","#FFFF99","#FFFFCC","#00FF00","#33FF33","#66FF66","#99FF99","#CCFFCC","#0000FF","#3333FF","#6666FF","#9999FF","#CCCCFF","#9900FF","#AA33FF","#BB66FF","#CC99FF","#DDCCFF","var(--primary-color)","var(--accent-color)","var(--error-color)","var(--warning-color)","var(--success-color)","var(--info-color)","var(--primary-text-color)","var(--secondary-text-color)","var(--disabled-text-color)","var(--divider-color)"];let At=class extends ut{constructor(){super(...arguments),this.disabled=!1,this._showPalette=!1}firstUpdated(){this._currentValue=this.value,this._textInputValue=this.value,document.addEventListener("click",this._handleDocumentClick.bind(this))}disconnectedCallback(){super.disconnectedCallback(),document.removeEventListener("click",this._handleDocumentClick.bind(this))}_handleDocumentClick(t){var e;if(!this._showPalette)return;const i=t.target;(null===(e=this.shadowRoot)||void 0===e?void 0:e.contains(i))||i instanceof HTMLInputElement&&"color"===i.type||(this._showPalette=!1)}updated(t){t.has("value")&&(this._currentValue=this.value,this._textInputValue=this.value)}_togglePalette(t){t.stopPropagation(),this.disabled||(this._showPalette=!this._showPalette,console.log(`🎨 UltraColorPicker: Toggled palette to ${this._showPalette}`))}_selectColor(t,e){e.stopPropagation(),this._currentValue=t,this.value=t,this._showPalette=!1,this.requestUpdate();const i=new CustomEvent("value-changed",{detail:{value:t},bubbles:!0,composed:!0});this.dispatchEvent(i)}_handleNativeColorChange(t){t.stopPropagation();const e=t.target.value;this._selectColor(e,t)}_handleTextInputChange(t){const e=t.target;this._textInputValue=e.value}_handleTextInputKeyDown(t){"Enter"===t.key?(t.preventDefault(),this._applyTextInputValue()):"Escape"===t.key&&(t.preventDefault(),this._textInputValue=this._currentValue,this._showPalette=!1)}_applyTextInputValue(){void 0!==this._textInputValue&&this._selectColor(this._textInputValue,new Event("change"))}_isValidColor(t){return!!t&&([/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/,/^rgb\(\s*\d+\s*,\s*\d+\s*,\s*\d+\s*\)$/,/^rgba\(\s*\d+\s*,\s*\d+\s*,\s*\d+\s*,\s*[\d.]+\s*\)$/,/^hsl\(\s*\d+\s*,\s*\d+%\s*,\s*\d+%\s*\)$/,/^hsla\(\s*\d+\s*,\s*\d+%\s*,\s*\d+%\s*,\s*[\d.]+\s*\)$/,/^var\(--[\w-]+\)$/].some((e=>e.test(t)))||["transparent","red","blue","green","yellow","orange","purple","pink","brown","black","white","gray","grey"].includes(t.toLowerCase()))}_resetToDefault(){const t=this.defaultValue||"";this._currentValue=t;const e=new CustomEvent("value-changed",{detail:{value:t},bubbles:!0,composed:!0});this.dispatchEvent(e)}_getDisplayValue(){return this._currentValue&&""!==this._currentValue?this._currentValue:this.defaultValue||""}_getColorForNativeInput(){const t=this._getDisplayValue();if(t.startsWith("var(--")){const e=document.createElement("div");e.style.color=t,document.body.appendChild(e);const i=getComputedStyle(e).color;if(document.body.removeChild(e),i&&i.startsWith("rgb")){const t=i.match(/rgb\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)/);if(t){const[e,i,o,n]=t,a=t=>t.toString(16).padStart(2,"0");return`#${a(parseInt(i))}${a(parseInt(o))}${a(parseInt(n))}`}}return t.includes("--primary-color")?"#03a9f4":t.includes("--primary-text-color")?"#ffffff":"#000000"}return t.startsWith("#")?t:"#000000"}_isDefaultValue(){return!this._currentValue||""===this._currentValue||this._currentValue===this.defaultValue}_getContrastColor(t){if(!t||t.startsWith("var(")||t.includes("gradient"))return"var(--primary-text-color)";if(t.startsWith("#")){const e=t.replace("#","");return(.299*parseInt(e.substr(0,2),16)+.587*parseInt(e.substr(2,2),16)+.114*parseInt(e.substr(4,2),16))/255>.5?"#000000":"#ffffff"}return"var(--primary-text-color)"}render(){const t=this._getDisplayValue(),e=this._getColorForNativeInput();return q`
      <div class="ultra-color-picker-container">
        ${this.label?q`<label class="color-label">${this.label}</label>`:""}

        <div class="color-picker-wrapper">
          <!-- Main trigger input field -->
          <div
            class="color-input-field ${this.disabled?"disabled":""}"
            style="background-color: ${t}; color: ${this._getContrastColor(t)};"
            @click=${this._togglePalette}
            tabindex="0"
            role="button"
            aria-label="Open color palette"
            @keydown=${t=>{"Enter"!==t.key&&" "!==t.key||(t.preventDefault(),this._togglePalette(t))}}
          >
            <span class="color-value">${t}</span>
            <ha-icon
              icon="mdi:chevron-${this._showPalette?"up":"down"}"
              class="dropdown-icon"
            ></ha-icon>
          </div>

          <!-- Reset button -->
          <ha-icon-button
            class="reset-button ${this._isDefaultValue()?"disabled":""}"
            .disabled=${this._isDefaultValue()}
            @click=${this._resetToDefault}
            .title=${"Reset to default"}
          >
            <ha-icon icon="mdi:refresh"></ha-icon>
          </ha-icon-button>
        </div>

        <!-- Accordion-style palette -->
        ${this._showPalette?q`
              <div class="color-palette-accordion">
                <!-- Text Input Section -->
                <div class="text-input-section">
                  <div class="input-header">
                    <label class="input-label">Type color value:</label>
                    <div class="native-picker-wrapper">
                      <button
                        class="native-picker-btn"
                        type="button"
                        title="Open native color picker"
                      >
                        <ha-icon icon="mdi:eyedropper"></ha-icon>
                      </button>
                      <input
                        id="native-color-input"
                        type="color"
                        .value=${e}
                        @change=${this._handleNativeColorChange}
                        @click=${t=>t.stopPropagation()}
                        @focus=${t=>t.stopPropagation()}
                        @blur=${t=>t.stopPropagation()}
                        class="native-color-overlay"
                        title="Open native color picker"
                      />
                    </div>
                  </div>

                  <div class="text-input-wrapper">
                    <input
                      type="text"
                      class="color-text-input ${this._isValidColor(this._textInputValue||"")?"valid":"invalid"}"
                      .value=${this._textInputValue||""}
                      @input=${this._handleTextInputChange}
                      @keydown=${this._handleTextInputKeyDown}
                      placeholder="e.g. #ff0000, rgb(255,0,0), var(--primary-color)"
                      spellcheck="false"
                    />
                    <button
                      class="apply-text-btn ${this._isValidColor(this._textInputValue||"")?"":"disabled"}"
                      @click=${t=>{t.stopPropagation(),this._applyTextInputValue()}}
                      .disabled=${!this._isValidColor(this._textInputValue||"")}
                      type="button"
                      title="Apply color"
                    >
                      <ha-icon icon="mdi:check"></ha-icon>
                    </button>
                  </div>
                </div>

                <!-- Color Palette Grid -->
                <div class="palette-grid">
                  ${Tt.map((t=>q`
                      <div
                        class="color-swatch ${this._currentValue===t?"selected":""}"
                        style="background-color: ${t}"
                        @click=${e=>this._selectColor(t,e)}
                        title="${t}"
                      ></div>
                    `))}
                </div>
              </div>
            `:""}
      </div>
    `}static get styles(){return l`
      .ultra-color-picker-container {
        display: flex;
        flex-direction: column;
        gap: 8px;
        width: 100%;
        position: relative;
        box-sizing: border-box;
      }

      .color-label {
        font-size: 14px;
        font-weight: 500;
        color: var(--primary-text-color);
        margin-bottom: 4px;
      }

      .color-picker-wrapper {
        display: flex;
        align-items: center;
        gap: 12px;
        position: relative;
        /* Ensure palette can overflow this container */
        overflow: visible;
        z-index: 1;
      }

      .color-input-field {
        flex: 1;
        padding: 8px 12px;
        border: 1px solid var(--divider-color);
        border-radius: 6px;
        background: var(--card-background-color, #fff);
        color: var(--primary-text-color);
        font-family: var(--code-font-family, monospace);
        font-size: 14px;
        cursor: pointer;
        user-select: none;
        transition: all 0.2s ease;
        min-height: 36px;
        display: flex;
        align-items: center;
        justify-content: space-between;
        position: relative;
      }

      .color-input-field:hover:not(.disabled) {
        border-color: var(--primary-color);
        background: var(--primary-color-light, rgba(33, 150, 243, 0.1));
      }

      .color-input-field:focus {
        outline: none;
        border-color: var(--primary-color);
        box-shadow: 0 0 0 2px rgba(var(--primary-color-rgb, 33, 150, 243), 0.2);
      }

      .color-input-field.disabled {
        opacity: 0.5;
        cursor: not-allowed;
        background: var(--disabled-color, #f5f5f5);
        color: var(--disabled-text-color);
      }

      .color-value {
        flex: 1;
        color: var(--primary-text-color);
        font-family: var(--code-font-family, monospace);
        font-size: 14px;
      }

      .dropdown-icon {
        --mdc-icon-size: 20px;
        color: var(--secondary-text-color);
        transition: transform 0.2s ease;
        margin-left: 8px;
      }

      .reset-button {
        --mdc-icon-button-size: 40px;
        --mdc-icon-size: 20px;
        --mdc-theme-primary: var(--primary-color);
        border-radius: 6px;
        transition: all 0.2s ease;
        flex-shrink: 0;
      }

      .reset-button:not(.disabled):hover {
        background: rgba(var(--primary-color-rgb, 33, 150, 243), 0.1);
        transform: rotate(180deg);
        transform-origin: center center;
      }

      .reset-button ha-icon {
        display: flex;
        align-items: center;
        justify-content: center;
        transform-origin: center center;
      }

      .reset-button.disabled {
        opacity: 0.4;
        cursor: not-allowed;
      }

      .reset-button.disabled ha-icon {
        color: var(--disabled-text-color);
      }

      .color-palette-accordion {
        margin-top: 12px;
        background: var(--card-background-color, white);
        border: 1px solid var(--divider-color);
        border-radius: 8px;
        padding: 16px;
        width: 100%;
        box-sizing: border-box;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        animation: expandDown 0.2s ease-out;
      }

      @keyframes expandDown {
        from {
          opacity: 0;
          transform: scaleY(0.8);
          transform-origin: top;
        }
        to {
          opacity: 1;
          transform: scaleY(1);
          transform-origin: top;
        }
      }

      .text-input-section {
        margin-bottom: 16px;
        padding-bottom: 16px;
        border-bottom: 1px solid var(--divider-color);
      }

      .input-header {
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin-bottom: 8px;
      }

      .input-label {
        display: block;
        font-size: 12px;
        font-weight: 500;
        color: var(--secondary-text-color);
        text-transform: uppercase;
        letter-spacing: 0.5px;
      }

      .text-input-wrapper {
        display: flex;
        gap: 8px;
        align-items: stretch;
      }

      .color-text-input {
        flex: 1;
        padding: 8px 12px;
        border: 1px solid var(--divider-color);
        border-radius: 6px;
        background: var(--card-background-color);
        color: var(--primary-text-color);
        font-family: var(--code-font-family, 'Courier New', monospace);
        font-size: 14px;
        transition: all 0.2s ease;
        outline: none;
      }

      .color-text-input:focus {
        border-color: var(--primary-color);
        box-shadow: 0 0 0 2px rgba(var(--primary-color-rgb, 33, 150, 243), 0.2);
      }

      .color-text-input.valid {
        border-color: var(--success-color, #4caf50);
      }

      .color-text-input.invalid {
        border-color: var(--error-color, #f44336);
      }

      .apply-text-btn {
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 8px 12px;
        background: var(--primary-color);
        color: white;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        transition: all 0.2s ease;
        min-width: 44px;
      }

      .apply-text-btn:hover:not(.disabled) {
        background: var(--primary-color-dark, var(--primary-color));
        transform: scale(1.05);
      }

      .apply-text-btn.disabled {
        background: var(--disabled-color, #cccccc);
        color: var(--disabled-text-color);
        cursor: not-allowed;
        opacity: 0.6;
      }

      .apply-text-btn ha-icon {
        --mdc-icon-size: 18px;
      }

      .palette-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(32px, 1fr));
        gap: 8px;
        margin-bottom: 0;
        width: 100%;
        box-sizing: border-box;
        overflow: hidden;
      }

      .color-swatch {
        width: 28px;
        height: 28px;
        border-radius: 4px;
        cursor: pointer;
        border: 2px solid transparent;
        transition: all 0.2s ease;
        position: relative;
      }

      .color-swatch:hover {
        transform: scale(1.1);
        border-color: var(--primary-color);
      }

      .color-swatch.selected {
        border-color: var(--primary-color);
        box-shadow: 0 0 0 2px rgba(var(--primary-color-rgb, 33, 150, 243), 0.3);
      }

      .color-swatch[style*='var(--'] {
        position: relative;
      }

      .color-swatch[style*='var(--']:after {
        content: 'T';
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        font-size: 12px;
        font-weight: bold;
        color: var(--primary-text-color);
        text-shadow: 0 0 2px rgba(255, 255, 255, 0.8);
      }

      .native-picker-wrapper {
        position: relative;
        display: inline-block;
      }

      .native-picker-btn {
        background: none;
        border: none;
        padding: 8px;
        border-radius: 6px;
        cursor: pointer;
        color: var(--primary-color);
        transition: all 0.2s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        min-width: 36px;
        height: 36px;
        pointer-events: none; /* Let clicks pass through to the overlay */
      }

      .native-picker-btn:hover {
        background: rgba(var(--primary-color-rgb, 33, 150, 243), 0.1);
        transform: scale(1.1);
      }

      .native-picker-btn ha-icon {
        --mdc-icon-size: 18px;
        transition: transform 0.2s ease;
      }

      .native-color-overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        opacity: 0;
        cursor: pointer;
        border: none;
        background: transparent;
        z-index: 1;
        border-radius: 6px;
      }

      .native-color-overlay::-webkit-color-swatch-wrapper {
        padding: 0;
        border: none;
        border-radius: 6px;
      }

      .native-color-overlay::-webkit-color-swatch {
        border: none;
        border-radius: 6px;
      }

      .native-picker-wrapper:hover .native-picker-btn {
        background: rgba(var(--primary-color-rgb, 33, 150, 243), 0.1);
        transform: scale(1.1);
      }

      @media (max-width: 768px) {
        .color-picker-wrapper {
          gap: 8px;
        }

        .color-input-field {
          font-size: 13px;
          padding: 6px 10px;
        }

        .color-palette-accordion {
          padding: 12px;
        }

        .palette-grid {
          grid-template-columns: repeat(auto-fit, minmax(28px, 1fr));
          gap: 6px;
        }

        .color-swatch {
          width: 28px;
          height: 28px;
        }

        .input-header {
          flex-direction: column;
          align-items: flex-start;
          gap: 8px;
        }

        .text-input-wrapper {
          flex-direction: column;
          gap: 8px;
        }

        .color-text-input {
          width: 100%;
        }
      }
    `}};It([vt({attribute:!1})],At.prototype,"hass",void 0),It([vt()],At.prototype,"value",void 0),It([vt()],At.prototype,"label",void 0),It([vt()],At.prototype,"defaultValue",void 0),It([vt({type:Boolean})],At.prototype,"disabled",void 0),It([_t()],At.prototype,"_currentValue",void 0),It([_t()],At.prototype,"_showPalette",void 0),It([_t()],At.prototype,"_textInputValue",void 0),At=It([gt("ultra-color-picker")],At);class Pt extends xt{constructor(){super(...arguments),this.metadata={type:"image",title:"Images",description:"Display images and photos",author:"WJD Designs",version:"1.0.0",icon:"mdi:image",category:"media",tags:["image","picture","media","photo"]}}createDefault(t){return{id:t||this.generateId("image"),type:"image",image_type:"default",image_url:"",entity:"",image_entity:"",image_attribute:"",width:100,height:200,aspect_ratio:"auto",object_fit:"cover",tap_action:{action:"nothing"},hold_action:{action:"nothing"},double_tap_action:{action:"nothing"},filter_blur:0,filter_brightness:100,filter_contrast:100,filter_saturate:100,filter_hue_rotate:0,filter_opacity:100,border_radius:8,border_width:0,border_color:"var(--divider-color)",box_shadow:"none",hover_enabled:!1,hover_effect:"scale",hover_scale:105,hover_rotate:5,hover_opacity:90,hover_blur:0,hover_brightness:110,hover_shadow:"none",hover_translate_x:0,hover_translate_y:0,hover_transition:300}}renderGeneralTab(t,e,i,o){const n=t;return q`
      ${Ct.injectCleanFormStyles()}
      <div class="module-general-settings">
        <!-- Image Settings -->
        <div
          class="settings-section"
          style="background: var(--secondary-background-color); border-radius: 8px; padding: 16px; margin-bottom: 32px;"
        >
          <div
            class="section-title"
            style="font-size: 18px; font-weight: 700; text-transform: uppercase; color: var(--primary-color); margin-bottom: 16px; padding-bottom: 0; border-bottom: none; letter-spacing: 0.5px;"
          >
            Image Settings
          </div>

          <!-- Image Source Type -->
          ${Ct.renderField("Image Source Type","Choose how you want to specify the image source.",e,{image_type:n.image_type||"default"},[Ct.createSchemaItem("image_type",{select:{options:[{value:"default",label:"Default Image"},{value:"url",label:"Image URL"},{value:"upload",label:"Upload Image"},{value:"entity",label:"Entity Image"},{value:"attribute",label:"Entity Attribute"}],mode:"dropdown"}})],(t=>o({image_type:t.detail.value.image_type})))}

          <!-- URL Image Source -->
          ${"url"===n.image_type?this.renderConditionalFieldsGroup("Image URL Configuration",q`
                  ${Ct.renderField("Image URL","Enter the direct URL to the image you want to display.",e,{image_url:n.image_url||""},[Ct.createSchemaItem("image_url",{text:{}})],(t=>o({image_url:t.detail.value.image_url})))}
                `):""}

          <!-- Upload Image Source -->
          ${"upload"===n.image_type?this.renderConditionalFieldsGroup("Upload Image Configuration",q`
                  <div
                    class="field-title"
                    style="font-size: 16px; font-weight: 600; margin-bottom: 4px;"
                  >
                    Upload Image
                  </div>
                  <div
                    class="field-description"
                    style="font-size: 13px; font-weight: 400; margin-bottom: 12px;"
                  >
                    Click to upload an image file from your device.
                  </div>
                  <input
                    type="file"
                    accept="image/*"
                    style="width: 100%; padding: 8px; border: 1px solid var(--divider-color); border-radius: 4px; background: var(--card-background-color); color: var(--primary-text-color);"
                    @change=${t=>this.handleFileUpload(t,o)}
                  />
                `):""}

          <!-- Entity Image Source -->
          ${"entity"===n.image_type?this.renderConditionalFieldsGroup("Entity Image Configuration",q`
                  ${Ct.renderField("Entity","Select an entity that has an image (e.g., person, camera entities).",e,{image_entity:n.image_entity||""},[Ct.createSchemaItem("image_entity",{entity:{}})],(t=>o({image_entity:t.detail.value.image_entity})))}
                `):""}

          <!-- Attribute Image Source -->
          ${"attribute"===n.image_type?this.renderConditionalFieldsGroup("Entity Attribute Configuration",q`
                  ${Ct.renderField("Entity","Select the entity that contains the image URL in one of its attributes.",e,{image_entity:n.image_entity||""},[Ct.createSchemaItem("image_entity",{entity:{}})],(t=>o({image_entity:t.detail.value.image_entity})))}

                  <div style="margin-top: 16px;">
                    ${Ct.renderField("Attribute Name","Enter the name of the attribute that contains the image URL.",e,{image_attribute:n.image_attribute||""},[Ct.createSchemaItem("image_attribute",{text:{}})],(t=>o({image_attribute:t.detail.value.image_attribute})))}
                  </div>
                `):""}
        </div>

        <!-- Size & Appearance -->
        <div
          class="settings-section"
          style="background: var(--secondary-background-color); border-radius: 8px; padding: 16px; margin-bottom: 32px;"
        >
          <div
            class="section-title"
            style="font-size: 18px; font-weight: 700; text-transform: uppercase; color: var(--primary-color); margin-bottom: 16px; padding-bottom: 0; border-bottom: none; letter-spacing: 0.5px;"
          >
            Size & Appearance
          </div>

          <!-- Width -->
          <div class="field-group" style="margin-bottom: 16px;">
            ${Ct.renderField("Width (%)","Set the width as a percentage of the container.",e,{width:n.width||100},[Ct.createSchemaItem("width",{number:{min:10,max:100,step:5,mode:"slider"}})],(t=>o({width:t.detail.value.width})))}
          </div>

          <!-- Image Alignment (when width < 100%) -->
          ${(n.width||100)<100?q`
                <div class="field-group" style="margin-bottom: 16px;">
                  <div
                    class="field-title"
                    style="font-size: 16px !important; font-weight: 600 !important;"
                  >
                    Image Alignment
                  </div>
                  <div
                    class="field-description"
                    style="font-size: 13px !important; font-weight: 400 !important; margin-bottom: 8px;"
                  >
                    Choose how to align the image when it's less than 100% width.
                  </div>
                  <div
                    style="display: flex; gap: 8px; justify-content: flex-start; flex-wrap: wrap;"
                  >
                    <button
                      type="button"
                      style="padding: 8px 12px; border: 2px solid ${"left"===(n.alignment||"center")?"var(--primary-color)":"var(--divider-color)"}; background: ${"left"===(n.alignment||"center")?"var(--primary-color)":"transparent"}; color: ${"left"===(n.alignment||"center")?"white":"var(--primary-text-color)"}; border-radius: 6px; cursor: pointer; display: flex; align-items: center; gap: 4px;"
                      @click=${()=>o({alignment:"left"})}
                    >
                      <ha-icon icon="mdi:format-align-left" style="font-size: 16px;"></ha-icon>
                      Left
                    </button>
                    <button
                      type="button"
                      style="padding: 8px 12px; border: 2px solid ${"center"===(n.alignment||"center")?"var(--primary-color)":"var(--divider-color)"}; background: ${"center"===(n.alignment||"center")?"var(--primary-color)":"transparent"}; color: ${"center"===(n.alignment||"center")?"white":"var(--primary-text-color)"}; border-radius: 6px; cursor: pointer; display: flex; align-items: center; gap: 4px;"
                      @click=${()=>o({alignment:"center"})}
                    >
                      <ha-icon icon="mdi:format-align-center" style="font-size: 16px;"></ha-icon>
                      Center
                    </button>
                    <button
                      type="button"
                      style="padding: 8px 12px; border: 2px solid ${"right"===(n.alignment||"center")?"var(--primary-color)":"var(--divider-color)"}; background: ${"right"===(n.alignment||"center")?"var(--primary-color)":"transparent"}; color: ${"right"===(n.alignment||"center")?"white":"var(--primary-text-color)"}; border-radius: 6px; cursor: pointer; display: flex; align-items: center; gap: 4px;"
                      @click=${()=>o({alignment:"right"})}
                    >
                      <ha-icon icon="mdi:format-align-right" style="font-size: 16px;"></ha-icon>
                      Right
                    </button>
                  </div>
                </div>
              `:""}

          <!-- Height -->
          <div class="field-group" style="margin-bottom: 16px;">
            ${Ct.renderField("Height (px)","Set the height in pixels.",e,{height:n.height||200},[Ct.createSchemaItem("height",{number:{min:50,max:800,step:10,mode:"slider"}})],(t=>o({height:t.detail.value.height})))}
          </div>

          <!-- Object Fit -->
          <div class="field-group" style="margin-bottom: 16px;">
            ${Ct.renderField("Crop & Fit","Control how the image fits within its container.",e,{object_fit:n.object_fit||"cover"},[Ct.createSchemaItem("object_fit",{select:{options:[{value:"cover",label:"Cover (crop to fill)"},{value:"contain",label:"Contain (fit entire image)"},{value:"fill",label:"Fill (stretch to fit)"},{value:"scale-down",label:"Scale Down"},{value:"none",label:"None (original size)"}],mode:"dropdown"}})],(t=>o({object_fit:t.detail.value.object_fit})))}
          </div>

          <!-- Border Radius -->
          <div class="field-group">
            ${Ct.renderField("Border Radius","Control the rounded corners of the image.",e,{border_radius:n.border_radius||8},[Ct.createSchemaItem("border_radius",{number:{min:0,max:50,step:1,mode:"slider"}})],(t=>o({border_radius:t.detail.value.border_radius})))}
          </div>
        </div>

        <!-- Tap Actions Configuration -->
        <div
          class="settings-section"
          style="background: var(--secondary-background-color); border-radius: 8px; padding: 16px; margin-bottom: 32px;"
        >
          ${wt.render(e,{tap_action:n.tap_action||{action:"default"},hold_action:n.hold_action||{action:"default"},double_tap_action:n.double_tap_action||{action:"default"}},(t=>{const e={};t.tap_action&&(e.tap_action=t.tap_action),t.hold_action&&(e.hold_action=t.hold_action),t.double_tap_action&&(e.double_tap_action=t.double_tap_action),o(e)}),"Tap Actions")}
        </div>

        <!-- CSS Filters -->
        <div
          class="settings-section"
          style="background: var(--secondary-background-color); border-radius: 8px; padding: 16px; margin-bottom: 32px;"
        >
          <div
            class="section-title"
            style="font-size: 18px; font-weight: 700; text-transform: uppercase; color: var(--primary-color); margin-bottom: 16px; padding-bottom: 0; border-bottom: none; letter-spacing: 0.5px;"
          >
            CSS Filters
          </div>
          <div
            class="field-description"
            style="font-size: 13px; font-weight: 400; margin-bottom: 16px;"
          >
            Apply visual effects to your image using CSS filters.
          </div>

          <!-- Blur -->
          <div class="field-group" style="margin-bottom: 16px;">
            ${Ct.renderField("Blur","Apply a blur effect to your image.",e,{filter_blur:n.filter_blur||0},[Ct.createSchemaItem("filter_blur",{number:{min:0,max:10,step:.1,mode:"slider"}})],(t=>o({filter_blur:t.detail.value.filter_blur})))}
          </div>

          <!-- Brightness -->
          <div class="field-group" style="margin-bottom: 16px;">
            ${Ct.renderField("Brightness (%)","Adjust the brightness of your image.",e,{filter_brightness:n.filter_brightness||100},[Ct.createSchemaItem("filter_brightness",{number:{min:0,max:200,step:5,mode:"slider"}})],(t=>o({filter_brightness:t.detail.value.filter_brightness})))}
          </div>

          <!-- Contrast -->
          <div class="field-group" style="margin-bottom: 16px;">
            ${Ct.renderField("Contrast (%)","Modify the contrast of your image.",e,{filter_contrast:n.filter_contrast||100},[Ct.createSchemaItem("filter_contrast",{number:{min:0,max:200,step:5,mode:"slider"}})],(t=>o({filter_contrast:t.detail.value.filter_contrast})))}
          </div>

          <!-- Saturation -->
          <div class="field-group">
            ${Ct.renderField("Saturation (%)","Adjust the saturation of your image.",e,{filter_saturate:n.filter_saturate||100},[Ct.createSchemaItem("filter_saturate",{number:{min:0,max:200,step:5,mode:"slider"}})],(t=>o({filter_saturate:t.detail.value.filter_saturate})))}
          </div>
        </div>

        <!-- Hover Effects -->
        <div
          class="settings-section"
          style="background: var(--secondary-background-color); border-radius: 8px; padding: 16px; margin-bottom: 0;"
        >
          <div
            style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 16px; padding-bottom: 0; border-bottom: none;"
          >
            <div
              class="section-title"
              style="font-size: 18px; font-weight: 700; text-transform: uppercase; color: var(--primary-color); letter-spacing: 0.5px;"
            >
              Hover Effects
            </div>
            <ha-switch
              .checked=${n.hover_enabled||!1}
              @change=${t=>{const e=t.target;o({hover_enabled:e.checked})}}
            ></ha-switch>
          </div>

          ${n.hover_enabled?q`
                <!-- Effect Type -->
                <div class="field-group" style="margin-bottom: 16px;">
                  ${Ct.renderField("Effect Type","Choose the type of hover effect.",e,{effect:n.hover_effect||"scale"},[Ct.createSchemaItem("effect",{select:{options:[{value:"scale",label:"Scale (zoom in/out)"},{value:"rotate",label:"Rotate"},{value:"fade",label:"Fade (opacity change)"},{value:"blur",label:"Blur"},{value:"brightness",label:"Brightness"},{value:"glow",label:"Glow (box shadow)"},{value:"slide",label:"Slide (translate)"}],mode:"dropdown"}})],(t=>o({hover_effect:t.detail.value.effect})))}
                </div>

                <!-- Scale Effect Settings -->
                ${"scale"!==n.hover_effect&&n.hover_effect?"":q`
                      <div class="field-group" style="margin-bottom: 16px;">
                        ${Ct.renderField("Scale (%)","Adjust the scale of the image on hover.",e,{scale:n.hover_scale||105},[Ct.createSchemaItem("scale",{number:{min:50,max:150,step:5,mode:"slider"}})],(t=>o({hover_scale:t.detail.value.scale})))}
                      </div>
                    `}

                <!-- Rotate Effect Settings -->
                ${"rotate"===n.hover_effect?q`
                      <div class="field-group" style="margin-bottom: 16px;">
                        ${Ct.renderField("Rotation (°)","Rotate the image on hover.",e,{rotate:n.hover_rotate||5},[Ct.createSchemaItem("rotate",{number:{min:-180,max:180,step:5,mode:"slider"}})],(t=>o({hover_rotate:t.detail.value.rotate})))}
                      </div>
                    `:""}

                <!-- Fade Effect Settings -->
                ${"fade"===n.hover_effect?q`
                      <div class="field-group" style="margin-bottom: 16px;">
                        ${Ct.renderField("Opacity (%)","Change the opacity of the image on hover.",e,{opacity:n.hover_opacity||90},[Ct.createSchemaItem("opacity",{number:{min:0,max:100,step:5,mode:"slider"}})],(t=>o({hover_opacity:t.detail.value.opacity})))}
                      </div>
                    `:""}

                <!-- Blur Effect Settings -->
                ${"blur"===n.hover_effect?q`
                      <div class="field-group" style="margin-bottom: 16px;">
                        ${Ct.renderField("Blur (px)","Apply a blur effect to the image on hover.",e,{blur:n.hover_blur||2},[Ct.createSchemaItem("blur",{number:{min:0,max:10,step:.5,mode:"slider"}})],(t=>o({hover_blur:t.detail.value.blur})))}
                      </div>
                    `:""}

                <!-- Brightness Effect Settings -->
                ${"brightness"===n.hover_effect?q`
                      <div class="field-group" style="margin-bottom: 16px;">
                        ${Ct.renderField("Brightness (%)","Adjust the brightness of the image on hover.",e,{brightness:n.hover_brightness||110},[Ct.createSchemaItem("brightness",{number:{min:50,max:200,step:5,mode:"slider"}})],(t=>o({hover_brightness:t.detail.value.brightness})))}
                      </div>
                    `:""}

                <!-- Glow Effect Settings -->
                ${"glow"===n.hover_effect?q`
                      <div class="field-group" style="margin-bottom: 16px;">
                        ${Ct.renderField("Glow Intensity","Choose the intensity of the glow effect on hover.",e,{shadow:n.hover_shadow||"medium"},[Ct.createSchemaItem("shadow",{select:{options:[{value:"light",label:"Light Glow"},{value:"medium",label:"Medium Glow"},{value:"heavy",label:"Heavy Glow"},{value:"custom",label:"Custom Shadow"}],mode:"dropdown"}})],(t=>o({hover_shadow:t.detail.value.shadow})))}
                      </div>
                    `:""}

                <!-- Slide Effect Settings -->
                ${"slide"===n.hover_effect?q`
                      <div class="field-group" style="margin-bottom: 16px;">
                        ${Ct.renderField("Horizontal (px)","Translate the image horizontally on hover.",e,{translate_x:n.hover_translate_x||0},[Ct.createSchemaItem("translate_x",{number:{min:-50,max:50,step:2,mode:"slider"}})],(t=>o({hover_translate_x:t.detail.value.translate_x})))}
                      </div>

                      <div class="field-group" style="margin-bottom: 16px;">
                        ${Ct.renderField("Vertical (px)","Translate the image vertically on hover.",e,{translate_y:n.hover_translate_y||0},[Ct.createSchemaItem("translate_y",{number:{min:-50,max:50,step:2,mode:"slider"}})],(t=>o({hover_translate_y:t.detail.value.translate_y})))}
                      </div>
                    `:""}

                <!-- Transition Duration (common for all effects) -->
                <div class="field-group">
                  ${Ct.renderField("Duration (ms)","Set the duration for hover effects.",e,{transition:n.hover_transition||300},[Ct.createSchemaItem("transition",{number:{min:100,max:1e3,step:50,mode:"slider"}})],(t=>o({hover_transition:t.detail.value.transition})))}
                </div>
              `:q`
                <div
                  style="text-align: center; padding: 20px; color: var(--secondary-text-color); font-style: italic;"
                >
                  Enable the toggle above to configure hover effects
                </div>
              `}
        </div>
      </div>
    `}renderPreview(t,e){var i,o;const n=t;let a="";switch(n.image_type){case"default":default:a="/hacsfiles/Ultra-Card/assets/Ultra.jpg";break;case"url":case"upload":a=n.image_url||"";break;case"entity":if(n.image_entity&&(null==e?void 0:e.states[n.image_entity])){const t=e.states[n.image_entity];(null===(i=t.attributes)||void 0===i?void 0:i.entity_picture)?a=t.attributes.entity_picture:t.state&&t.state.startsWith("http")&&(a=t.state)}break;case"attribute":if(n.image_entity&&n.image_attribute&&(null==e?void 0:e.states[n.image_entity])){const t=null===(o=e.states[n.image_entity].attributes)||void 0===o?void 0:o[n.image_attribute];t&&"string"==typeof t&&(a=t)}}const r=[];n.filter_blur&&n.filter_blur>0&&r.push(`blur(${n.filter_blur}px)`),n.filter_brightness&&100!==n.filter_brightness&&r.push(`brightness(${n.filter_brightness}%)`),n.filter_contrast&&100!==n.filter_contrast&&r.push(`contrast(${n.filter_contrast}%)`),n.filter_saturate&&100!==n.filter_saturate&&r.push(`saturate(${n.filter_saturate}%)`);const s=r.length>0?r.join(" "):"none";let l="";const d=n.hover_enabled?`${n.hover_transition||300}ms`:"none";if(n.hover_enabled)switch(n.hover_effect||"scale"){case"scale":const t=(n.hover_scale||105)/100;l=`transform: scale(${t});`;break;case"rotate":l=`transform: rotate(${n.hover_rotate||5}deg);`;break;case"fade":l=`opacity: ${(n.hover_opacity||90)/100};`;break;case"blur":l=`filter: blur(${n.hover_blur||2}px);`;break;case"brightness":l=`filter: brightness(${n.hover_brightness||110}%);`;break;case"glow":let e="";switch(n.hover_shadow||"medium"){case"light":e="0 0 10px rgba(var(--rgb-primary-color), 0.5)";break;case"medium":e="0 0 20px rgba(var(--rgb-primary-color), 0.7)";break;case"heavy":e="0 0 30px rgba(var(--rgb-primary-color), 1)";break;case"custom":e=n.hover_shadow||"0 0 20px rgba(var(--rgb-primary-color), 0.7)"}l=`box-shadow: ${e};`;break;case"slide":const i=n.hover_translate_x||0,o=n.hover_translate_y||0;l=`transform: translate(${i}px, ${o}px);`}const c=`\n      width: ${n.width||100}%;\n      height: ${n.height||200}px;\n      object-fit: ${n.object_fit||"cover"};\n      border-radius: ${n.border_radius||8}px;\n      filter: ${s};\n      transition: ${n.hover_enabled?`transform ${d} ease, filter ${d} ease, opacity ${d} ease, box-shadow ${d} ease`:"none"};\n      cursor: pointer;\n      display: block;\n      border: ${n.border_width?`${n.border_width}px solid ${n.border_color}`:"none"};\n    `;let p="center";switch(n.alignment){case"left":p="flex-start";break;case"center":p="center";break;case"right":p="flex-end"}const u=n,m={padding:u.padding_top||u.padding_bottom||u.padding_left||u.padding_right?`${this.addPixelUnit(u.padding_top)||"0px"} ${this.addPixelUnit(u.padding_right)||"0px"} ${this.addPixelUnit(u.padding_bottom)||"0px"} ${this.addPixelUnit(u.padding_left)||"0px"}`:"0",margin:u.margin_top||u.margin_bottom||u.margin_left||u.margin_right?`${this.addPixelUnit(u.margin_top)||"0px"} ${this.addPixelUnit(u.margin_right)||"0px"} ${this.addPixelUnit(u.margin_bottom)||"0px"} ${this.addPixelUnit(u.margin_left)||"0px"}`:"0",background:u.background_color||"transparent",backgroundImage:this.getBackgroundImageCSS(u,e),backgroundSize:"cover",backgroundPosition:"center",backgroundRepeat:"no-repeat",border:u.border_style&&"none"!==u.border_style?`${u.border_width||"1px"} ${u.border_style} ${u.border_color||"var(--divider-color)"}`:"none",borderRadius:this.addPixelUnit(u.border_radius)||"0",position:u.position||"relative",top:u.top||"auto",bottom:u.bottom||"auto",left:u.left||"auto",right:u.right||"auto",zIndex:u.z_index||"auto",width:u.width||"100%",height:u.height||"auto",maxWidth:u.max_width||"100%",maxHeight:u.max_height||"none",minWidth:u.min_width||"none",minHeight:u.min_height||"auto",overflow:u.overflow||"visible",clipPath:u.clip_path||"none",backdropFilter:u.backdrop_filter||"none",boxShadow:u.box_shadow_h&&u.box_shadow_v?`${u.box_shadow_h||"0"} ${u.box_shadow_v||"0"} ${u.box_shadow_blur||"0"} ${u.box_shadow_spread||"0"} ${u.box_shadow_color||"rgba(0,0,0,0.1)"}`:"none",boxSizing:"border-box"};return q`
      <div class="image-module-container" style=${this.styleObjectToCss(m)}>
        <div class="image-module-preview">
          <!-- Image Container with Alignment -->
          <div style="display: flex; justify-content: ${p}; width: 100%;">
            ${a?q`
                  <img
                    src="${a}"
                    alt="Image"
                    style="${c}"
                    @mouseover=${t=>{if(n.hover_enabled&&l){const e=t.target;e.style.transition,e.style.cssText+=l}}}
                    @mouseout=${t=>{if(n.hover_enabled){const e=t.target;e.style.transform="",e.style.opacity="",e.style.filter=s,e.style.boxShadow=""}}}
                    @click=${t=>{wt.handleAction({action:"nothing"},e,t.target)}}
                    @contextmenu=${t=>{t.preventDefault(),wt.handleAction({action:"nothing"},e,t.target)}}
                    @dblclick=${t=>{wt.handleAction({action:"nothing"},e,t.target)}}
                  />
                `:q`
                  <div
                    style="
                      width: ${n.width||100}%;
                      height: ${n.height||200}px;
                      background: var(--secondary-background-color);
                      border: 2px dashed var(--divider-color);
                      border-radius: ${n.border_radius||8}px;
                      display: flex;
                      align-items: center;
                      justify-content: center;
                      color: var(--secondary-text-color);
                      font-size: 14px;
                    "
                  >
                    <div style="text-align: center;">
                      <ha-icon
                        icon="mdi:image-off"
                        style="font-size: 48px; margin-bottom: 8px; opacity: 0.5;"
                      ></ha-icon>
                      <div>No image source configured</div>
                    </div>
                  </div>
                `}
          </div>
        </div>
      </div>
    `}async handleFileUpload(t,e){var i,o;const n=null===(i=t.target.files)||void 0===i?void 0:i[0];if(n)try{const t=new FormData;t.append("file",n);const i=await fetch("/api/media_source/local/upload",{method:"POST",body:t,headers:{Authorization:`Bearer ${(null===(o=window.hassTokens)||void 0===o?void 0:o.access_token)||""}`}});if(i.ok){const t=(await i.json()).media_content_id||`/media/local/${n.name}`;e({image_url:t,image_type:"upload"})}else{console.error("Upload failed:",i.statusText);const t=new FileReader;t.onload=t=>{var i;const o=null===(i=t.target)||void 0===i?void 0:i.result;e({image_url:o,image_type:"upload"})},t.readAsDataURL(n)}}catch(t){console.error("Error uploading file:",t);const i=new FileReader;i.onload=t=>{var i;const o=null===(i=t.target)||void 0===i?void 0:i.result;e({image_url:o,image_type:"upload"})},i.readAsDataURL(n)}}validate(t){const e=t,i=[...super.validate(t).errors];switch(e.image_type){case"url":e.image_url&&""!==e.image_url.trim()||i.push("Image URL is required when using URL type");break;case"upload":e.image_url&&""!==e.image_url.trim()||i.push("Uploaded image is required when using upload type");break;case"entity":e.image_entity&&""!==e.image_entity.trim()||i.push("Image entity is required when using entity type");break;case"attribute":e.image_entity&&""!==e.image_entity.trim()||i.push("Entity is required when using attribute type"),e.image_attribute&&""!==e.image_attribute.trim()||i.push("Attribute name is required when using attribute type")}return e.link_enabled&&!e.link_url&&i.push("Link URL is required when link is enabled"),e.width&&(e.width<1||e.width>100)&&i.push("Width must be between 1 and 100 percent"),e.height&&(e.height<50||e.height>800)&&i.push("Height must be between 50 and 800 pixels"),{valid:0===i.length,errors:i}}getBackgroundImageCSS(t,e){var i,o;if(!t.background_image_type||"none"===t.background_image_type)return"none";switch(t.background_image_type){case"upload":case"url":if(t.background_image)return`url("${t.background_image}")`;break;case"entity":if(t.background_image_entity&&(null==e?void 0:e.states[t.background_image_entity])){const n=e.states[t.background_image_entity];let a="";if((null===(i=n.attributes)||void 0===i?void 0:i.entity_picture)?a=n.attributes.entity_picture:(null===(o=n.attributes)||void 0===o?void 0:o.image)?a=n.attributes.image:n.state&&"string"==typeof n.state&&(n.state.startsWith("/")||n.state.startsWith("http"))&&(a=n.state),a)return a.startsWith("/local/")||a.startsWith("/media/")||a.startsWith("/"),`url("${a}")`}}return"none"}styleObjectToCss(t){return Object.entries(t).map((([t,e])=>`${t.replace(/[A-Z]/g,(t=>`-${t.toLowerCase()}`))}: ${e}`)).join("; ")}getStyles(){return"\n      .image-module-preview {\n        max-width: 100%;\n        overflow: hidden;\n        box-sizing: border-box;\n      }\n\n\n\n      .image-module-preview img {\n        max-width: 100%;\n        height: auto;\n        display: block;\n      }\n\n      /* Conditional Fields Grouping CSS */\n      .conditional-fields-group {\n        margin-top: 16px;\n        border-left: 4px solid var(--primary-color);\n        background: rgba(var(--rgb-primary-color), 0.08);\n        border-radius: 0 8px 8px 0;\n        overflow: hidden;\n        transition: all 0.2s ease;\n        animation: slideInFromLeft 0.3s ease-out;\n      }\n\n      .conditional-fields-group:hover {\n        background: rgba(var(--rgb-primary-color), 0.12);\n      }\n\n      .conditional-fields-header {\n        background: rgba(var(--rgb-primary-color), 0.15);\n        padding: 12px 16px;\n        font-size: 14px;\n        font-weight: 600;\n        color: var(--primary-color);\n        border-bottom: 1px solid rgba(var(--rgb-primary-color), 0.2);\n        text-transform: uppercase;\n        letter-spacing: 0.5px;\n      }\n\n      .conditional-fields-content {\n        padding: 16px;\n      }\n\n      .conditional-fields-content > .field-title:first-child {\n        margin-top: 0 !important;\n      }\n\n      @keyframes slideInFromLeft {\n        from { \n          opacity: 0; \n          transform: translateX(-10px); \n        }\n        to { \n          opacity: 1; \n          transform: translateX(0); \n        }\n      }\n\n      /* Field styling - ensure vertical stacking, no columns */\n      .field-title {\n        font-size: 16px !important;\n        font-weight: 600 !important;\n        \n        margin-bottom: 4px !important;\n        display: block !important;\n        width: 100% !important;\n      }\n\n      .field-description {\n        font-size: 13px !important;\n        color: var(--secondary-text-color) !important;\n        margin-bottom: 12px !important;\n        display: block !important;\n        opacity: 0.8 !important;\n        line-height: 1.4 !important;\n        width: 100% !important;\n      }\n\n      .field-group {\n        display: flex !important;\n        flex-direction: column !important;\n        width: 100% !important;\n        margin-bottom: 16px !important;\n      }\n\n      .field-group ha-form {\n        width: 100% !important;\n        display: block !important;\n      }\n\n      .section-title {\n        font-size: 18px !important;\n        font-weight: 700 !important;\n        color: var(--primary-color) !important;\n        text-transform: uppercase !important;\n        letter-spacing: 0.5px !important;\n      }\n\n      .settings-section {\n        margin-bottom: 16px;\n        max-width: 100%;\n        box-sizing: border-box;\n      }\n    "}addPixelUnit(t){return t?/^\d+$/.test(t)?`${t}px`:/^[\d\s]+$/.test(t)?t.split(" ").map((t=>t.trim()?`${t}px`:t)).join(" "):t:t}}var Dt=i(57);class Lt{static getEntityIcon(t,e){if(!t||!(null==e?void 0:e.states[t]))return null;const i=e.states[t];return this._getHomeAssistantComputedIcon(t,i,e)||this._getEnhancedIconForEntity(t,i)}static _getHomeAssistantComputedIcon(t,e,i){var o,n,a,r,s;if(null===(o=e.attributes)||void 0===o?void 0:o.icon)return e.attributes.icon;try{if(null===(a=null===(n=window.customCards)||void 0===n?void 0:n.helpers)||void 0===a?void 0:a.stateIcon){const t=window.customCards.helpers.stateIcon(e);if(t)return t}const o=[window.stateIcon,window.computeStateIcon,window.computeEntityIcon,null===(r=window.hassIcons)||void 0===r?void 0:r.stateIcon,null===(s=window.hassIcons)||void 0===s?void 0:s.computeStateIcon,i.stateIcon,i.computeStateIcon,i.computeEntityIcon];for(const t of o)if("function"==typeof t)try{const i=t(e);if(i)return i}catch(t){}if(i.entities&&i.entities[t]){const e=i.entities[t];if(e.icon)return e.icon}if(t.startsWith("weather.")){const t={"clear-night":"mdi:weather-night",cloudy:"mdi:weather-cloudy",fog:"mdi:weather-fog",hail:"mdi:weather-hail",lightning:"mdi:weather-lightning","lightning-rainy":"mdi:weather-lightning-rainy",partlycloudy:"mdi:weather-partly-cloudy",pouring:"mdi:weather-pouring",rainy:"mdi:weather-rainy",snowy:"mdi:weather-snowy","snowy-rainy":"mdi:weather-snowy-rainy",sunny:"mdi:weather-sunny",windy:"mdi:weather-windy","windy-variant":"mdi:weather-windy-variant",exceptional:"mdi:weather-exceptional"},i=e.state;if(t[i])return t[i]}}catch(t){console.debug("Failed to compute HA icon, falling back to enhanced detection:",t)}return null}static _getEnhancedIconForEntity(t,e){var i,o,n;const a=t.split(".")[0],r=t.split(".")[1]||"",s=null===(i=e.attributes)||void 0===i?void 0:i.device_class,l=null===(o=e.attributes)||void 0===o?void 0:o.unit_of_measurement,d=(null===(n=e.attributes)||void 0===n?void 0:n.friendly_name)||"",c=e.state,p=r.toLowerCase(),u=d.toLowerCase();return this._isBatteryRelated(p,u,s,l)?this._isChargingRelated(p,u)?this._getChargingBatteryIcon(c,l):this._getBatteryIcon(c,l):this._isTemperatureRelated(p,u,s,l)?"mdi:thermometer":this._isHumidityRelated(p,u,s,l)?"mdi:water-percent":this._isPowerRelated(p,u,s,l)?"mdi:flash":this._isSignalRelated(p,u)?"mdi:wifi":"binary_sensor"===a&&this._isDoorWindowRelated(p,u)?"on"===c?"mdi:door-open":"mdi:door-closed":"binary_sensor"===a&&this._isMotionRelated(p,u)?"on"===c?"mdi:motion-sensor":"mdi:motion-sensor-off":this._isIlluminanceRelated(p,u,s,l)?"mdi:brightness-5":this._isPressureRelated(p,u,s,l)?"mdi:gauge":this._getDefaultIconForDomain(a,s,c)}static _isBatteryRelated(t,e,i,o){return"battery"===i||t.includes("battery")||t.includes("charge")||t.includes("power_level")||e.includes("battery")||e.includes("charge")||"%"===o}static _isChargingRelated(t,e){return["charging","charge_target","charging_target","charge_limit"].some((i=>t.includes(i)||e.toLowerCase().includes(i)))}static _getBatteryIcon(t,e){const i=parseFloat(t);return isNaN(i)?"mdi:battery-unknown":i>=95?"mdi:battery":i>=85?"mdi:battery-90":i>=75?"mdi:battery-80":i>=65?"mdi:battery-70":i>=55?"mdi:battery-60":i>=45?"mdi:battery-50":i>=35?"mdi:battery-40":i>=25?"mdi:battery-30":i>=15?"mdi:battery-20":i>=5?"mdi:battery-10":"mdi:battery-alert"}static _getChargingBatteryIcon(t,e){const i=parseFloat(t);return isNaN(i)?"mdi:battery-charging":i>=95?"mdi:battery-charging-100":i>=85?"mdi:battery-charging-90":i>=75?"mdi:battery-charging-80":i>=65?"mdi:battery-charging-70":i>=55?"mdi:battery-charging-60":i>=45?"mdi:battery-charging-50":i>=35?"mdi:battery-charging-40":i>=25?"mdi:battery-charging-30":i>=15?"mdi:battery-charging-20":i>=5?"mdi:battery-charging-10":"mdi:battery-charging-outline"}static _isTemperatureRelated(t,e,i,o){return"temperature"===i||t.includes("temp")||e.includes("temperature")||"°C"===o||"°F"===o||"K"===o}static _isHumidityRelated(t,e,i,o){return"humidity"===i||t.includes("humidity")||e.includes("humidity")||"%"===o&&(t.includes("humid")||e.includes("humid"))}static _isPowerRelated(t,e,i,o){return"power"===i||"energy"===i||t.includes("power")||t.includes("energy")||t.includes("consumption")||"W"===o||"kW"===o||"kWh"===o||"Wh"===o}static _isSignalRelated(t,e){return["signal","rssi","wifi","network"].some((i=>t.includes(i)||e.toLowerCase().includes(i)))}static _isDoorWindowRelated(t,e){return["door","window","gate"].some((i=>t.includes(i)||e.toLowerCase().includes(i)))}static _isMotionRelated(t,e){return["motion","movement","occupancy","presence"].some((i=>t.includes(i)||e.toLowerCase().includes(i)))}static _isIlluminanceRelated(t,e,i,o){return"illuminance"===i||t.includes("illuminance")||t.includes("brightness")||t.includes("lux")||"lx"===o||"lux"===o}static _isPressureRelated(t,e,i,o){return"pressure"===i||t.includes("pressure")||e.includes("pressure")||"hPa"===o||"mbar"===o||"Pa"===o||"psi"===o}static _getDefaultIconForDomain(t,e,i){return{alarm_control_panel:"mdi:shield",automation:"mdi:robot",binary_sensor:"mdi:radiobox-blank",button:"mdi:button-pointer",calendar:"mdi:calendar",camera:"mdi:video",climate:"mdi:thermostat",cover:"mdi:window-shutter",device_tracker:"mdi:account",fan:"mdi:fan",group:"mdi:google-circles-communities",humidifier:"mdi:air-humidifier",input_boolean:"mdi:toggle-switch",input_button:"mdi:button-pointer",input_datetime:"mdi:calendar-clock",input_number:"mdi:ray-vertex",input_select:"mdi:format-list-bulleted",input_text:"mdi:form-textbox",light:"mdi:lightbulb",lock:"mdi:lock",media_player:"mdi:speaker",number:"mdi:ray-vertex",person:"mdi:account",plant:"mdi:flower",remote:"mdi:remote",scene:"mdi:palette",script:"mdi:script-text",select:"mdi:format-list-bulleted",sensor:"mdi:eye",siren:"mdi:bullhorn",sun:"mdi:white-balance-sunny",switch:"mdi:toggle-switch",timer:"mdi:timer",vacuum:"mdi:robot-vacuum",water_heater:"mdi:thermometer",weather:"mdi:weather-partly-cloudy",zone:"mdi:map-marker"}[t]||"mdi:eye"}}class Mt extends xt{constructor(){super(...arguments),this.metadata={type:"info",title:"Info Items",description:"Show entity information values",author:"WJD Designs",version:"1.0.0",icon:"mdi:information",category:"data",tags:["info","entity","data","sensors"]},this.clickTimeout=null,this.holdTimeout=null,this.isHolding=!1}createDefault(t,e){return{id:t||this.generateId("info"),type:"info",info_entities:[{id:this.generateId("entity"),entity:"weather.forecast_home",name:"Temperature",icon:"mdi:thermometer",show_icon:!0,show_name:!0,show_state:!0,show_units:!0,text_size:14,name_size:12,icon_size:26,text_bold:!1,text_italic:!1,text_uppercase:!1,text_strikethrough:!1,name_bold:!1,name_italic:!1,name_uppercase:!1,name_strikethrough:!1,icon_color:"var(--primary-color)",name_color:"var(--secondary-text-color)",text_color:"var(--primary-text-color)",state_color:"var(--primary-text-color)",click_action:"more-info",navigation_path:"",url:"",service:"",service_data:{},template_mode:!1,template:"",dynamic_icon_template_mode:!1,dynamic_icon_template:"",dynamic_color_template_mode:!1,dynamic_color_template:"",icon_position:"left",icon_alignment:"center",content_alignment:"start",overall_alignment:"center",icon_gap:8}],columns:1,gap:12,allow_wrap:!0,tap_action:{action:"nothing"},hold_action:{action:"nothing"},double_tap_action:{action:"nothing"},enable_hover_effect:!0,hover_background_color:"var(--divider-color)"}}renderGeneralTab(t,e,i,o){var n,a,r;const s=t,l=this.createDefault().info_entities[0];let d=s.info_entities[0]?Object.assign(Object.assign({},l),s.info_entities[0]):l;return d=Object.assign(Object.assign({},d),{icon_position:d.icon_position||"left",overall_alignment:d.overall_alignment||"center",icon_alignment:d.icon_alignment||"center",content_alignment:d.content_alignment||"start"}),q`
      ${this.injectUcFormStyles()}
      <div class="module-general-settings">
        <!-- Entity Configuration -->
        <div
          class="settings-section"
          style="background: var(--secondary-background-color); border-radius: 8px; padding: 16px; margin-bottom: 24px;"
        >
          <div
            class="section-title"
            style="font-size: 18px !important; font-weight: 700 !important; text-transform: uppercase !important; color: var(--primary-color); margin-bottom: 16px; border-bottom: 2px solid var(--primary-color); padding-bottom: 8px;"
          >
            Entity Configuration
          </div>

          <div style="margin-bottom: 16px;">
            <ha-form
              .hass=${e}
              .data=${{entity:d.entity||""}}
              .schema=${[{name:"entity",label:"Entity",description:"Select the entity to display",selector:{entity:{}}}]}
              .computeLabel=${t=>t.label||t.name}
              .computeDescription=${t=>t.description||""}
              @value-changed=${t=>this._handleEntityChange(s,0,t.detail.value.entity,e,o)}
            ></ha-form>
          </div>
        </div>

        <!-- Icon Settings -->
        <div
          class="settings-section icon-settings"
          style="background: var(--secondary-background-color); border-radius: 8px; padding: 16px; margin-bottom: 24px;"
        >
          <div
            class="section-title"
            style="font-size: 18px !important; font-weight: 700 !important; text-transform: uppercase !important; color: var(--primary-color); margin-bottom: 16px; border-bottom: 2px solid var(--primary-color); padding-bottom: 8px;"
          >
            Icon Settings
          </div>

          <div style="margin-bottom: 16px;">
            <ha-form
              .hass=${e}
              .data=${{show_icon:!1!==d.show_icon}}
              .schema=${[{name:"show_icon",label:"Show Icon",description:"Display an icon next to the entity value",selector:{boolean:{}}}]}
              .computeLabel=${t=>t.label||t.name}
              .computeDescription=${t=>t.description||""}
              @value-changed=${t=>this._updateEntity(s,0,{show_icon:t.detail.value.show_icon},o)}
            ></ha-form>
          </div>

          ${!1!==d.show_icon?q`
                <div style="margin-bottom: 16px;">
                  <ha-form
                    .hass=${e}
                    .data=${{icon:d.icon||""}}
                    .schema=${[{name:"icon",label:"Icon",description:"Choose an icon to display",selector:{icon:{}}}]}
                    .computeLabel=${t=>t.label||t.name}
                    .computeDescription=${t=>t.description||""}
                    @value-changed=${t=>this._updateEntity(s,0,{icon:t.detail.value.icon},o)}
                  ></ha-form>
                </div>

                <div style="margin-bottom: 16px;">
                  <div
                    class="field-title"
                    style="font-size: 16px !important; font-weight: 600 !important; margin-bottom: 12px;"
                  >
                    Icon Color
                  </div>
                  <ultra-color-picker
                    .value=${d.icon_color||""}
                    .defaultValue=${"var(--primary-color)"}
                    .hass=${e}
                    @value-changed=${t=>this._updateEntity(s,0,{icon_color:t.detail.value},o)}
                  ></ultra-color-picker>
                </div>
              `:""}
        </div>

        <!-- Name Settings -->
        <div
          class="settings-section name-settings"
          style="background: var(--secondary-background-color); border-radius: 8px; padding: 16px; margin-bottom: 24px;"
        >
          <div
            class="section-title"
            style="font-size: 18px !important; font-weight: 700 !important; text-transform: uppercase !important; color: var(--primary-color); margin-bottom: 16px; border-bottom: 2px solid var(--primary-color); padding-bottom: 8px;"
          >
            Name Settings
          </div>

          <div style="margin-bottom: 16px;">
            <ha-form
              .hass=${e}
              .data=${{show_name:!1!==d.show_name}}
              .schema=${[{name:"show_name",label:"Show Name",description:"Display the entity name above the value",selector:{boolean:{}}}]}
              .computeLabel=${t=>t.label||t.name}
              .computeDescription=${t=>t.description||""}
              @value-changed=${t=>this._updateEntity(s,0,{show_name:t.detail.value.show_name},o)}
            ></ha-form>
          </div>

          ${!1!==d.show_name?q`
                <div style="margin-bottom: 16px;">
                  <ha-form
                    .hass=${e}
                    .data=${{name:d.name||""}}
                    .schema=${[{name:"name",label:"Custom Name",description:"Override the entity name with a custom name",selector:{text:{}}}]}
                    .computeLabel=${t=>t.label||t.name}
                    .computeDescription=${t=>t.description||""}
                    @value-changed=${t=>this._updateEntity(s,0,{name:t.detail.value.name},o)}
                  ></ha-form>
                </div>

                <div style="margin-bottom: 16px;">
                  <div
                    class="field-title"
                    style="font-size: 16px !important; font-weight: 600 !important; margin-bottom: 12px;"
                  >
                    Name Color
                  </div>
                  <ultra-color-picker
                    .value=${d.name_color||""}
                    .defaultValue=${"var(--secondary-text-color)"}
                    .hass=${e}
                    @value-changed=${t=>this._updateEntity(s,0,{name_color:t.detail.value},o)}
                  ></ultra-color-picker>
                </div>
              `:""}
        </div>

        <!-- State Settings -->
        <div
          class="settings-section state-settings"
          style="background: var(--secondary-background-color); border-radius: 8px; padding: 16px; margin-bottom: 24px;"
        >
          <div
            class="section-title"
            style="font-size: 18px !important; font-weight: 700 !important; text-transform: uppercase !important; color: var(--primary-color); margin-bottom: 16px; border-bottom: 2px solid var(--primary-color); padding-bottom: 8px;"
          >
            State Settings
          </div>

          <div style="margin-bottom: 16px;">
            <ha-form
              .hass=${e}
              .data=${{show_state:!1!==d.show_state}}
              .schema=${[{name:"show_state",label:"Show State",description:"Display the entity state/value",selector:{boolean:{}}}]}
              .computeLabel=${t=>t.label||t.name}
              .computeDescription=${t=>t.description||""}
              @value-changed=${t=>this._updateEntity(s,0,{show_state:t.detail.value.show_state},o)}
            ></ha-form>
          </div>

          ${!1!==d.show_state?q`
                <div style="margin-bottom: 16px;">
                  <ha-form
                    .hass=${e}
                    .data=${{show_units:!1!==d.show_units}}
                    .schema=${[{name:"show_units",label:"Show Units",description:"Display the unit of measurement (if available)",selector:{boolean:{}}}]}
                    .computeLabel=${t=>t.label||t.name}
                    .computeDescription=${t=>t.description||""}
                    @value-changed=${t=>this._updateEntity(s,0,{show_units:t.detail.value.show_units},o)}
                  ></ha-form>
                </div>
              `:""}
          ${!1!==d.show_state?q`
                <div style="margin-bottom: 16px;">
                  <div
                    class="field-title"
                    style="font-size: 16px !important; font-weight: 600 !important; margin-bottom: 12px;"
                  >
                    State Color
                  </div>
                  <ultra-color-picker
                    .value=${d.state_color||""}
                    .defaultValue=${"var(--primary-text-color)"}
                    .hass=${e}
                    @value-changed=${t=>this._updateEntity(s,0,{state_color:t.detail.value},o)}
                  ></ultra-color-picker>
                </div>
              `:""}
        </div>

        <!-- Template Mode Section -->
        <div
          class="settings-section template-mode-section"
          style="background: var(--secondary-background-color); border-radius: 8px; padding: 16px; margin-top: 24px;"
        >
          <div
            class="section-title"
            style="font-size: 18px !important; font-weight: 700 !important; text-transform: uppercase !important; color: var(--primary-color); margin-bottom: 16px; border-bottom: 2px solid var(--primary-color); padding-bottom: 8px;"
          >
            Template Mode
          </div>
          <div
            class="field-description"
            style="font-size: 13px !important; font-weight: 400 !important; margin-bottom: 16px;"
          >
            Use a template to format the entity value. Templates allow you to use Home Assistant
            templating syntax for complex formatting.
          </div>

          <div class="field-group" style="margin-bottom: 16px;">
            <ha-form
              .hass=${e}
              .data=${{template_mode:d.template_mode||!1}}
              .schema=${[{name:"template_mode",label:"Template Mode",description:"Use Home Assistant templating syntax to format the value",selector:{boolean:{}}}]}
              .computeLabel=${t=>t.label||t.name}
              .computeDescription=${t=>t.description||""}
              @value-changed=${t=>this._updateEntity(s,0,{template_mode:t.detail.value.template_mode},o)}
            ></ha-form>
          </div>

          ${d.template_mode?q`
                <div class="field-group" style="margin-bottom: 16px;">
                  <ha-form
                    .hass=${e}
                    .data=${{template:d.template||""}}
                    .schema=${[{name:"template",label:"Value Template",description:"Template to format the entity value using Jinja2 syntax",selector:{text:{multiline:!0}}}]}
                    .computeLabel=${t=>t.label||t.name}
                    .computeDescription=${t=>t.description||""}
                    @value-changed=${t=>this._updateEntity(s,0,{template:t.detail.value.template},o)}
                  ></ha-form>
                </div>

                <div class="template-examples">
                  <div
                    class="field-title"
                    style="font-size: 16px !important; font-weight: 600 !important; margin-bottom: 12px;"
                  >
                    Common Examples:
                  </div>

                  <div class="example-item" style="margin-bottom: 16px;">
                    <div
                      class="example-code"
                      style="background: var(--code-editor-background-color, #1e1e1e); padding: 12px; border-radius: 4px; font-family: 'Courier New', monospace; font-size: 12px; color: #d4d4d4; margin-bottom: 8px;"
                    >
                      {{ states('sensor.${(null===(n=d.entity)||void 0===n?void 0:n.split(".")[1])||"example"}') }}
                    </div>
                    <div
                      class="example-description"
                      style="font-size: 12px; color: var(--secondary-text-color);"
                    >
                      Basic value
                    </div>
                  </div>

                  <div class="example-item" style="margin-bottom: 16px;">
                    <div
                      class="example-code"
                      style="background: var(--code-editor-background-color, #1e1e1e); padding: 12px; border-radius: 4px; font-family: 'Courier New', monospace; font-size: 12px; color: #d4d4d4; margin-bottom: 8px;"
                    >
                      {{ states('sensor.${(null===(a=d.entity)||void 0===a?void 0:a.split(".")[1])||"example"}') | float(0) }}
                      km
                    </div>
                    <div
                      class="example-description"
                      style="font-size: 12px; color: var(--secondary-text-color);"
                    >
                      With units
                    </div>
                  </div>

                  <div class="example-item" style="margin-bottom: 16px;">
                    <div
                      class="example-code"
                      style="background: var(--code-editor-background-color, #1e1e1e); padding: 12px; border-radius: 4px; font-family: 'Courier New', monospace; font-size: 12px; color: #d4d4d4; margin-bottom: 8px;"
                    >
                      {{ states('sensor.${(null===(r=d.entity)||void 0===r?void 0:r.split(".")[1])||"example"}') | float(0) |
                      round(1) }}
                    </div>
                    <div
                      class="example-description"
                      style="font-size: 12px; color: var(--secondary-text-color);"
                    >
                      Round to 1 decimal
                    </div>
                  </div>
                </div>
              `:""}
        </div>

        <!-- Size Settings -->
        <div
          class="settings-section size-settings"
          style="background: var(--secondary-background-color); border-radius: 8px; padding: 16px; margin-top: 24px;"
        >
          <div
            class="section-title"
            style="font-size: 18px !important; font-weight: 700 !important; text-transform: uppercase !important; color: var(--primary-color); margin-bottom: 16px; border-bottom: 2px solid var(--primary-color); padding-bottom: 8px;"
          >
            Size Settings
          </div>

          <div style="display: flex; flex-direction: column; gap: 20px;">
            ${!1!==d.show_icon?q`
                  <div class="field-container" style="margin-bottom: 24px;">
                    <div class="field-title">Icon Size</div>
                    <div class="field-description">Size of the icon in pixels</div>
                    <div
                      class="gap-control-container"
                      style="display: flex; align-items: center; gap: 12px;"
                    >
                      <input
                        type="range"
                        class="gap-slider"
                        min="12"
                        max="48"
                        step="1"
                        .value="${Number(d.icon_size)||26}"
                        @input=${t=>{const e=t.target,i=Number(e.value);this._updateEntity(s,0,{icon_size:i},o)}}
                      />
                      <input
                        type="number"
                        class="gap-input"
                        min="12"
                        max="48"
                        step="1"
                        .value="${Number(d.icon_size)||26}"
                        @input=${t=>{const e=t.target,i=Number(e.value);isNaN(i)||this._updateEntity(s,0,{icon_size:i},o)}}
                        @keydown=${t=>{if("ArrowUp"===t.key||"ArrowDown"===t.key){t.preventDefault();const e=t.target,i=Number(e.value)||26,n="ArrowUp"===t.key?1:-1,a=Math.max(12,Math.min(48,i+n));this._updateEntity(s,0,{icon_size:a},o)}}}
                      />
                      <button
                        class="reset-btn"
                        @click=${()=>this._updateEntity(s,0,{icon_size:26},o)}
                        title="Reset to default (26)"
                      >
                        <ha-icon icon="mdi:refresh"></ha-icon>
                      </button>
                    </div>
                  </div>
                `:""}
            ${!1!==d.show_name?q`
                  <div class="field-container" style="margin-bottom: 24px;">
                    <div class="field-title">Name Size</div>
                    <div class="field-description">Size of the entity name text in pixels</div>
                    <div
                      class="gap-control-container"
                      style="display: flex; align-items: center; gap: 12px;"
                    >
                      <input
                        type="range"
                        class="gap-slider"
                        min="8"
                        max="32"
                        step="1"
                        .value="${d.name_size||12}"
                        @input=${t=>{const e=t.target,i=Number(e.value);this._updateEntity(s,0,{name_size:i},o)}}
                      />
                      <input
                        type="number"
                        class="gap-input"
                        min="8"
                        max="32"
                        step="1"
                        .value="${d.name_size||12}"
                        @input=${t=>{const e=t.target,i=Number(e.value);isNaN(i)||this._updateEntity(s,0,{name_size:i},o)}}
                        @keydown=${t=>{if("ArrowUp"===t.key||"ArrowDown"===t.key){t.preventDefault();const e=t.target,i=Number(e.value)||12,n="ArrowUp"===t.key?1:-1,a=Math.max(8,Math.min(32,i+n));this._updateEntity(s,0,{name_size:a},o)}}}
                      />
                      <button
                        class="reset-btn"
                        @click=${()=>this._updateEntity(s,0,{name_size:12},o)}
                        title="Reset to default (12)"
                      >
                        <ha-icon icon="mdi:refresh"></ha-icon>
                      </button>
                    </div>
                  </div>
                `:""}

            <div class="field-container" style="margin-bottom: 24px;">
              <div class="field-title">Value Size</div>
              <div class="field-description">Size of the entity value text in pixels</div>
              <div
                class="gap-control-container"
                style="display: flex; align-items: center; gap: 12px;"
              >
                <input
                  type="range"
                  class="gap-slider"
                  min="8"
                  max="32"
                  step="1"
                  .value="${d.text_size||14}"
                  @input=${t=>{const e=t.target,i=Number(e.value);this._updateEntity(s,0,{text_size:i},o)}}
                />
                <input
                  type="number"
                  class="gap-input"
                  min="8"
                  max="32"
                  step="1"
                  .value="${d.text_size||14}"
                  @input=${t=>{const e=t.target,i=Number(e.value);isNaN(i)||this._updateEntity(s,0,{text_size:i},o)}}
                  @keydown=${t=>{if("ArrowUp"===t.key||"ArrowDown"===t.key){t.preventDefault();const e=t.target,i=Number(e.value)||14,n="ArrowUp"===t.key?1:-1,a=Math.max(8,Math.min(32,i+n));this._updateEntity(s,0,{text_size:a},o)}}}
                />
                <button
                  class="reset-btn"
                  @click=${()=>this._updateEntity(s,0,{text_size:14},o)}
                  title="Reset to default (14)"
                >
                  <ha-icon icon="mdi:refresh"></ha-icon>
                </button>
              </div>
            </div>

            ${!1!==d.show_icon?q`
                  <div class="field-container" style="margin-bottom: 24px;">
                    <div class="field-title">Icon Gap</div>
                    <div class="field-description">
                      Space between the icon and content in pixels
                    </div>
                    <div
                      class="gap-control-container"
                      style="display: flex; align-items: center; gap: 12px;"
                    >
                      <input
                        type="range"
                        class="gap-slider"
                        min="0"
                        max="32"
                        step="1"
                        .value="${d.icon_gap||8}"
                        @input=${t=>{const e=t.target,i=Number(e.value);this._updateEntity(s,0,{icon_gap:i},o)}}
                      />
                      <input
                        type="number"
                        class="gap-input"
                        min="0"
                        max="32"
                        step="1"
                        .value="${d.icon_gap||8}"
                        @input=${t=>{const e=t.target,i=Number(e.value);isNaN(i)||this._updateEntity(s,0,{icon_gap:i},o)}}
                        @keydown=${t=>{if("ArrowUp"===t.key||"ArrowDown"===t.key){t.preventDefault();const e=t.target,i=Number(e.value)||8,n="ArrowUp"===t.key?1:-1,a=Math.max(0,Math.min(32,i+n));this._updateEntity(s,0,{icon_gap:a},o)}}}
                      />
                      <button
                        class="reset-btn"
                        @click=${()=>this._updateEntity(s,0,{icon_gap:8},o)}
                        title="Reset to default (8)"
                      >
                        <ha-icon icon="mdi:refresh"></ha-icon>
                      </button>
                    </div>
                  </div>
                `:""}
          </div>
        </div>

        <!-- Layout & Positioning Section -->
        <div
          class="settings-section layout-positioning-section"
          style="background: var(--secondary-background-color); border-radius: 8px; padding: 16px; margin-top: 24px;"
        >
          <div
            class="section-title"
            style="font-size: 18px !important; font-weight: 700 !important; text-transform: uppercase !important; color: var(--primary-color); margin-bottom: 16px; border-bottom: 2px solid var(--primary-color); padding-bottom: 8px;"
          >
            Layout & Positioning
          </div>

          <!-- Icon Position -->
          <div class="field-group" style="margin-bottom: 24px;">
            <div
              class="field-title"
              style="font-size: 16px !important; font-weight: 600 !important; margin-bottom: 12px;"
            >
              Icon Position
            </div>
            <div
              class="control-button-group"
              style="display: grid; grid-template-columns: repeat(4, 1fr); gap: 8px; width: 100%;"
            >
              ${[{value:"left",icon:"mdi:arrow-left"},{value:"top",icon:"mdi:arrow-up"},{value:"right",icon:"mdi:arrow-right"},{value:"bottom",icon:"mdi:arrow-down"}].map((t=>q`
                  <button
                    type="button"
                    class="control-btn ${d.icon_position===t.value?"active":""}"
                    @click=${()=>this._updateEntity(s,0,{icon_position:t.value},o)}
                    title="${t.value.charAt(0).toUpperCase()+t.value.slice(1)}"
                  >
                    <ha-icon icon="${t.icon}"></ha-icon>
                  </button>
                `))}
            </div>
          </div>

          <!-- Overall Alignment -->
          <div class="field-group" style="margin-bottom: 24px;">
            <div
              class="field-title"
              style="font-size: 16px !important; font-weight: 600 !important; margin-bottom: 12px;"
            >
              Overall Alignment
            </div>
            <div
              class="control-button-group"
              style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 8px; width: 100%;"
            >
              ${[{value:"left",icon:"mdi:format-align-left"},{value:"center",icon:"mdi:format-align-center"},{value:"right",icon:"mdi:format-align-right"}].map((t=>q`
                  <button
                    type="button"
                    class="control-btn ${d.overall_alignment===t.value?"active":""}"
                    @click=${()=>this._updateEntity(s,0,{overall_alignment:t.value},o)}
                    title="${t.value.charAt(0).toUpperCase()+t.value.slice(1)}"
                  >
                    <ha-icon icon="${t.icon}"></ha-icon>
                  </button>
                `))}
            </div>
          </div>

          <!-- Icon and Content Alignment Side by Side -->
          <div
            style="display: grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); gap: 32px;"
          >
            <!-- Icon Alignment -->
            <div class="field-group">
              <div
                class="field-title"
                style="font-size: 16px !important; font-weight: 600 !important; margin-bottom: 12px;"
              >
                Icon Alignment
              </div>
              <div
                class="control-button-group"
                style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 8px;"
              >
                ${[{value:"start",icon:"mdi:format-align-left"},{value:"center",icon:"mdi:format-align-center"},{value:"end",icon:"mdi:format-align-right"}].map((t=>q`
                    <button
                      type="button"
                      class="control-btn ${d.icon_alignment===t.value?"active":""}"
                      @click=${()=>this._updateEntity(s,0,{icon_alignment:t.value},o)}
                      title="${t.value.charAt(0).toUpperCase()+t.value.slice(1)}"
                    >
                      <ha-icon icon="${t.icon}"></ha-icon>
                    </button>
                  `))}
              </div>
            </div>

            <!-- Content Alignment -->
            <div class="field-group">
              <div
                class="field-title"
                style="font-size: 16px !important; font-weight: 600 !important; margin-bottom: 12px;"
              >
                Content Alignment
              </div>
              <div
                class="control-button-group"
                style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 8px;"
              >
                ${[{value:"start",icon:"mdi:format-align-left"},{value:"center",icon:"mdi:format-align-center"},{value:"end",icon:"mdi:format-align-right"}].map((t=>q`
                    <button
                      type="button"
                      class="control-btn ${d.content_alignment===t.value?"active":""}"
                      @click=${()=>this._updateEntity(s,0,{content_alignment:t.value},o)}
                      title="${t.value.charAt(0).toUpperCase()+t.value.slice(1)}"
                    >
                      <ha-icon icon="${t.icon}"></ha-icon>
                    </button>
                  `))}
              </div>
            </div>
          </div>
        </div>
      </div>
    `}renderActionsTab(t,e,i,o){const n=t;return n.info_entities[0]||this.createDefault().info_entities[0],$t.render(n,e,i,o,(()=>this.injectUcFormStyles()))}renderInfoActionConfig(t,e,i){return q`
      ${this.renderSingleActionConfig("Tap Action","Action when tapping this info entity",t.tap_action||{action:"nothing"},e,(t=>i({tap_action:t})))}
      ${this.renderSingleActionConfig("Hold Action","Action when holding this info entity",t.hold_action||{action:"nothing"},e,(t=>i({hold_action:t})))}
      ${this.renderSingleActionConfig("Double Tap Action","Action when double-tapping this info entity",t.double_tap_action||{action:"nothing"},e,(t=>i({double_tap_action:t})))}
    `}renderSingleActionConfig(t,e,i,o,n){const a={action_config:"nothing"===(null==i?void 0:i.action)?Object.assign(Object.assign({},i),{action:"default"}):i};return q`
      <div style="margin-bottom: 16px;">
        <ha-form
          .hass=${o}
          .data=${a}
          .schema=${[{name:"action_config",label:"",selector:{ui_action:{actions:["default","more-info","toggle","navigate","url","perform-action","assist"]}}}]}
          .computeLabel=${t=>t.label||""}
          @value-changed=${t=>{var e;const i=null===(e=t.detail.value)||void 0===e?void 0:e.action_config;i&&n(i)}}
        ></ha-form>
      </div>
    `}renderPreview(t,e){var i,o;const n=t,a=n,r=n.design||{},s=(t,e)=>null!=t&&""!==t?"string"==typeof t&&t.includes("px")?t:`${t}px`:null!=e?"string"==typeof e&&e.includes("px")?e:`${e}px`:"inherit",l=t=>{if(r.text_align&&"inherit"!==r.text_align)return r.text_align;const e=t.content_alignment;if("start"===e)return"left";if("end"===e)return"right";if("center"===e)return"center";const i=t.overall_alignment;if(!e&&i){if("left"===i)return"left";if("right"===i)return"right";if("center"===i)return"center"}return"center"},d={padding:r.padding_top||r.padding_bottom||r.padding_left||r.padding_right||a.padding_top||a.padding_bottom||a.padding_left||a.padding_right?`${this.addPixelUnit(r.padding_top||a.padding_top)||"8px"} ${this.addPixelUnit(r.padding_right||a.padding_right)||"0px"} ${this.addPixelUnit(r.padding_bottom||a.padding_bottom)||"8px"} ${this.addPixelUnit(r.padding_left||a.padding_left)||"0px"}`:"8px 0",margin:r.margin_top||r.margin_bottom||r.margin_left||r.margin_right||a.margin_top||a.margin_bottom||a.margin_left||a.margin_right?`${this.addPixelUnit(r.margin_top||a.margin_top)||"0px"} ${this.addPixelUnit(r.margin_right||a.margin_right)||"0px"} ${this.addPixelUnit(r.margin_bottom||a.margin_bottom)||"0px"} ${this.addPixelUnit(r.margin_left||a.margin_left)||"0px"}`:"0",background:r.background_color||a.background_color||"transparent",backgroundImage:this.getBackgroundImageCSS(Object.assign(Object.assign({},a),r),e),backgroundSize:"cover",backgroundPosition:"center",backgroundRepeat:"no-repeat",border:(r.border_style||a.border_style)&&"none"!==(r.border_style||a.border_style)?`${r.border_width||a.border_width||"1px"} ${r.border_style||a.border_style} ${r.border_color||a.border_color||"var(--divider-color)"}`:"none",borderRadius:this.addPixelUnit(r.border_radius||a.border_radius)||"0",position:r.position||a.position||"relative",top:r.top||a.top||"auto",bottom:r.bottom||a.bottom||"auto",left:r.left||a.left||"auto",right:r.right||a.right||"auto",zIndex:r.z_index||a.z_index||"auto",width:r.width||a.width||"auto",height:r.height||a.height||"auto",maxWidth:r.max_width||a.max_width||"none",maxHeight:r.max_height||a.max_height||"none",minWidth:r.min_width||a.min_width||"none",minHeight:r.min_height||a.min_height||"auto",overflow:r.overflow||a.overflow||"visible",clipPath:r.clip_path||a.clip_path||"none",backdropFilter:r.backdrop_filter||a.backdrop_filter||"none",boxShadow:(r.box_shadow_h||a.box_shadow_h)&&(r.box_shadow_v||a.box_shadow_v)?`${r.box_shadow_h||a.box_shadow_h||"0"} ${r.box_shadow_v||a.box_shadow_v||"0"} ${r.box_shadow_blur||a.box_shadow_blur||"0"} ${r.box_shadow_spread||a.box_shadow_spread||"0"} ${r.box_shadow_color||a.box_shadow_color||"rgba(0,0,0,0.1)"}`:"none",boxSizing:"border-box"};return q`
      <div class="info-module-container" style=${this.styleObjectToCss(d)}>
        <div class="info-module-preview">
          <div
            class="info-entities"
            style="
            display: grid;
            grid-template-columns: repeat(${n.columns||1}, 1fr);
            gap: ${n.gap||12}px;
            ${(null===(i=n.info_entities[0])||void 0===i?void 0:i.overall_alignment)?`justify-content: ${"left"===n.info_entities[0].overall_alignment?"start":"right"===n.info_entities[0].overall_alignment?"end":"center"};`:"/* No justify-content - allow Global Design tab control */"}
            ${(null===(o=n.info_entities[0])||void 0===o?void 0:o.overall_alignment)?`justify-items: ${"left"===n.info_entities[0].overall_alignment?"start":"right"===n.info_entities[0].overall_alignment?"end":"center"};`:"/* No justify-items - allow Global Design tab control */"}
          "
          >
            ${n.info_entities.slice(0,3).map((t=>{var i,o,a;const d=this.createDefault().info_entities[0];let c=Object.assign(Object.assign({},d),t);c=Object.assign(Object.assign({},c),{icon_position:c.icon_position||"left",overall_alignment:c.overall_alignment||"center",icon_alignment:c.icon_alignment||"center",content_alignment:c.content_alignment||"start"});const p=null==e?void 0:e.states[c.entity];let u;if(c.template_mode&&c.template){if(!this._templateService&&e&&(this._templateService=new kt(e)),e){e.__uvc_template_strings||(e.__uvc_template_strings={});const t=this._hashString(c.template),o=`info_entity_${c.id}_${t}`;this._templateService&&!this._templateService.hasTemplateSubscription(o)&&this._templateService.subscribeToTemplate(c.template,o,(()=>{"undefined"!=typeof window&&window.dispatchEvent(new CustomEvent("ultra-card-template-update"))}));const n=null===(i=e.__uvc_template_strings)||void 0===i?void 0:i[o];u=void 0!==n&&""!==String(n).trim()?String(n):p?p.state:"N/A"}}else u=p?(0,Dt.formatEntityState)(e,c.entity,{includeUnit:!1!==c.show_units}):"N/A";const m=c.name||(null===(o=null==p?void 0:p.attributes)||void 0===o?void 0:o.friendly_name)||c.entity,g=c.icon||(null===(a=null==p?void 0:p.attributes)||void 0===a?void 0:a.icon)||"mdi:help-circle",h=c.icon_position||"left",b=c.icon_alignment||"center",v=(c.content_alignment,c.overall_alignment||"center"),_=c.icon_gap||8,f=!1!==c.show_icon?q`
                      <ha-icon
                        icon="${g}"
                        class="entity-icon"
                        style="color: ${r.color||c.icon_color||"var(--primary-color)"}; --mdc-icon-size: ${y=r.font_size,x=c.icon_size||26,null!=y&&""!==y&&"number"==typeof y?`${y}px`:null!=x?"string"==typeof x&&x.includes("px")?x:`${x}px`:"26px"};"
                      ></ha-icon>
                    `:"";var y,x;const w=q`
                <div
                  class="entity-content"
                  style="
                  align-items: ${(t=>{if(r.text_align&&"inherit"!==r.text_align)return"left"===r.text_align?"flex-start":"right"===r.text_align?"flex-end":"center";const e=t.content_alignment;if("start"===e)return"flex-start";if("end"===e)return"flex-end";if("center"===e)return"center";const i=t.overall_alignment;if(!e&&i){if("left"===i)return"flex-start";if("right"===i)return"flex-end";if("center"===i)return"center"}return"center"})(c)};
                  text-align: ${l(c)};
                "
                >
                  ${!1!==c.show_name?q`
                        <div
                          class="entity-name"
                          style="
                    color: ${r.color||c.name_color||"var(--secondary-text-color)"};
                    font-size: ${s(r.font_size,c.name_size||12)};
                    font-weight: ${r.font_weight||(c.name_bold?"bold":"normal")};
                    font-style: ${r.font_style||(c.name_italic?"italic":"normal")};
                    text-transform: ${r.text_transform||(c.name_uppercase?"uppercase":"none")};
                    text-decoration: ${c.name_strikethrough?"line-through":"none"};
                    font-family: ${r.font_family||"inherit"};
                    line-height: ${r.line_height||"inherit"};
                    letter-spacing: ${r.letter_spacing||"inherit"};
                    text-align: ${l(c)};
                  "
                        >
                          ${m}
                        </div>
                      `:""}
                  ${!1!==c.show_state?q`
                        <div
                          class="entity-value"
                          style="
                        color: ${r.color||c.state_color||c.text_color||"var(--primary-text-color)"};
                        font-size: ${s(r.font_size,c.text_size||14)};
                        font-weight: ${r.font_weight||(c.text_bold?"bold":"normal")};
                        font-style: ${r.font_style||(c.text_italic?"italic":"normal")};
                        text-transform: ${r.text_transform||(c.text_uppercase?"uppercase":"none")};
                        text-decoration: ${c.text_strikethrough?"line-through":"none"};
                        font-family: ${r.font_family||"inherit"};
                        line-height: ${r.line_height||"inherit"};
                        letter-spacing: ${r.letter_spacing||"inherit"};
                        text-align: ${l(c)};
                      "
                        >
                          ${u}
                        </div>
                      `:""}
                </div>
              `;return $t.hasActiveActions(n)?q`<div
                    class="info-entity-clickable position-${h} ${!1!==n.enable_hover_effect?"hover-enabled":""}"
                    style="
                    display: flex;
                    flex-direction: ${"top"===h||"bottom"===h?"column":"row"};
                    align-items: ${"start"===b?"flex-start":"end"===b?"flex-end":"center"};
                    justify-content: ${"left"===v?"flex-start":"right"===v?"flex-end":"center"};
                    gap: ${_}px;
                    padding: 4px;
                    border-radius: 4px;
                    cursor: pointer;
                    user-select: none;
                    -webkit-user-select: none;
                    -moz-user-select: none;
                    -ms-user-select: none;
                    --hover-background: ${n.hover_background_color||"var(--divider-color)"};
                  "
                    @click=${t=>this.handleClick(t,n,e)}
                    @dblclick=${t=>this.handleDoubleClick(t,n,e)}
                    @mousedown=${t=>this.handleMouseDown(t,n,e)}
                    @mouseup=${t=>this.handleMouseUp(t,n,e)}
                    @mouseleave=${t=>this.handleMouseLeave(t,n,e)}
                    @touchstart=${t=>this.handleTouchStart(t,n,e)}
                    @touchend=${t=>this.handleTouchEnd(t,n,e)}
                  >
                    ${"left"===h||"top"===h?q`${f}${w}`:q`${w}${f}`}
                  </div>`:q`<div
                    class="info-entity-item position-${h}"
                    style="
                    display: flex;
                    flex-direction: ${"top"===h||"bottom"===h?"column":"row"};
                    align-items: ${"start"===b?"flex-start":"end"===b?"flex-end":"center"};
                    justify-content: ${"left"===v?"flex-start":"right"===v?"flex-end":"center"};
                    gap: ${_}px;
                    padding: 4px;
                    border-radius: 4px;
                  "
                  >
                    ${"left"===h||"top"===h?q`${f}${w}`:q`${w}${f}`}
                  </div>`}))}
            ${n.info_entities.length>3?q`
                  <div class="more-entities">+${n.info_entities.length-3} more</div>
                `:""}
          </div>
        </div>
      </div>
    `}validate(t){const e=t,i=[...super.validate(t).errors];return e.info_entities&&0!==e.info_entities.length||i.push("At least one info entity is required"),e.info_entities.forEach(((t,e)=>{t.entity&&""!==t.entity.trim()||i.push(`Entity ${e+1}: Entity ID is required`)})),{valid:0===i.length,errors:i}}getStyles(){return`\n      .info-module-preview {\n        padding: 8px;\n        min-height: 40px;\n      }\n      \n      .info-entities {\n        width: 100%;\n      }\n      \n      .info-entity-item {\n        min-width: 0;\n        flex: 1;\n      }\n      \n      .entity-content {\n        display: flex;\n        flex-direction: column;\n        gap: 2px;\n        min-width: 0;\n        flex: 1;\n      }\n      \n      .entity-icon {\n        flex-shrink: 0;\n      }\n      \n      .entity-name {\n        font-size: 12px;\n        line-height: 1.2;\n      }\n      \n      .entity-value {\n        font-size: 14px;\n        font-weight: 500;\n        line-height: 1.2;\n      }\n      \n      .more-entities {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        padding: 8px;\n        color: var(--secondary-text-color);\n        font-size: 12px;\n        font-style: italic;\n      }\n      \n      .info-entities-section,\n      .layout-section {\n        margin-top: 16px;\n        padding-top: 16px;\n        border-top: 1px solid var(--divider-color);\n      }\n      \n      .info-entities-section:first-child {\n        margin-top: 0;\n        padding-top: 0;\n        border-top: none;\n      }\n      \n      .info-entities-section h4,\n      .layout-section h4 {\n        margin: 0 0 12px 0;\n        font-size: 14px;\n        font-weight: 600;\n        color: var(--primary-text-color);\n      }\n      \n      .entity-item {\n        border: 1px solid var(--divider-color);\n        border-radius: 8px;\n        padding: 12px;\n        margin-bottom: 12px;\n        background: var(--card-background-color);\n      }\n      \n      .entity-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        margin-bottom: 12px;\n        font-weight: 500;\n        font-size: 14px;\n      }\n      \n      .remove-entity-btn {\n        background: none;\n        border: none;\n        color: var(--error-color);\n        cursor: pointer;\n        padding: 4px;\n        border-radius: 4px;\n        font-size: 14px;\n      }\n      \n      .remove-entity-btn:disabled {\n        opacity: 0.3;\n        cursor: not-allowed;\n      }\n      \n      .add-entity-btn {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        gap: 8px;\n        width: 100%;\n        padding: 12px;\n        border: 2px dashed var(--primary-color);\n        border-radius: 8px;\n        background: none;\n        color: var(--primary-color);\n        cursor: pointer;\n        font-size: 14px;\n        font-weight: 500;\n      }\n      \n      .add-entity-btn:hover {\n        background: var(--primary-color);\n        color: white;\n      }\n      \n      .entity-display-options {\n        display: grid;\n        grid-template-columns: 1fr 1fr;\n        gap: 8px;\n        margin: 8px 0;\n      }\n      \n      /* Control button styles */\n      .control-btn {\n        padding: 8px 4px;\n        border: 1px solid var(--divider-color);\n        background: var(--card-background-color);\n        color: var(--primary-text-color);\n        border-radius: 4px;\n        cursor: pointer;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        transition: all 0.2s ease;\n        user-select: none;\n        font-size: 10px;\n      }\n      \n      .control-btn:hover:not(.active) {\n        border-color: var(--primary-color) !important;\n        background: var(--primary-color) !important;\n        color: white !important;\n        opacity: 0.8;\n      }\n      \n      .control-btn.active {\n        border-color: var(--primary-color);\n        background: var(--primary-color);\n        color: white;\n      }\n      \n      .control-btn ha-icon {\n        font-size: 14px;\n      }\n      \n      .control-button-group {\n        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n        border-radius: 4px;\n        overflow: hidden;\n      }\n      \n      .control-button-group .control-btn:not(:last-child) {\n        border-right: none;\n      }\n      \n      .control-button-group .control-btn:first-child {\n        border-radius: 4px 0 0 4px;\n      }\n      \n      .control-button-group .control-btn:last-child {\n        border-radius: 0 4px 4px 0;\n      }\n      \n      .control-button-group .control-btn:only-child {\n        border-radius: 4px;\n      }\n      \n      /* Position-specific layout styles */\n      .position-left {\n        flex-direction: row;\n      }\n      \n      .position-right {\n        flex-direction: row-reverse;\n      }\n      \n      .position-top {\n        flex-direction: column;\n      }\n      \n      .position-bottom {\n        flex-direction: column-reverse;\n      }\n\n      /* Gap control styles */\n      .gap-control-container {\n        display: flex;\n        align-items: center;\n        gap: 12px;\n      }\n\n      .gap-slider {\n        flex: 1;\n        height: 6px;\n        background: var(--divider-color);\n        border-radius: 3px;\n        outline: none;\n        appearance: none;\n        -webkit-appearance: none;\n        cursor: pointer;\n        transition: all 0.2s ease;\n      }\n\n      .gap-slider::-webkit-slider-thumb {\n        appearance: none;\n        -webkit-appearance: none;\n        width: 20px;\n        height: 20px;\n        background: var(--primary-color);\n        border-radius: 50%;\n        cursor: pointer;\n        transition: all 0.2s ease;\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n      }\n\n      .gap-slider::-moz-range-thumb {\n        width: 20px;\n        height: 20px;\n        background: var(--primary-color);\n        border-radius: 50%;\n        cursor: pointer;\n        border: none;\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n      }\n\n      .gap-slider:hover {\n        background: var(--primary-color);\n        opacity: 0.7;\n      }\n\n      .gap-slider:hover::-webkit-slider-thumb {\n        transform: scale(1.1);\n      }\n\n      .gap-slider:hover::-moz-range-thumb {\n        transform: scale(1.1);\n      }\n\n      .gap-input {\n        width: 48px !important;\n        max-width: 48px !important;\n        min-width: 48px !important;\n        padding: 4px 6px !important;\n        border: 1px solid var(--divider-color);\n        border-radius: 4px;\n        background: var(--secondary-background-color);\n        color: var(--primary-text-color);\n        font-size: 13px;\n        text-align: center;\n        transition: all 0.2s ease;\n        flex-shrink: 0;\n        box-sizing: border-box;\n      }\n\n      .gap-input:focus {\n        outline: none;\n        border-color: var(--primary-color);\n        box-shadow: 0 0 0 2px rgba(var(--rgb-primary-color), 0.2);\n      }\n\n      .reset-btn {\n        width: 36px;\n        height: 36px;\n        padding: 0;\n        border: 1px solid var(--divider-color);\n        border-radius: 4px;\n        background: var(--secondary-background-color);\n        color: var(--primary-text-color);\n        cursor: pointer;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        transition: all 0.2s ease;\n        flex-shrink: 0;\n      }\n\n      .reset-btn:hover {\n        background: var(--primary-color);\n        color: var(--text-primary-color);\n        border-color: var(--primary-color);\n      }\n\n      .reset-btn ha-icon {\n        font-size: 16px;\n      }\n\n      /* Clickable info entity styles */\n      ${$t.getHoverStyles()}\n    `}hasActiveActions(t){const e=t.tap_action&&"default"!==t.tap_action.action&&"nothing"!==t.tap_action.action,i=t.hold_action&&"default"!==t.hold_action.action&&"nothing"!==t.hold_action.action,o=t.double_tap_action&&"default"!==t.double_tap_action.action&&"nothing"!==t.double_tap_action.action;return e||i||o}handleClick(t,e,i){t.preventDefault(),this.clickTimeout&&clearTimeout(this.clickTimeout),this.clickTimeout=setTimeout((()=>{this.handleTapAction(t,e,i)}),300)}handleDoubleClick(t,e,i){t.preventDefault(),this.clickTimeout&&(clearTimeout(this.clickTimeout),this.clickTimeout=null),this.handleDoubleAction(t,e,i)}handleMouseDown(t,e,i){this.startHold(t,e,i)}handleMouseUp(t,e,i){this.endHold(t,e,i)}handleMouseLeave(t,e,i){this.endHold(t,e,i)}handleTouchStart(t,e,i){this.startHold(t,e,i)}handleTouchEnd(t,e,i){this.endHold(t,e,i)}startHold(t,e,i){this.isHolding=!1,this.holdTimeout=setTimeout((()=>{this.isHolding=!0,this.handleHoldAction(t,e,i)}),500)}endHold(t,e,i){this.holdTimeout&&(clearTimeout(this.holdTimeout),this.holdTimeout=null),this.isHolding=!1}handleTapAction(t,e,i){this.isHolding||e.tap_action&&"default"!==e.tap_action.action&&"nothing"!==e.tap_action.action&&wt.handleAction(e.tap_action,i,t.target)}handleDoubleAction(t,e,i){e.double_tap_action&&"default"!==e.double_tap_action.action&&"nothing"!==e.double_tap_action.action&&wt.handleAction(e.double_tap_action,i,t.target)}handleHoldAction(t,e,i){e.hold_action&&"default"!==e.hold_action.action&&"nothing"!==e.hold_action.action&&wt.handleAction(e.hold_action,i,t.target)}_addEntity(t,e){const i={id:this.generateId("entity"),entity:"weather.forecast_home",name:"Temperature",icon:"mdi:thermometer",show_icon:!0,show_name:!0,show_state:!0,text_size:14,name_size:12,icon_size:26,text_bold:!1,text_italic:!1,text_uppercase:!1,text_strikethrough:!1,name_bold:!1,name_italic:!1,name_uppercase:!1,name_strikethrough:!1,icon_color:"var(--primary-color)",name_color:"var(--secondary-text-color)",text_color:"var(--primary-text-color)",state_color:"var(--primary-text-color)",click_action:"more-info",navigation_path:"",url:"",service:"",service_data:{},template_mode:!1,template:"",dynamic_icon_template_mode:!1,dynamic_icon_template:"",dynamic_color_template_mode:!1,dynamic_color_template:"",icon_position:"left",icon_alignment:"center",content_alignment:"start",overall_alignment:"center",icon_gap:8};e({info_entities:[...t.info_entities,i]})}_removeEntity(t,e,i){if(t.info_entities.length<=1)return;const o=t.info_entities.filter(((t,i)=>i!==e));i({info_entities:o})}_handleEntityChange(t,e,i,o,n){var a;const r={entity:i};if(i&&(null==o?void 0:o.states[i])){const t=(null===(a=o.states[i].attributes)||void 0===a?void 0:a.friendly_name)||i.split(".").pop()||"",e=Lt.getEntityIcon(i,o);r.name=t,e&&(r.icon=e)}this._updateEntity(t,e,r,n)}_updateEntity(t,e,i,o){if(!t.info_entities||0===t.info_entities.length){const e=this.createDefault().info_entities[0];return t.info_entities=[Object.assign(Object.assign({},e),i)],void o({info_entities:t.info_entities})}if(e>=t.info_entities.length){const i=this.createDefault().info_entities[0];for(;t.info_entities.length<=e;)t.info_entities.push(Object.assign({},i))}const n=t.info_entities.map(((t,o)=>o===e?Object.assign(Object.assign({},t),i):t));o({info_entities:n})}getBackgroundImageCSS(t,e){var i,o;if(!t.background_image_type||"none"===t.background_image_type)return"none";switch(t.background_image_type){case"upload":case"url":if(t.background_image)return`url("${t.background_image}")`;break;case"entity":if(t.background_image_entity&&(null==e?void 0:e.states[t.background_image_entity])){const n=e.states[t.background_image_entity];let a="";if((null===(i=n.attributes)||void 0===i?void 0:i.entity_picture)?a=n.attributes.entity_picture:(null===(o=n.attributes)||void 0===o?void 0:o.image)?a=n.attributes.image:n.state&&"string"==typeof n.state&&(n.state.startsWith("/")||n.state.startsWith("http"))&&(a=n.state),a)return a.startsWith("/local/")||a.startsWith("/media/")||a.startsWith("/"),`url("${a}")`}}return"none"}styleObjectToCss(t){return Object.entries(t).map((([t,e])=>`${t.replace(/[A-Z]/g,(t=>`-${t.toLowerCase()}`))}: ${e}`)).join("; ")}addPixelUnit(t){return t?/^\d+$/.test(t)?`${t}px`:/^[\d\s]+$/.test(t)?t.split(" ").map((t=>t.trim()?`${t}px`:t)).join(" "):t:t}_hashString(t){let e=0;for(let i=0;i<t.length;i+=1)e=(e<<5)-e+t.charCodeAt(i),e|=0;return Math.abs(e)}}const Ot=t=>(...e)=>({_$litDirective$:t,values:e});class jt{constructor(t){}get _$AU(){return this._$AM._$AU}_$AT(t,e,i){this._$Ct=t,this._$AM=e,this._$Ci=i}_$AS(t,e){return this.update(t,e)}update(t,e){return this.render(...e)}}const{I:Et}=ct,Ft=()=>document.createComment(""),Ut=(t,e,i)=>{const o=t._$AA.parentNode,n=void 0===e?t._$AB:e._$AA;if(void 0===i){const e=o.insertBefore(Ft(),n),a=o.insertBefore(Ft(),n);i=new Et(e,a,t,t.options)}else{const e=i._$AB.nextSibling,a=i._$AM,r=a!==t;if(r){let e;i._$AQ?.(t),i._$AM=t,void 0!==i._$AP&&(e=t._$AU)!==a._$AU&&i._$AP(e)}if(e!==n||r){let t=i._$AA;for(;t!==e;){const e=t.nextSibling;o.insertBefore(t,n),t=e}}}return i},Rt=(t,e,i=t)=>(t._$AI(e,i),t),Nt={},Ht=t=>{t._$AP?.(!1,!0);let e=t._$AA;const i=t._$AB.nextSibling;for(;e!==i;){const t=e.nextSibling;e.remove(),e=t}},Bt=(t,e,i)=>{const o=new Map;for(let n=e;n<=i;n++)o.set(t[n],n);return o},Wt=Ot(class extends jt{constructor(t){if(super(t),2!==t.type)throw Error("repeat() can only be used in text expressions")}dt(t,e,i){let o;void 0===i?i=e:void 0!==e&&(o=e);const n=[],a=[];let r=0;for(const e of t)n[r]=o?o(e,r):r,a[r]=i(e,r),r++;return{values:a,keys:n}}render(t,e,i){return this.dt(t,e,i).values}update(t,[e,i,o]){const n=(t=>t._$AH)(t),{values:a,keys:r}=this.dt(e,i,o);if(!Array.isArray(n))return this.ut=r,a;const s=this.ut??=[],l=[];let d,c,p=0,u=n.length-1,m=0,g=a.length-1;for(;p<=u&&m<=g;)if(null===n[p])p++;else if(null===n[u])u--;else if(s[p]===r[m])l[m]=Rt(n[p],a[m]),p++,m++;else if(s[u]===r[g])l[g]=Rt(n[u],a[g]),u--,g--;else if(s[p]===r[g])l[g]=Rt(n[p],a[g]),Ut(t,l[g+1],n[p]),p++,g--;else if(s[u]===r[m])l[m]=Rt(n[u],a[m]),Ut(t,n[p],n[u]),u--,m++;else if(void 0===d&&(d=Bt(r,m,g),c=Bt(s,p,u)),d.has(s[p]))if(d.has(s[u])){const e=c.get(r[m]),i=void 0!==e?n[e]:null;if(null===i){const e=Ut(t,n[p]);Rt(e,a[m]),l[m]=e}else l[m]=Rt(i,a[m]),Ut(t,n[p],i),n[e]=null;m++}else Ht(n[u]),u--;else Ht(n[p]),p++;for(;m<=g;){const e=Ut(t,l[g+1]);Rt(e,a[m]),l[m++]=e}for(;p<=u;){const t=n[p++];null!==t&&Ht(t)}return this.ut=r,((t,e=Nt)=>{t._$AH=e})(t,l),X}});var Vt=function(t,e,i,o){var n,a=arguments.length,r=a<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,i):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(t,e,i,o);else for(var s=t.length-1;s>=0;s--)(n=t[s])&&(r=(a<3?n(r):a>3?n(e,i,r):n(e,i))||r);return a>3&&r&&Object.defineProperty(e,i,r),r};function Gt(t,e,i){const o=qt(t),n=qt(e);return o&&n?function(t,e,i){return`#${((1<<24)+(t<<16)+(e<<8)+i).toString(16).slice(1)}`}(Math.round(o.r+(n.r-o.r)*i),Math.round(o.g+(n.g-o.g)*i),Math.round(o.b+(n.b-o.b)*i)):t}function qt(t){const e=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(t);return e?{r:parseInt(e[1],16),g:parseInt(e[2],16),b:parseInt(e[3],16)}:null}let Yt=4,Xt=class extends ut{constructor(){super(...arguments),this.stops=[{id:"1",position:0,color:"#ff0000"},{id:"2",position:50,color:"#ffff00"},{id:"3",position:100,color:"#00ff00"}],this.barSize="regular",this.barRadius="round",this.barStyle="flat",this._draggedIndex=null,this._colorPickerOpen=!1,this._colorPickerStopId=null,this._colorPickerCurrentColor="#000000"}render(){const t=[...this.stops].sort(((t,e)=>t.position-e.position));return q`
      <!-- Action Buttons -->
      <div class="buttons-row">
        <button class="add-button" @click=${this._addStop}>
          <svg class="icon" viewBox="0 0 24 24" fill="currentColor">
            <path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z" />
          </svg>
          Add Stop
        </button>
        <button class="reset-button" @click=${this._resetStops}>
          <svg class="icon" viewBox="0 0 24 24" fill="currentColor">
            <path
              d="M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z"
            />
          </svg>
          Reset
        </button>
      </div>

      <!-- Gradient Stops List -->
      <div class="stops-list ${null!==this._draggedIndex?"drag-active":""}">
        ${Wt(t,(t=>t.id),((e,i)=>this._renderStopItem(e,i,t.length)))}
      </div>

      <!-- Color Picker Popup -->
      ${this._colorPickerOpen?q`
            <div class="color-picker-overlay" @click=${this._closeColorPicker}>
              <div class="color-picker-popup" @click=${t=>t.stopPropagation()}>
                <div class="color-picker-header">
                  <h3>Choose Color</h3>
                  <button class="close-btn" @click=${this._closeColorPicker}>×</button>
                </div>
                <ultra-color-picker
                  .value=${this._colorPickerCurrentColor}
                  .defaultValue=${this._colorPickerCurrentColor}
                  @value-changed=${this._handleColorPickerChange}
                ></ultra-color-picker>
              </div>
            </div>
          `:""}
    `}_renderStopItem(t,e,i){const o=0===t.position||100===t.position,n=this._draggedIndex===e,a=i>2&&!o;return q`
      <div
        class="stop-item ${o?"boundary":""} ${n?"dragging":""}"
        draggable="true"
        @dragstart=${t=>this._handleDragStart(t,e)}
        @dragend=${this._handleDragEnd}
        @dragover=${this._handleDragOver}
        @drop=${t=>this._handleDrop(t,e)}
      >
        <!-- Drag Handle -->
        <div class="drag-handle">
          <svg class="icon" viewBox="0 0 24 24" fill="currentColor">
            <path
              d="M9 3h2v2H9V3zm4 0h2v2h-2V3zM9 7h2v2H9V7zm4 0h2v2h-2V7zm-4 4h2v2H9v-2zm4 0h2v2h-2v-2zm-4 4h2v2H9v-2zm4 0h2v2h-2v-2zm-4 4h2v2H9v-2zm4 0h2v2h-2v-2z"
            />
          </svg>
        </div>

        <!-- Color Preview & Picker -->
        <div
          class="color-preview color-circle"
          style="background-color: ${t.color}; cursor: pointer;"
          @click=${()=>this._openColorPicker(t.id,t.color)}
        ></div>

        <!-- Percentage Input -->
        <input
          type="number"
          class="percentage-input"
          .value=${t.position.toString()}
          min="0"
          max="100"
          @input=${e=>this._handlePositionChange(t.id,parseFloat(e.target.value)||0)}
          @blur=${this._validateAndSortStops}
        />

        <!-- Stop Info -->
        <div class="stop-info">
          <span>${t.position}%</span>
        </div>

        <!-- Delete Button -->
        <button
          class="delete-button"
          ?disabled=${!a}
          @click=${()=>this._deleteStop(t.id)}
          title=${a?"Delete stop":"Cannot delete boundary stops"}
        >
          <svg class="icon" viewBox="0 0 24 24" fill="currentColor">
            <path
              d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"
            />
          </svg>
        </button>
      </div>
    `}_addStop(){const t=function(t){if(!t||t.length<2)return{id:"stop-"+Yt++,position:50,color:"#808080"};const e=[...t].sort(((t,e)=>t.position-e.position));let i=0,o=50,n="#808080";for(let t=0;t<e.length-1;t++){const a=e[t+1].position-e[t].position;a>i&&(i=a,o=e[t].position+a/2,n=Gt(e[t].color,e[t+1].color,.5))}return{id:"stop-"+Yt++,position:Math.round(o),color:n}}(this.stops);this.stops=[...this.stops,t],this._notifyChange()}_resetStops(){this.stops=[{id:"1",position:0,color:"#ff0000"},{id:"2",position:50,color:"#ffff00"},{id:"3",position:100,color:"#00ff00"}],Yt=4,this._notifyChange(),this._dispatchResetEvent()}_deleteStop(t){if(this.stops.length<=2)return;const e=this.stops.find((e=>e.id===t));e&&0!==e.position&&100!==e.position&&(this.stops=this.stops.filter((e=>e.id!==t)),this._notifyChange())}_handleColorChange(t,e){this.stops=this.stops.map((i=>i.id===t?Object.assign(Object.assign({},i),{color:e}):i)),this._notifyChange()}_openColorPicker(t,e){this._colorPickerStopId=t,this._colorPickerCurrentColor=e,this._colorPickerOpen=!0}_closeColorPicker(){this._colorPickerOpen=!1,this._colorPickerStopId=null}_handleColorPickerChange(t){this._colorPickerStopId&&(this._handleColorChange(this._colorPickerStopId,t.detail.value),this._colorPickerCurrentColor=t.detail.value)}_handlePositionChange(t,e){e=Math.max(0,Math.min(100,e)),this.stops=this.stops.map((i=>i.id===t?Object.assign(Object.assign({},i),{position:e}):i)),this.requestUpdate()}_validateAndSortStops(){this.stops=this.stops.map((t=>0===t.position||"1"===t.id&&t.position<50?Object.assign(Object.assign({},t),{position:0}):100===t.position||"3"===t.id&&t.position>50?Object.assign(Object.assign({},t),{position:100}):t)),this._notifyChange()}_notifyChange(){this.dispatchEvent(new CustomEvent("gradient-changed",{detail:{stops:this.stops},bubbles:!0,composed:!0}))}_dispatchResetEvent(){this.dispatchEvent(new CustomEvent("gradient-stop-reset",{bubbles:!0,composed:!0}))}_handleDragStart(t,e){this._draggedIndex=e,t.dataTransfer&&(t.dataTransfer.effectAllowed="move",t.dataTransfer.setData("text/html",e.toString()))}_handleDragEnd(){this._draggedIndex=null}_handleDragOver(t){t.preventDefault(),t.dataTransfer&&(t.dataTransfer.dropEffect="move")}_handleDrop(t,e){if(t.preventDefault(),null===this._draggedIndex||this._draggedIndex===e)return;const i=[...this.stops].sort(((t,e)=>t.position-e.position)),o=i[this._draggedIndex],n=i[e];this.stops=this.stops.map((t=>t.id===o.id?Object.assign(Object.assign({},t),{position:n.position}):t.id===n.id?Object.assign(Object.assign({},t),{position:o.position}):t)),this._draggedIndex=null,this._notifyChange()}};Xt.styles=l`
    :host {
      display: block;
      width: 100%;
      font-family: var(--mdc-typography-body1-font-family, Roboto, sans-serif);
    }

    .gradient-preview {
      width: 100%;
      height: 16px;
      border-radius: 8px;
      border: 1px solid var(--divider-color);
      margin-bottom: 16px;
      position: relative;
      overflow: hidden;
      background-color: var(--card-background-color, #1c1c1c);
      box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.1);
    }

    .gradient-preview-fill {
      width: 100%;
      height: 100%;
      border-radius: inherit;
      position: relative;
    }

    /* Bar size variants to match actual card bars */
    .gradient-preview.bar-size-thin {
      height: 8px;
      border-radius: 4px;
    }

    .gradient-preview.bar-size-regular {
      height: 16px;
      border-radius: 8px;
    }

    .gradient-preview.bar-size-thick {
      height: 24px;
      border-radius: 12px;
    }

    .gradient-preview.bar-size-thiccc {
      height: 32px;
      border-radius: 16px;
    }

    /* Bar radius variants to match actual card bars */
    .gradient-preview.bar-radius-square {
      border-radius: 0;
    }

    .gradient-preview.bar-radius-round {
      /* Uses default border-radius from size classes */
    }

    .gradient-preview.bar-radius-rounded-square.bar-size-thin {
      border-radius: 2px;
    }

    .gradient-preview.bar-radius-rounded-square.bar-size-regular {
      border-radius: 4px;
    }

    .gradient-preview.bar-radius-rounded-square.bar-size-thick {
      border-radius: 6px;
    }

    .gradient-preview.bar-radius-rounded-square.bar-size-thiccc {
      border-radius: 8px;
    }

    .buttons-row {
      display: flex;
      gap: 12px;
      margin-bottom: 20px;
    }

    .add-button,
    .reset-button {
      flex: 1;
      padding: 12px 16px;
      border: none;
      border-radius: 8px;
      font-weight: 500;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 8px;
      transition: all 0.2s ease;
    }

    .add-button {
      background: var(--primary-color);
      color: var(--text-primary-color);
    }

    .add-button:hover {
      background: var(--primary-color);
      opacity: 0.9;
      transform: translateY(-1px);
    }

    .reset-button {
      background: var(--secondary-color, #666);
      color: white;
    }

    .reset-button:hover {
      background: var(--secondary-color, #666);
      opacity: 0.9;
      transform: translateY(-1px);
    }

    .stops-list {
      display: flex;
      flex-direction: column;
      gap: 8px;
    }

    .stop-item {
      display: flex;
      align-items: center;
      gap: 12px;
      padding: 12px;
      background: var(--card-background-color, #1c1c1c);
      border: 1px solid var(--divider-color);
      border-radius: 8px;
      transition: all 0.2s ease;
    }

    .stop-item:hover {
      border-color: var(--primary-color);
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
    }

    .stop-item.dragging {
      opacity: 0.7;
      transform: scale(1.02);
      z-index: 1000;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
    }

    .drag-handle {
      width: 20px;
      height: 20px;
      cursor: grab;
      color: var(--secondary-text-color);
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .drag-handle:hover {
      color: var(--primary-text-color);
    }

    .drag-handle:active {
      cursor: grabbing;
    }

    .color-preview {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      border: 2px solid var(--divider-color);
      cursor: pointer;
      transition: all 0.2s ease;
      position: relative;
      overflow: hidden;
    }

    .color-preview:hover {
      border-color: var(--primary-color);
      transform: scale(1.1);
    }

    .percentage-input {
      width: 80px;
      padding: 8px 12px;
      border: 1px solid var(--divider-color);
      border-radius: 6px;
      background: var(--secondary-background-color);
      color: var(--primary-text-color);
      text-align: center;
      font-weight: 500;
    }

    .percentage-input:focus {
      border-color: var(--primary-color);
      outline: none;
      box-shadow: 0 0 0 2px rgba(var(--rgb-primary-color), 0.2);
    }

    .stop-info {
      flex: 1;
      display: flex;
      align-items: center;
      gap: 8px;
      color: var(--secondary-text-color);
      font-size: 14px;
    }

    .delete-button {
      width: 32px;
      height: 32px;
      border: none;
      background: transparent;
      cursor: pointer;
      color: var(--secondary-text-color);
      border-radius: 6px;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: all 0.2s ease;
    }

    .delete-button:hover {
      background: rgba(var(--rgb-error-color, 244, 67, 54), 0.1);
      color: var(--error-color, #f44336);
    }

    .delete-button:disabled {
      opacity: 0.3;
      cursor: not-allowed;
    }

    .stop-item.boundary .delete-button {
      opacity: 0.3;
      cursor: not-allowed;
    }

    .icon {
      width: 18px;
      height: 18px;
    }

    /* Drag and drop styling */
    .stops-list.drag-active .stop-item:not(.dragging) {
      transition: transform 0.2s ease;
    }

    /* Color Circle Styling */
    .color-circle {
      border: 3px solid var(--divider-color);
      transition: all 0.2s ease;
    }

    .color-circle:hover {
      border-color: var(--primary-color);
      transform: scale(1.15);
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
    }

    /* Color Picker Popup */
    .color-picker-overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(0, 0, 0, 0.5);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 1000;
      backdrop-filter: blur(2px);
    }

    .color-picker-popup {
      background: var(--card-background-color);
      border-radius: 12px;
      padding: 24px;
      max-width: 400px;
      width: 90%;
      max-height: 80vh;
      overflow-y: auto;
      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
      border: 1px solid var(--divider-color);
    }

    .color-picker-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 16px;
      padding-bottom: 12px;
      border-bottom: 1px solid var(--divider-color);
    }

    .color-picker-header h3 {
      margin: 0;
      font-size: 18px;
      font-weight: 600;
      color: var(--primary-text-color);
    }

    .close-btn {
      background: none;
      border: none;
      font-size: 24px;
      cursor: pointer;
      color: var(--secondary-text-color);
      padding: 4px;
      border-radius: 4px;
      transition: all 0.2s ease;
    }

    .close-btn:hover {
      background: var(--divider-color);
      color: var(--primary-text-color);
    }
  `,Vt([vt({type:Array})],Xt.prototype,"stops",void 0),Vt([vt({type:String})],Xt.prototype,"barSize",void 0),Vt([vt({type:String})],Xt.prototype,"barRadius",void 0),Vt([vt({type:String})],Xt.prototype,"barStyle",void 0),Vt([_t()],Xt.prototype,"_draggedIndex",void 0),Vt([_t()],Xt.prototype,"_colorPickerOpen",void 0),Vt([_t()],Xt.prototype,"_colorPickerStopId",void 0),Vt([_t()],Xt.prototype,"_colorPickerCurrentColor",void 0),Xt=Vt([gt("uc-gradient-editor")],Xt);class Jt extends xt{constructor(){super(...arguments),this.metadata={type:"bar",title:"Bars",description:"Progress bars for values",author:"WJD Designs",version:"1.0.0",icon:"mdi:chart-bar",category:"data",tags:["bar","progress","chart","value","sensor"]}}createDefault(t,e){const i=this.findSuitableBatterySensor(e);return{id:t||this.generateId("bar"),type:"bar",entity:i||"",percentage_type:"entity",percentage_entity:"",percentage_attribute_entity:"",percentage_attribute_name:"",percentage_current_entity:"",percentage_total_entity:"",percentage_template:"",height:20,bar_size:"medium",bar_radius:"round",bar_style:"flat",bar_width:100,bar_alignment:"center",border_radius:10,label_alignment:"space-between",show_percentage:!0,percentage_text_size:14,percentage_text_alignment:"center",show_value:!0,value_position:"inside",left_title:"",left_entity:"",left_condition_type:"none",left_condition_entity:"",left_condition_state:"",left_template_mode:!1,left_template:"",left_title_size:14,left_value_size:14,left_title_color:"",left_value_color:"",left_enabled:!1,right_title:"",right_entity:"",right_enabled:!1,right_condition_type:"none",right_condition_entity:"",right_condition_state:"",right_template_mode:!1,right_template:"",right_title_size:14,right_value_size:14,right_title_color:"",right_value_color:"",bar_color:"",bar_background_color:"var(--secondary-background-color)",bar_border_color:"",percentage_text_color:"",use_gradient:!1,gradient_display_mode:"full",gradient_stops:[{id:"1",position:0,color:"#ff0000"},{id:"2",position:50,color:"#ffff00"},{id:"3",position:100,color:"#00ff00"}],limit_entity:"",limit_color:"",animation:!0,template_mode:!1,template:"",bar_animation_enabled:!1,bar_animation_entity:"",bar_animation_trigger_type:"state",bar_animation_attribute:"",bar_animation_value:"",bar_animation_type:"none",bar_animation_override_entity:"",bar_animation_override_trigger_type:"state",bar_animation_override_attribute:"",bar_animation_override_value:"",bar_animation_override_type:"none",tap_action:{action:"nothing"},hold_action:{action:"nothing"},double_tap_action:{action:"nothing"},enable_hover_effect:!0,hover_background_color:"var(--divider-color)"}}findSuitableBatterySensor(t){if(!t||!t.states)return"";const e=["battery_level","battery","charge","power_level","fuel_level","energy"],i=["battery","energy","power"],o=["sensor","binary_sensor"],n=[];return Object.keys(t.states).forEach((a=>{const r=t.states[a],s=a.split(".")[0];if(!o.includes(s))return;if("binary_sensor"===s)return;const l=r.attributes||{},d=l.friendly_name||a,c=l.device_class,p=l.unit_of_measurement,u=parseFloat(r.state);if(isNaN(u)||u<0||u>100)return;if("unavailable"===r.state||"unknown"===r.state)return;let m=0;i.includes(c)&&(m+=100),"%"===p&&(m+=80),e.forEach((t=>{a.toLowerCase().includes(t)&&(m+=50)})),e.forEach((t=>{d.toLowerCase().includes(t)&&(m+=40)})),a.includes("battery")&&"%"===p&&(m+=60),(a.includes("phone")||a.includes("mobile")||a.includes("device"))&&(a.includes("battery")||"battery"===c)&&(m+=30),m>0&&n.push({entity:a,score:m,friendlyName:d})})),n.length>0?(n.sort(((t,e)=>e.score-t.score)),console.log("Battery sensor candidates found:",n.slice(0,5)),n[0].entity):(console.log("No suitable battery sensors found for auto-detection"),"")}renderGeneralTab(t,e,i,o){var n,a,r;const s=t;return q`
      ${this.injectUcFormStyles()}
      <div class="module-general-settings">
        <!-- Bar Settings -->
        ${this.renderSettingsSection("Bar Settings","Configure how the bar percentage is calculated and displayed.",[])}
        <div class="field-group percentage-type-group" style="margin-top: -16px; margin-bottom: 16px;">
          <ha-form
            .hass=${e}
            .data=${{percentage_type:s.percentage_type||"entity"}}
            .schema=${[this.selectField("percentage_type",[{value:"entity",label:"Entity (0-100)"},{value:"attribute",label:"Entity Attribute"},{value:"difference",label:"Difference"},{value:"template",label:"Template"}])]}
            .computeLabel=${()=>""}
            .computeDescription=${()=>""}
            @value-changed=${t=>o(t.detail.value)}
          ></ha-form>
        </div>

          <!-- Entity Attribute Fields -->
          ${"attribute"===s.percentage_type?this.renderConditionalFieldsGroup("Entity Attribute Configuration",q`
                    ${this.renderSettingsSection("Entity Attribute Configuration","Configure entity attribute settings",[{title:"Attribute Entity",description:"Select the entity that contains the attribute with the percentage value",hass:e,data:{percentage_attribute_entity:s.percentage_attribute_entity||""},schema:[this.entityField("percentage_attribute_entity")],onChange:t=>o({percentage_attribute_entity:t.detail.value.percentage_attribute_entity})},{title:"Attribute Name",description:'Enter the name of the attribute that contains the percentage value (e.g., "battery_level")',hass:e,data:{percentage_attribute_name:s.percentage_attribute_name||""},schema:[this.textField("percentage_attribute_name")],onChange:t=>o({percentage_attribute_name:t.detail.value.percentage_attribute_name})}])}
                  `):""}

          <!-- Difference Fields -->
          ${"difference"===s.percentage_type?this.renderConditionalFieldsGroup("Difference Calculation Configuration",q`
                    ${this.renderSettingsSection("Difference Calculation Configuration","Configure difference calculation settings",[{title:"Current Value Entity",description:"Entity representing the current/used amount (e.g., fuel used, battery consumed)",hass:e,data:{percentage_current_entity:s.percentage_current_entity||""},schema:[this.entityField("percentage_current_entity")],onChange:t=>o({percentage_current_entity:t.detail.value.percentage_current_entity})},{title:"Total Value Entity",description:"Entity representing the total/maximum amount (e.g., fuel capacity, battery capacity)",hass:e,data:{percentage_total_entity:s.percentage_total_entity||""},schema:[this.entityField("percentage_total_entity")],onChange:t=>o({percentage_total_entity:t.detail.value.percentage_total_entity})}])}
                  `):""}

          <!-- Template Field -->
          ${"template"===s.percentage_type?this.renderConditionalFieldsGroup("Template Configuration",q`
                    ${this.renderSettingsSection("Template Configuration","Configure template settings",[{title:"Percentage Template",description:"Enter a Jinja2 template that returns a number between 0-100 for the percentage. Example: {{ (states('sensor.battery_level') | float) * 100 }}",hass:e,data:{percentage_template:s.percentage_template||""},schema:[this.textField("percentage_template",!0)],onChange:t=>o({percentage_template:t.detail.value.percentage_template})}])}
                  `):""}

          <!-- Bar Percentage Entity -->
          <div style="margin-top: 24px;">
            ${Ct.renderField("Bar Percentage Entity",s.entity?"The entity that provides the percentage value for the bar.":"Select an entity that provides a percentage value (0-100). Battery sensors are ideal for bars.",e,{entity:s.entity||""},[Ct.createSchemaItem("entity",{entity:{filter:[{domain:"sensor"},{domain:"input_number"}]}})],(t=>o({entity:t.detail.value.entity})))}
            ${s.entity?"":q`
                    <div
                      style="color: var(--warning-color); font-size: 12px; margin-top: 4px; font-style: italic;"
                    >
                      <ha-icon
                        icon="mdi:information-outline"
                        style="font-size: 14px; margin-right: 4px;"
                      ></ha-icon>
                      No entity selected - Please choose a sensor with values between 0-100
                    </div>
                  `}
          </div>

          <!-- Limit Value Entity -->
          <div style="margin-top: 24px;">
            ${Ct.renderField("Limit Value Entity (optional)","Optional: Add a vertical indicator line on the bar (e.g. charge limit for EV battery).",e,{limit_entity:s.limit_entity||""},[Ct.createSchemaItem("limit_entity",{entity:{}})],(t=>o({limit_entity:t.detail.value.limit_entity})))}
          </div>
        </div>

        <!-- Bar Appearance Section -->
        <div
          class="settings-section"
          style="background: var(--secondary-background-color); border-radius: 8px; padding: 16px; margin-top: 16px; margin-bottom: 32px;"
        >
          <div
            class="section-title"
            style="font-size: 18px; font-weight: 700; text-transform: uppercase; color: var(--primary-color); margin-bottom: 16px; padding-bottom: 0; border-bottom: none; letter-spacing: 0.5px;"
          >
            Bar Appearance
          </div>

          <!-- Bar Height -->
          <div class="field-container" style="margin-bottom: 24px;">
            <div class="field-title">Bar Height</div>
            <div class="field-description">Adjust the thickness of the progress bar in pixels.</div>
            <style>
              .number-range-control {
                display: flex;
                gap: 8px;
                align-items: center;
              }
              .range-slider {
                flex: 0 0 65%;
              }
            </style>
            <div class="number-range-control">
              <input
                type="range"
                class="range-slider"
                min="8"
                max="60"
                step="2"
                .value="${null!==(n=s.height)&&void 0!==n?n:20}"
                @input=${t=>{const e=t.target,i=parseInt(e.value);o({height:i})}}
              />
              <input
                type="number"
                class="range-input"
                min="8"
                max="60"
                step="2"
                .value="${null!==(a=s.height)&&void 0!==a?a:20}"
                @input=${t=>{const e=t.target,i=parseInt(e.value);isNaN(i)||o({height:i})}}
                @keydown=${t=>{if("ArrowUp"===t.key||"ArrowDown"===t.key){t.preventDefault();const e=t.target,i=parseInt(e.value)||20,n="ArrowUp"===t.key?2:-2,a=Math.max(8,Math.min(60,i+n));o({height:a})}}}
              />
              <button
                class="range-reset-btn"
                @click=${()=>o({height:20})}
                title="Reset to default (20px)"
              >
                <ha-icon icon="mdi:refresh"></ha-icon>
              </button>
            </div>
          </div>

          <!-- Border Radius -->
          <div class="field-container" style="margin-bottom: 24px;">
            <div class="field-title">Border Radius</div>
            <div class="field-description">Control the rounded corners of the bar.</div>
            <div class="number-range-control">
              <input
                type="range"
                class="range-slider"
                min="0"
                max="50"
                step="1"
                .value="${s.border_radius||10}"
                @input=${t=>{const e=t.target,i=parseInt(e.value);o({border_radius:i})}}
              />
              <input
                type="number"
                class="range-input"
                min="0"
                max="50"
                step="1"
                .value="${s.border_radius||10}"
                @input=${t=>{const e=t.target,i=parseInt(e.value);isNaN(i)||o({border_radius:i})}}
                @keydown=${t=>{if("ArrowUp"===t.key||"ArrowDown"===t.key){t.preventDefault();const e=t.target,i=parseInt(e.value)||10,n="ArrowUp"===t.key?1:-1,a=Math.max(0,Math.min(50,i+n));o({border_radius:a})}}}
              />
              <button
                class="range-reset-btn"
                @click=${()=>o({border_radius:10})}
                title="Reset to default (10)"
              >
                <ha-icon icon="mdi:refresh"></ha-icon>
              </button>
            </div>
          </div>

          <!-- Bar Style -->
          <div class="field-group" style="margin-bottom: 16px;">
            ${Ct.renderField("Bar Style","Choose the visual style of the progress bar.",e,{bar_style:s.bar_style||"flat"},[Ct.createSchemaItem("bar_style",{select:{options:[{value:"flat",label:"Flat (Default)"},{value:"glossy",label:"Glossy"},{value:"embossed",label:"Embossed"},{value:"inset",label:"Inset"},{value:"gradient-overlay",label:"Gradient Overlay"},{value:"neon-glow",label:"Neon Glow"},{value:"outline",label:"Outline"},{value:"glass",label:"Glass"},{value:"metallic",label:"Metallic"},{value:"neumorphic",label:"Neumorphic"},{value:"dashed",label:"Dashed"},{value:"dots",label:"Dots"}],mode:"dropdown"}})],(t=>o({bar_style:t.detail.value.bar_style})))}
          </div>

          <!-- Bar Width -->
          <div class="field-container" style="margin-bottom: 24px;">
            <div class="field-title">Bar Width</div>
            <div class="field-description">
              Set the width of the bar as a percentage of the container.
            </div>
            <div class="number-range-control">
              <input
                type="range"
                class="range-slider"
                min="10"
                max="100"
                step="5"
                .value="${s.bar_width||100}"
                @input=${t=>{const e=t.target,i=parseInt(e.value);o({bar_width:i})}}
              />
              <input
                type="number"
                class="range-input"
                min="10"
                max="100"
                step="5"
                .value="${s.bar_width||100}"
                @input=${t=>{const e=t.target,i=parseInt(e.value);isNaN(i)||o({bar_width:i})}}
                @keydown=${t=>{if("ArrowUp"===t.key||"ArrowDown"===t.key){t.preventDefault();const e=t.target,i=parseInt(e.value)||100,n="ArrowUp"===t.key?5:-5,a=Math.max(10,Math.min(100,i+n));o({bar_width:a})}}}
              />
              <button
                class="range-reset-btn"
                @click=${()=>o({bar_width:100})}
                title="Reset to default (100)"
              >
                <ha-icon icon="mdi:refresh"></ha-icon>
              </button>
            </div>
          </div>

          <!-- Bar Alignment with Icons -->
          ${(s.bar_width||100)<100?q`
                  <div class="field-group" style="margin-bottom: 16px;">
                    <div
                      class="field-title"
                      style="font-size: 16px !important; font-weight: 600 !important;"
                    >
                      Bar Alignment
                    </div>
                    <div
                      class="field-description"
                      style="font-size: 13px !important; font-weight: 400 !important; margin-bottom: 8px;"
                    >
                      Choose how to align the bar when it's less than 100% width.
                    </div>
                    <div
                      style="display: flex; gap: 8px; justify-content: flex-start; flex-wrap: wrap;"
                    >
                      <button
                        type="button"
                        style="padding: 8px 12px; border: 2px solid ${"left"===(s.bar_alignment||"center")?"var(--primary-color)":"var(--divider-color)"}; background: ${"left"===(s.bar_alignment||"center")?"var(--primary-color)":"transparent"}; color: ${"left"===(s.bar_alignment||"center")?"white":"var(--primary-text-color)"}; border-radius: 6px; cursor: pointer; display: flex; align-items: center; gap: 4px; flex: 1; min-width: 0; box-sizing: border-box;"
                        @click=${()=>o({bar_alignment:"left"})}
                      >
                        <ha-icon
                          icon="mdi:format-align-left"
                          style="font-size: 16px; flex-shrink: 0;"
                        ></ha-icon>
                        <span
                          style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                          >Left</span
                        >
                      </button>
                      <button
                        type="button"
                        style="padding: 8px 12px; border: 2px solid ${"center"===(s.bar_alignment||"center")?"var(--primary-color)":"var(--divider-color)"}; background: ${"center"===(s.bar_alignment||"center")?"var(--primary-color)":"transparent"}; color: ${"center"===(s.bar_alignment||"center")?"white":"var(--primary-text-color)"}; border-radius: 6px; cursor: pointer; display: flex; align-items: center; gap: 4px; flex: 1; min-width: 0; box-sizing: border-box;"
                        @click=${()=>o({bar_alignment:"center"})}
                      >
                        <ha-icon
                          icon="mdi:format-align-center"
                          style="font-size: 16px; flex-shrink: 0;"
                        ></ha-icon>
                        <span
                          style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                          >Center</span
                        >
                      </button>
                      <button
                        type="button"
                        style="padding: 8px 12px; border: 2px solid ${"right"===(s.bar_alignment||"center")?"var(--primary-color)":"var(--divider-color)"}; background: ${"right"===(s.bar_alignment||"center")?"var(--primary-color)":"transparent"}; color: ${"right"===(s.bar_alignment||"center")?"white":"var(--primary-text-color)"}; border-radius: 6px; cursor: pointer; display: flex; align-items: center; gap: 4px; flex: 1; min-width: 0; box-sizing: border-box;"
                        @click=${()=>o({bar_alignment:"right"})}
                      >
                        <ha-icon
                          icon="mdi:format-align-right"
                          style="font-size: 16px; flex-shrink: 0;"
                        ></ha-icon>
                        <span
                          style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                          >Right</span
                        >
                      </button>
                    </div>
                  </div>
                `:""}

          <!-- Label Alignment -->
          ${s.left_enabled||s.right_enabled?q`
                  <div class="field-group">
                    <div
                      class="field-title"
                      style="font-size: 16px !important; font-weight: 600 !important;"
                    >
                      Label Alignment
                    </div>
                    <div
                      class="field-description"
                      style="font-size: 13px !important; font-weight: 400 !important; margin-bottom: 8px;"
                    >
                      Control how the left and right side labels are positioned.
                    </div>
                    <ha-form
                      .hass=${e}
                      .data=${{label_alignment:s.label_alignment||"space-between"}}
                      .schema=${[{name:"label_alignment",selector:{select:{options:[{value:"left",label:"Left"},{value:"center",label:"Center"},{value:"right",label:"Right"},{value:"space-between",label:"Space Between"}],mode:"dropdown"}},label:""}]}
                      .computeLabel=${()=>""}
                      @value-changed=${t=>o({label_alignment:t.detail.value.label_alignment})}
                    ></ha-form>
                  </div>
                `:""}
        </div>

        <!-- Percentage Text Display Section -->
        <div
          class="settings-section"
          style="background: var(--secondary-background-color); border-radius: 8px; padding: 16px; margin-bottom: 32px;"
        >
          <div style="display: flex; align-items: center; justify-content: space-between; gap: 12px; margin-bottom: 16px;">
            <div
              class="section-title"
              style="font-size: 18px; font-weight: 700; text-transform: uppercase; color: var(--primary-color); padding-bottom: 0; border-bottom: none; letter-spacing: 0.5px; margin: 0;"
            >
              Percentage Text Display
            </div>
            <ha-switch
              .checked=${!1!==s.show_percentage}
              @change=${t=>o({show_percentage:t.target.checked})}
            ></ha-switch>
          </div>
          <div
            class="field-description"
            style="font-size: 13px; font-weight: 400; margin-bottom: 16px;"
          >
            Control the visibility and appearance of percentage values shown directly on the bar.
            These numbers provide a clear visual indicator of the current level.
          </div>

          

          ${!1!==s.show_percentage?q`
                  <div class="field-container" style="margin-bottom: 24px;">
                    <div class="field-title">Text Size</div>
                    <div class="field-description">
                      Adjust the size of the percentage text displayed on the bar.
                    </div>
                    <div class="number-range-control">
                      <input
                        type="range"
                        class="range-slider"
                        min="8"
                        max="32"
                        step="1"
                        .value="${s.percentage_text_size||14}"
                        @input=${t=>{const e=t.target,i=parseInt(e.value);o({percentage_text_size:i})}}
                      />
                      <input
                        type="number"
                        class="range-input"
                        min="8"
                        max="32"
                        step="1"
                        .value="${s.percentage_text_size||14}"
                        @input=${t=>{const e=t.target,i=parseInt(e.value);isNaN(i)||o({percentage_text_size:i})}}
                        @keydown=${t=>{if("ArrowUp"===t.key||"ArrowDown"===t.key){t.preventDefault();const e=t.target,i=parseInt(e.value)||14,n="ArrowUp"===t.key?1:-1,a=Math.max(8,Math.min(32,i+n));o({percentage_text_size:a})}}}
                      />
                      <button
                        class="range-reset-btn"
                        @click=${()=>o({percentage_text_size:14})}
                        title="Reset to default (14)"
                      >
                        <ha-icon icon="mdi:refresh"></ha-icon>
                      </button>
                    </div>
                  </div>
                  <div class="field-group" style="margin-bottom: 16px;">
                    <div class="field-title">Percentage Text Alignment</div>
                    <ha-form
                      .hass=${e}
                      .data=${{percentage_text_alignment:s.percentage_text_alignment||"center"}}
                      .schema=${[{name:"percentage_text_alignment",selector:{select:{options:[{value:"left",label:"Left"},{value:"center",label:"Center"},{value:"right",label:"Right"}],mode:"dropdown"}},label:""}]}
                      .computeLabel=${()=>""}
                      @value-changed=${t=>o({percentage_text_alignment:t.detail.value.percentage_text_alignment})}
                    ></ha-form>
                  </div>
                `:""}
        </div>

        <!-- Left Side Section -->
        <div
          class="settings-section"
          style="background: var(--secondary-background-color); border-radius: 8px; padding: 16px; margin-bottom: 32px;"
        >
          <div
            style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 16px; padding-bottom: 0; border-bottom: none;"
          >
            <div
              class="section-title"
              style="font-size: 18px; font-weight: 700; text-transform: uppercase; color: var(--primary-color); letter-spacing: 0.5px;"
            >
              Left Side
            </div>
            <ha-switch
              .checked=${s.left_enabled||!1}
              @change=${t=>{const e=t.target.checked;o(e?{left_enabled:!0,left_title:s.left_title||"Fuel",left_entity:s.left_entity||"",left_template_mode:s.left_template_mode||!1,left_title_size:s.left_title_size||14,left_value_size:s.left_value_size||14,left_title_color:s.left_title_color||"var(--primary-text-color)",left_value_color:s.left_value_color||"var(--primary-text-color)"}:{left_enabled:!1,left_title:"",left_entity:"",left_template_mode:!1,left_template:""})}}
            ></ha-switch>
          </div>

          <div
            class="field-description"
            style="font-size: 13px !important; font-weight: 400 !important; margin-bottom: 16px;"
          >
            Configure the title and entity value displayed on the left side of the bar. This is
            useful for showing labels like 'Range' or 'Battery' along with their values.
          </div>

          ${s.left_enabled?q`
                  <div class="field-group" style="margin-bottom: 16px;">
                    <ha-form
                      .hass=${e}
                      .data=${{left_title:s.left_title||""}}
                      .schema=${[{name:"left_title",selector:{text:{}},label:""}]}
                      .computeLabel=${()=>""}
                      @value-changed=${t=>o({left_title:t.detail.value.left_title})}
                    ></ha-form>
                  </div>

                  <!-- Left Entity (value source) -->
                  <div class="field-group" style="margin-bottom: 16px;">
                    <ha-form
                      .hass=${e}
                      .data=${{left_entity:s.left_entity||""}}
                      .schema=${[{name:"left_entity",selector:{entity:{}},label:""}]}
                      .computeLabel=${()=>""}
                      @value-changed=${t=>o({left_entity:t.detail.value.left_entity})}
                    ></ha-form>
                  </div>

                  <div class="field-container" style="margin-bottom: 24px;">
                    <div class="field-title">Title Size</div>
                    <div class="number-range-control">
                      <input
                        type="range"
                        class="range-slider"
                        min="8"
                        max="32"
                        step="1"
                        .value="${s.left_title_size||14}"
                        @input=${t=>{const e=t.target,i=parseInt(e.value);o({left_title_size:i})}}
                      />
                      <input
                        type="number"
                        class="range-input"
                        min="8"
                        max="32"
                        step="1"
                        .value="${s.left_title_size||14}"
                        @input=${t=>{const e=t.target,i=parseInt(e.value);isNaN(i)||o({left_title_size:i})}}
                        @keydown=${t=>{if("ArrowUp"===t.key||"ArrowDown"===t.key){t.preventDefault();const e=t.target,i=parseInt(e.value)||14,n="ArrowUp"===t.key?1:-1,a=Math.max(8,Math.min(32,i+n));o({left_title_size:a})}}}
                      />
                      <button
                        class="range-reset-btn"
                        @click=${()=>o({left_title_size:14})}
                        title="Reset to default (14)"
                      >
                        <ha-icon icon="mdi:refresh"></ha-icon>
                      </button>
                    </div>
                  </div>

                  <div class="field-container" style="margin-bottom: 24px;">
                    <div class="field-title">Value Size</div>
                    <div class="number-range-control">
                      <input
                        type="range"
                        class="range-slider"
                        min="8"
                        max="32"
                        step="1"
                        .value="${s.left_value_size||14}"
                        @input=${t=>{const e=t.target,i=parseInt(e.value);o({left_value_size:i})}}
                      />
                      <input
                        type="number"
                        class="range-input"
                        min="8"
                        max="32"
                        step="1"
                        .value="${s.left_value_size||14}"
                        @input=${t=>{const e=t.target,i=parseInt(e.value);isNaN(i)||o({left_value_size:i})}}
                        @keydown=${t=>{if("ArrowUp"===t.key||"ArrowDown"===t.key){t.preventDefault();const e=t.target,i=parseInt(e.value)||14,n="ArrowUp"===t.key?1:-1,a=Math.max(8,Math.min(32,i+n));o({left_value_size:a})}}}
                      />
                      <button
                        class="range-reset-btn"
                        @click=${()=>o({left_value_size:14})}
                        title="Reset to default (14)"
                      >
                        <ha-icon icon="mdi:refresh"></ha-icon>
                      </button>
                    </div>
                  </div>
                  <!-- Left Template Mode -->
                  <div
                    class="field-group"
                    style="margin-bottom: 8px; display: grid !important; grid-template-columns: minmax(0,1fr) auto; align-items: center; column-gap: 12px; width: 100%;"
                  >
                    <div
                      class="field-title"
                      style="font-size: 16px !important; font-weight: 600 !important; margin: 0; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;"
                    >
                      Template Mode
                    </div>
                    <ha-switch
                      style="justify-self: end;"
                      .checked=${s.left_template_mode||!1}
                      @change=${t=>o({left_template_mode:t.target.checked})}
                    ></ha-switch>
                  </div>
                  ${s.left_template_mode?q`
                        <div
                          class="field-description"
                          style="font-size: 13px !important; font-weight: 400 !important; margin-bottom: 8px;"
                        >
                          Use a template to format the displayed value. Templates use Home
                          Assistant's Jinja2 syntax.
                        </div>
                        <div class="field-group" style="margin-bottom: 0;">
                          <ha-form
                            .hass=${e}
                            .data=${{left_template:s.left_template||""}}
                            .schema=${[{name:"left_template",label:"Value Template",description:"Template to format the left-side value using Jinja2 syntax",selector:{text:{multiline:!0}}}]}
                            .computeLabel=${t=>t.label||t.name}
                            .computeDescription=${t=>t.description||""}
                            @value-changed=${t=>o({left_template:t.detail.value.left_template})}
                          ></ha-form>
                        </div>
                      `:""}
                `:q`
                  <div
                    style="text-align: center; padding: 20px; color: var(--secondary-text-color); font-style: italic;"
                  >
                    Enable the toggle above to configure left side settings
                  </div>
                `}
        </div>

        <!-- Right Side Section -->
        <div
          class="settings-section"
          style="background: var(--secondary-background-color); border-radius: 8px; padding: 16px; margin-bottom: 32px;"
        >
          <div
            style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 16px; padding-bottom: 0; border-bottom: none;"
          >
            <div
              class="section-title"
              style="font-size: 18px; font-weight: 700; text-transform: uppercase; color: var(--primary-color); letter-spacing: 0.5px;"
            >
              Right Side
            </div>
            <ha-switch
              .checked=${s.right_enabled||!1}
              @change=${t=>{const e=t.target.checked;o(e?{right_enabled:!0,right_title:s.right_title||"Range",right_entity:s.right_entity||"",right_template_mode:s.right_template_mode||!1,right_title_size:s.right_title_size||14,right_value_size:s.right_value_size||14,right_title_color:s.right_title_color||"var(--primary-text-color)",right_value_color:s.right_value_color||"var(--primary-text-color)"}:{right_enabled:!1,right_title:"",right_entity:"",right_template_mode:!1,right_template:""})}}
            ></ha-switch>
          </div>

          <div
            class="field-description"
            style="font-size: 13px !important; font-weight: 400 !important; margin-bottom: 16px;"
          >
            Configure the title and entity value displayed on the right side of the bar. This is
            ideal for complementary information like 'Time to Full' or secondary measurements.
          </div>

          ${s.right_enabled?q`
                  <div class="field-group" style="margin-bottom: 16px;">
                    <ha-form
                      .hass=${e}
                      .data=${{right_title:s.right_title||""}}
                      .schema=${[{name:"right_title",selector:{text:{}},label:""}]}
                      .computeLabel=${()=>""}
                      @value-changed=${t=>o({right_title:t.detail.value.right_title})}
                    ></ha-form>
                  </div>
                  <div class="field-group" style="margin-bottom: 16px;">
                    <ha-form
                      .hass=${e}
                      .data=${{right_entity:s.right_entity||""}}
                      .schema=${[{name:"right_entity",selector:{entity:{}},label:""}]}
                      .computeLabel=${()=>""}
                      @value-changed=${t=>o({right_entity:t.detail.value.right_entity})}
                    ></ha-form>
                  </div>

                  <div class="field-container" style="margin-bottom: 24px;">
                    <div class="field-title">Title Size</div>
                    <div class="number-range-control">
                      <input
                        type="range"
                        class="range-slider"
                        min="8"
                        max="32"
                        step="1"
                        .value="${s.right_title_size||14}"
                        @input=${t=>{const e=t.target,i=parseInt(e.value);o({right_title_size:i})}}
                      />
                      <input
                        type="number"
                        class="range-input"
                        min="8"
                        max="32"
                        step="1"
                        .value="${s.right_title_size||14}"
                        @input=${t=>{const e=t.target,i=parseInt(e.value);isNaN(i)||o({right_title_size:i})}}
                        @keydown=${t=>{if("ArrowUp"===t.key||"ArrowDown"===t.key){t.preventDefault();const e=t.target,i=parseInt(e.value)||14,n="ArrowUp"===t.key?1:-1,a=Math.max(8,Math.min(32,i+n));o({right_title_size:a})}}}
                      />
                      <button
                        class="range-reset-btn"
                        @click=${()=>o({right_title_size:14})}
                        title="Reset to default (14)"
                      >
                        <ha-icon icon="mdi:refresh"></ha-icon>
                      </button>
                    </div>
                  </div>

                  <div class="field-container" style="margin-bottom: 24px;">
                    <div class="field-title">Value Size</div>
                    <div class="number-range-control">
                      <input
                        type="range"
                        class="range-slider"
                        min="8"
                        max="32"
                        step="1"
                        .value="${s.right_value_size||14}"
                        @input=${t=>{const e=t.target,i=parseInt(e.value);o({right_value_size:i})}}
                      />
                      <input
                        type="number"
                        class="range-input"
                        min="8"
                        max="32"
                        step="1"
                        .value="${s.right_value_size||14}"
                        @input=${t=>{const e=t.target,i=parseInt(e.value);isNaN(i)||o({right_value_size:i})}}
                        @keydown=${t=>{if("ArrowUp"===t.key||"ArrowDown"===t.key){t.preventDefault();const e=t.target,i=parseInt(e.value)||14,n="ArrowUp"===t.key?1:-1,a=Math.max(8,Math.min(32,i+n));o({right_value_size:a})}}}
                      />
                      <button
                        class="range-reset-btn"
                        @click=${()=>o({right_value_size:14})}
                        title="Reset to default (14)"
                      >
                        <ha-icon icon="mdi:refresh"></ha-icon>
                      </button>
                    </div>
                  </div>
                  <div
                    class="field-group"
                    style="margin-bottom: 8px; display: grid !important; grid-template-columns: minmax(0,1fr) auto; align-items: center; column-gap: 12px; width: 100%;"
                  >
                    <div
                      class="field-title"
                      style="font-size: 16px !important; font-weight: 600 !important; margin: 0; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;"
                    >
                      Template Mode
                    </div>
                    <ha-switch
                      style="justify-self: end;"
                      .checked=${s.right_template_mode||!1}
                      @change=${t=>o({right_template_mode:t.target.checked})}
                    ></ha-switch>
                  </div>
                  ${s.right_template_mode?q`
                        <div
                          class="field-description"
                          style="font-size: 13px !important; font-weight: 400 !important; margin-bottom: 8px;"
                        >
                          Use a template to format the displayed value. Templates use Home
                          Assistant's Jinja2 syntax.
                        </div>
                        <div class="field-group" style="margin-bottom: 0;">
                          <ha-form
                            .hass=${e}
                            .data=${{right_template:s.right_template||""}}
                            .schema=${[{name:"right_template",label:"Value Template",description:"Template to format the right-side value using Jinja2 syntax",selector:{text:{multiline:!0}}}]}
                            .computeLabel=${t=>t.label||t.name}
                            .computeDescription=${t=>t.description||""}
                            @value-changed=${t=>o({right_template:t.detail.value.right_template})}
                          ></ha-form>
                        </div>
                      `:""}
                `:q`
                  <div
                    style="text-align: center; padding: 20px; color: var(--secondary-text-color); font-style: italic;"
                  >
                    Enable the toggle above to configure right side settings
                  </div>
                `}
        </div>

        <!-- Colors Section -->
        <div
          class="settings-section"
          style="background: var(--secondary-background-color); border-radius: 8px; padding: 16px; margin-bottom: 32px;"
        >
          <div
            class="section-title"
            style="font-size: 18px; font-weight: 700; text-transform: uppercase; color: var(--primary-color); margin-bottom: 16px; padding-bottom: 0; border-bottom: none; letter-spacing: 0.5px;"
          >
            Colors
          </div>

          
          <div class="field-group" style="margin-bottom: 24px;">
            <div
              class="colors-grid"
              style="display: grid; grid-template-columns: 1fr; gap: 16px;"
            >
              <div class="color-item">
                <div
                  class="field-title"
                  style="font-size: 14px !important; font-weight: 600 !important; margin-bottom: 8px;"
                >
                  Bar Color
                </div>
                <ultra-color-picker style="width: 100%;"
                  .value=${s.bar_color||""}
                  .defaultValue=${"var(--primary-color)"}
                  .hass=${e}
                  @value-changed=${t=>o({bar_color:t.detail.value})}
                ></ultra-color-picker>
              </div>

              <div class="color-item">
                <div
                  class="field-title"
                  style="font-size: 14px !important; font-weight: 600 !important; margin-bottom: 8px;"
                >
                  Background Color
                </div>
                <ultra-color-picker style="width: 100%;"
                  .value=${s.bar_background_color||""}
                  .defaultValue=${"var(--secondary-background-color)"}
                  .hass=${e}
                  @value-changed=${t=>o({bar_background_color:t.detail.value})}
                ></ultra-color-picker>
              </div>

              <div class="color-item">
                <div
                  class="field-title"
                  style="font-size: 14px !important; font-weight: 600 !important; margin-bottom: 8px;"
                >
                  Border Color
                </div>
                <ultra-color-picker style="width: 100%;"
                  .value=${s.bar_border_color||""}
                  .defaultValue=${"var(--divider-color)"}
                  .hass=${e}
                  @value-changed=${t=>o({bar_border_color:t.detail.value})}
                ></ultra-color-picker>
              </div>

              <div class="color-item">
                <div
                  class="field-title"
                  style="font-size: 14px !important; font-weight: 600 !important; margin-bottom: 8px;"
                >
                  Limit Indicator
                </div>
                <ultra-color-picker style="width: 100%;"
                  .value=${s.limit_color||""}
                  .defaultValue=${"var(--warning-color)"}
                  .hass=${e}
                  @value-changed=${t=>o({limit_color:t.detail.value})}
                ></ultra-color-picker>
              </div>

              <div class="color-item">
                <div
                  class="field-title"
                  style="font-size: 14px !important; font-weight: 600 !important; margin-bottom: 8px;"
                >
                  Percentage Text
                </div>
                <ultra-color-picker style="width: 100%;"
                  .value=${s.percentage_text_color||""}
                  .defaultValue=${"var(--primary-text-color)"}
                  .hass=${e}
                  @value-changed=${t=>o({percentage_text_color:t.detail.value})}
                ></ultra-color-picker>
              </div>
            </div>
          </div>

          <!-- Left Side Colors -->
          ${s.left_enabled?q`
                  <div class="field-group" style="margin-bottom: 24px;">
                    <div
                      class="field-title"
                      style="font-size: 16px !important; font-weight: 600 !important; margin-bottom: 12px; color: var(--primary-color);"
                    >
                      Left Side Colors
                    </div>
                    <div
                      class="colors-grid"
                      style="display: grid; grid-template-columns: 1fr; gap: 16px;"
                    >
                      <div class="color-item">
                        <div
                          class="field-title"
                          style="font-size: 14px !important; font-weight: 600 !important; margin-bottom: 8px;"
                        >
                          Title Color
                        </div>
                        <ultra-color-picker
                          style="width: 100%;"
                          .value=${s.left_title_color||""}
                          .defaultValue=${"var(--primary-text-color)"}
                          .hass=${e}
                          @value-changed=${t=>o({left_title_color:t.detail.value})}
                        ></ultra-color-picker>
                      </div>

                      <div class="color-item">
                        <div
                          class="field-title"
                          style="font-size: 14px !important; font-weight: 600 !important; margin-bottom: 8px;"
                        >
                          Value Color
                        </div>
                        <ultra-color-picker
                          style="width: 100%;"
                          .value=${s.left_value_color||""}
                          .defaultValue=${"var(--primary-text-color)"}
                          .hass=${e}
                          @value-changed=${t=>o({left_value_color:t.detail.value})}
                        ></ultra-color-picker>
                      </div>
                    </div>
                  </div>
                `:""}

          <!-- Right Side Colors -->
          ${s.right_enabled?q`
                  <div class="field-group">
                    <div
                      class="field-title"
                      style="font-size: 16px !important; font-weight: 600 !important; margin-bottom: 12px; color: var(--primary-color);"
                    >
                      Right Side Colors
                    </div>
                    <div
                      class="colors-grid"
                      style="display: grid; grid-template-columns: 1fr; gap: 16px;"
                    >
                      <div class="color-item">
                        <div
                          class="field-title"
                          style="font-size: 14px !important; font-weight: 600 !important; margin-bottom: 8px;"
                        >
                          Title Color
                        </div>
                        <ultra-color-picker
                          style="width: 100%;"
                          .value=${s.right_title_color||""}
                          .defaultValue=${"var(--primary-text-color)"}
                          .hass=${e}
                          @value-changed=${t=>o({right_title_color:t.detail.value})}
                        ></ultra-color-picker>
                      </div>

                      <div class="color-item">
                        <div
                          class="field-title"
                          style="font-size: 14px !important; font-weight: 600 !important; margin-bottom: 8px;"
                        >
                          Value Color
                        </div>
                        <ultra-color-picker
                          style="width: 100%;"
                          .value=${s.right_value_color||""}
                          .defaultValue=${"var(--primary-text-color)"}
                          .hass=${e}
                          @value-changed=${t=>o({right_value_color:t.detail.value})}
                        ></ultra-color-picker>
                      </div>
                    </div>
                  </div>
                `:""}
        </div>

        <!-- Gradient Mode -->
        <div class="settings-section" style="background: var(--secondary-background-color); border-radius: 8px; padding: 16px; margin-top: 16px;">
          <div style="display: flex; align-items: center; justify-content: space-between; gap: 12px; margin-bottom: 12px;">
            <div
              class="section-title"
              style="font-size: 18px; font-weight: 700; text-transform: uppercase; color: var(--primary-color); padding-bottom: 0; border-bottom: none; letter-spacing: 0.5px; margin: 0;"
            >
              Gradient Mode
            </div>
            <ha-switch
              .checked=${s.use_gradient||!1}
              @change=${t=>{const e=t.target.checked,i={use_gradient:e};!e||s.gradient_stops&&0!==s.gradient_stops.length||(i.gradient_stops=[{id:"1",position:0,color:"#ff0000"},{id:"2",position:50,color:"#ffff00"},{id:"3",position:100,color:"#00ff00"}],i.gradient_display_mode=s.gradient_display_mode||"full"),o(i)}}
            ></ha-switch>
          </div>

          <div
            class="field-description"
            style="font-size: 13px !important; font-weight: 400 !important; margin-bottom: 12px;"
          >
            Apply a color gradient to the bar fill. When enabled, choose how the gradient is
            displayed and customize the color stops below.
          </div>

          ${s.use_gradient?q`
                  <div class="field-group" style="margin-bottom: 12px;">
                    <ha-form
                      .hass=${e}
                      .data=${{gradient_display_mode:s.gradient_display_mode||"full"}}
                      .schema=${[{name:"gradient_display_mode",selector:{select:{options:[{value:"full",label:"Full"},{value:"cropped",label:"Cropped"},{value:"value-based",label:"Value-Based"}],mode:"dropdown"}},label:""}]}
                      .computeLabel=${()=>""}
                      .computeDescription=${()=>""}
                      @value-changed=${t=>o({gradient_display_mode:t.detail.value.gradient_display_mode})}
                    ></ha-form>
                  </div>
                  <uc-gradient-editor
                    .stops=${s.gradient_stops||[{id:"1",position:0,color:"#ff0000"},{id:"2",position:50,color:"#ffff00"},{id:"3",position:100,color:"#00ff00"}]}
                    .barSize=${this.getBarSizeFromHeight(null!==(r=s.height)&&void 0!==r?r:20)}
                    .barRadius=${this.getBarRadiusFromStyle(s.border_radius||10)}
                    .barStyle=${s.bar_style||"flat"}
                    @gradient-changed=${t=>{o({gradient_stops:t.detail.stops})}}
                  ></uc-gradient-editor>
                `:""}
        </div>

        <!-- Bar Animation -->
        <div class="settings-section" style="background: var(--secondary-background-color); border-radius: 8px; padding: 16px; margin-top: 16px;">
          <div style="display: flex; align-items: center; justify-content: space-between; gap: 12px; margin-bottom: 12px;">
            <div
              class="section-title"
              style="font-size: 18px; font-weight: 700; text-transform: uppercase; color: var(--primary-color); padding-bottom: 0; border-bottom: none; letter-spacing: 0.5px; margin: 0;"
            >
              Bar Animation
            </div>
            <ha-switch
              .checked=${s.bar_animation_enabled||!1}
              @change=${t=>o({bar_animation_enabled:t.target.checked})}
            ></ha-switch>
          </div>
          <div
            class="field-description"
            style="font-size: 13px !important; font-weight: 400 !important; margin-bottom: 12px;"
          >
            Animate the bar fill using presets like charging stripes, pulse, shimmer, and more.
            You can trigger animations based on an entity’s state or attribute, and optionally
            override the animation when another condition is met.
          </div>
          ${s.bar_animation_enabled?q`
                  ${this.renderSettingsSection("Animation Trigger","Select an entity to watch and define the value + animation to apply when it matches.",[{title:"Entity",description:"Entity to evaluate for animation trigger",hass:e,data:{bar_animation_entity:s.bar_animation_entity||""},schema:[this.entityField("bar_animation_entity")],onChange:t=>o({bar_animation_entity:t.detail.value.bar_animation_entity})},{title:"Trigger Type",description:"Choose whether to compare the entity state or an attribute",hass:e,data:{bar_animation_trigger_type:s.bar_animation_trigger_type||"state"},schema:[this.selectField("bar_animation_trigger_type",[{value:"state",label:"State"},{value:"attribute",label:"Attribute"}])],onChange:t=>o(t.detail.value)},..."attribute"===(s.bar_animation_trigger_type||"state")?[{title:"Attribute Name",description:"Name of the attribute to compare (e.g., charging_status)",hass:e,data:{bar_animation_attribute:s.bar_animation_attribute||""},schema:[this.textField("bar_animation_attribute")],onChange:t=>o({bar_animation_attribute:t.detail.value.bar_animation_attribute})}]:[],...(s.bar_animation_entity||"").trim()?[{title:"Match Value",description:"Text to compare against the state or attribute (comparison is string-based).",hass:e,data:{bar_animation_value:s.bar_animation_value||""},schema:[this.textField("bar_animation_value")],onChange:t=>o({bar_animation_value:t.detail.value.bar_animation_value})}]:[],{title:"Animation Type",description:"Select how the bar should animate when triggered.",hass:e,data:{bar_animation_type:s.bar_animation_type||"none"},schema:[this.selectField("bar_animation_type",[{value:"none",label:"None"},{value:"charging",label:"Charging (Diagonal Lines)"},{value:"pulse",label:"Pulse"},{value:"blinking",label:"Blinking"},{value:"bouncing",label:"Bouncing"},{value:"glow",label:"Glow"},{value:"rainbow",label:"Rainbow"},{value:"bubbles",label:"Bubbles"},{value:"fill",label:"Fill"},{value:"ripple",label:"Ripple"},{value:"traffic",label:"Traffic (Barber Pole)"},{value:"heartbeat",label:"Heartbeat"},{value:"flicker",label:"Flicker"},{value:"shimmer",label:"Shimmer"},{value:"vibrate",label:"Vibrate"}])],onChange:t=>o(t.detail.value)}])}
                  ${this.renderSettingsSection("Action Animation Override","Select an Action Entity and state to define when this animation should override the regular animation",[{title:"Entity",description:"Entity to evaluate for the override trigger",hass:e,data:{bar_animation_override_entity:s.bar_animation_override_entity||""},schema:[this.entityField("bar_animation_override_entity")],onChange:t=>o({bar_animation_override_entity:t.detail.value.bar_animation_override_entity})},{title:"Trigger Type",description:"Compare the entity state or one of its attributes",hass:e,data:{bar_animation_override_trigger_type:s.bar_animation_override_trigger_type||"state"},schema:[this.selectField("bar_animation_override_trigger_type",[{value:"state",label:"State"},{value:"attribute",label:"Attribute"}])],onChange:t=>o(t.detail.value)},..."attribute"===(s.bar_animation_override_trigger_type||"state")?[{title:"Attribute Name",description:"Name of the attribute to compare",hass:e,data:{bar_animation_override_attribute:s.bar_animation_override_attribute||""},schema:[this.textField("bar_animation_override_attribute")],onChange:t=>o({bar_animation_override_attribute:t.detail.value.bar_animation_override_attribute})}]:[],{title:"Override Match Value",description:"String comparison against state or attribute",hass:e,data:{bar_animation_override_value:s.bar_animation_override_value||""},schema:[this.textField("bar_animation_override_value")],onChange:t=>o({bar_animation_override_value:t.detail.value.bar_animation_override_value})},{title:"Override Animation Type",description:"Animation to use when override condition matches.",hass:e,data:{bar_animation_override_type:s.bar_animation_override_type||"none"},schema:[this.selectField("bar_animation_override_type",[{value:"none",label:"None"},{value:"charging",label:"Charging (Diagonal Lines)"},{value:"pulse",label:"Pulse"},{value:"blinking",label:"Blinking"},{value:"bouncing",label:"Bouncing"},{value:"glow",label:"Glow"},{value:"rainbow",label:"Rainbow"},{value:"bubbles",label:"Bubbles"},{value:"fill",label:"Fill"},{value:"ripple",label:"Ripple"},{value:"traffic",label:"Traffic (Barber Pole)"},{value:"heartbeat",label:"Heartbeat"},{value:"flicker",label:"Flicker"},{value:"shimmer",label:"Shimmer"},{value:"vibrate",label:"Vibrate"}])],onChange:t=>o(t.detail.value)}])}
                `:""}
        </div>

        <!-- Action Animation Override removed as standalone: now included inside Bar Animation section above -->
      </div>
    `}renderActionsTab(t,e,i,o){return $t.render(t,e,i,o,(()=>this.injectUcFormStyles()))}renderPreview(t,e){var o,n,a,r,s,l,d,c,p,u,m,g,h,b,v,_,f,y,x,w,$,k,S,C,z,I;const T=t;let A=0;const P=t=>Math.min(Math.max(t,0),100),D=T.percentage_type||"entity";if("template"===D&&T.percentage_template){if(!this._templateService&&e&&(this._templateService=new kt(e)),e){e.__uvc_template_strings||(e.__uvc_template_strings={});const t=T.percentage_template,i=`bar_percentage_${T.id}_${this._hashString(t)}`;this._templateService&&!this._templateService.hasTemplateSubscription(i)&&this._templateService.subscribeToTemplate(t,i,(()=>{"undefined"!=typeof window&&window.dispatchEvent(new CustomEvent("ultra-card-template-update"))}));const n=null===(o=e.__uvc_template_strings)||void 0===o?void 0:o[i];if(void 0!==n){const t=parseFloat(String(n));isNaN(t)||(A=P(t<=1?100*t:t))}}}else if("attribute"===D){const t=T.percentage_attribute_entity||T.entity,i=T.percentage_attribute_name||"",o=t?null==e?void 0:e.states[t]:void 0,s=i?null===(n=null==o?void 0:o.attributes)||void 0===n?void 0:n[i]:void 0,l=(null===(a=null==o?void 0:o.attributes)||void 0===a?void 0:a.unit_of_measurement)||"",d=parseFloat(String(null!=s?s:"0"));if(!isNaN(d))if("%"===l||String(s).toString().trim().endsWith("%"))A=P(d);else if(null===(r=null==o?void 0:o.attributes)||void 0===r?void 0:r.max){const t=parseFloat(String(o.attributes.max));A=t>0?P(d/t*100):0}else A=P(d)}else if("difference"===D){const t=T.percentage_current_entity,i=T.percentage_total_entity,o=t?parseFloat(String(null!==(l=null===(s=null==e?void 0:e.states[t])||void 0===s?void 0:s.state)&&void 0!==l?l:"0")):0,n=i?parseFloat(String(null!==(c=null===(d=null==e?void 0:e.states[i])||void 0===d?void 0:d.state)&&void 0!==c?c:"0")):0;A=n>0?P(o/n*100):0}else{const t=null==e?void 0:e.states[T.entity];let i=0,o=100,n="";t&&(i=parseFloat(t.state)||0,n=(null===(p=t.attributes)||void 0===p?void 0:p.unit_of_measurement)||"",(null===(u=t.attributes)||void 0===u?void 0:u.max)?o=parseFloat(t.attributes.max):("%"===n||"battery"===(null===(m=t.attributes)||void 0===m?void 0:m.device_class))&&(o=100)),A=P(i/o*100)}let L="";if(T.left_template_mode&&T.left_template&&(!this._templateService&&e&&(this._templateService=new kt(e)),e)){e.__uvc_template_strings||(e.__uvc_template_strings={});const t=this._hashString(T.left_template),i=`bar_left_${T.id}_${t}`;this._templateService&&!this._templateService.hasTemplateSubscription(i)&&this._templateService.subscribeToTemplate(T.left_template,i,(()=>{"undefined"!=typeof window&&window.dispatchEvent(new CustomEvent("ultra-card-template-update"))}));const o=null===(g=e.__uvc_template_strings)||void 0===g?void 0:g[i];void 0!==o&&""!==String(o).trim()&&(L=String(o))}if(!L&&T.left_entity&&(null==e?void 0:e.states[T.left_entity])){const t=e.states[T.left_entity];try{L=(0,Dt.formatEntityState)(e,T.left_entity,{includeUnit:!0})}catch(e){L=`${t.state}${(null===(h=t.attributes)||void 0===h?void 0:h.unit_of_measurement)||""}`}}let M="";if(T.right_template_mode&&T.right_template&&(!this._templateService&&e&&(this._templateService=new kt(e)),e)){e.__uvc_template_strings||(e.__uvc_template_strings={});const t=this._hashString(T.right_template),i=`bar_right_${T.id}_${t}`;this._templateService&&!this._templateService.hasTemplateSubscription(i)&&this._templateService.subscribeToTemplate(T.right_template,i,(()=>{"undefined"!=typeof window&&window.dispatchEvent(new CustomEvent("ultra-card-template-update"))}));const o=null===(b=e.__uvc_template_strings)||void 0===b?void 0:b[i];void 0!==o&&""!==String(o).trim()&&(M=String(o))}if(!M&&T.right_entity&&(null==e?void 0:e.states[T.right_entity])){const t=e.states[T.right_entity];try{M=(0,Dt.formatEntityState)(e,T.right_entity,{includeUnit:!0})}catch(e){M=`${t.state}${(null===(v=t.attributes)||void 0===v?void 0:v.unit_of_measurement)||""}`}}let O=0;if(T.limit_entity&&(null==e?void 0:e.states[T.limit_entity])){const t=e.states[T.limit_entity],i=parseFloat(t.state)||0,o=100;O=Math.min(Math.max(i/o*100,0),100)}const j=T,E=T.design||{},F=`${null!==(_=T.height)&&void 0!==_?_:20}px`,U=null!==(y=null!==(f=E.border_radius)&&void 0!==f?f:T.border_radius)&&void 0!==y?y:10,R="string"==typeof U?parseInt(U,10)||10:U;let N=T.bar_color||j.color||"var(--primary-color)";const H=t=>{if(!t)return t;const e=String(t).trim();if(e.startsWith("#")||e.startsWith("rgb"))return e;try{const t=document.createElement("span");t.style.color=e,document.body.appendChild(t);const i=getComputedStyle(t).color;return t.remove(),i&&"rgba(0, 0, 0, 0)"!==i?i:e}catch(t){return e}},B=(t,e)=>{const i=[...t].sort(((t,e)=>t.position-e.position));let o=i[0],n=i[i.length-1];for(let t=0;t<i.length-1;t++)if(e>=i[t].position&&e<=i[t+1].position){o=i[t],n=i[t+1];break}if(o.position===e)return o.color;if(n.position===e)return n.color;const a=n.position-o.position,r=0===a?0:(e-o.position)/a,s=t=>{const e=H(t);if(!e)return null;if(e.startsWith("#"))return e;const i=e.match(/rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})(?:\s*,\s*([0-9.]+))?\s*\)/i);if(i){const t=Math.max(0,Math.min(255,parseInt(i[1],10))),e=Math.max(0,Math.min(255,parseInt(i[2],10))),o=Math.max(0,Math.min(255,parseInt(i[3],10)));return this.rgbToHex(t,e,o)}return null},l=s(o.color),d=s(n.color);return l&&d?this.interpolateColor(l,d,r):H(r<.5?o.color:n.color)};if(T.use_gradient){const t=T.gradient_stops&&T.gradient_stops.length>0?T.gradient_stops:[{id:"1",position:0,color:"#ff0000"},{id:"2",position:50,color:"#ffff00"},{id:"3",position:100,color:"#00ff00"}],e=[...t].sort(((t,e)=>t.position-e.position)).map((t=>`${H(t.color)} ${t.position}%`)).join(", ");if("full"===T.gradient_display_mode)N=`linear-gradient(to right, ${e})`;else if("value-based"===T.gradient_display_mode){const e=[...t].sort(((t,e)=>t.position-e.position)),i=B(e,A);N=H(i)}else{const e=[...t].sort(((t,e)=>t.position-e.position));if(A<=0){const t=e[0];N=t?H(t.color):N}else{const t=e.filter((t=>t.position<=A)),i=[];if(0===t.length){const t=e[0];t&&i.push(`${t.color} 0%`,`${t.color} 100%`)}else{for(const e of t){const t=e.position/A*100,o=Math.max(0,Math.min(100,t));i.push(`${H(e.color)} ${o}%`)}const o=H(B(e,A));0===i.length?i.push(`${o} 0%`,`${o} 100%`):i.push(`${o} 100%`)}N=`linear-gradient(to right, ${i.join(", ")})`}}}let W="",V="",G="",Y="";const X=t=>t.includes("linear-gradient")?T.bar_color||"var(--primary-color)":t;switch(X(N),T.bar_style){case"flat":W="box-shadow: none;";break;case"glossy":T.use_gradient?G="\n            background-image: linear-gradient(to bottom, \n              rgba(255,255,255,0.3) 0%, \n              rgba(255,255,255,0.1) 50%, \n              rgba(0,0,0,0.1) 51%, \n              rgba(0,0,0,0.05) 100%);\n            box-shadow: inset 0 1px 0 rgba(255,255,255,0.3);\n          ":V=`\n            background: linear-gradient(to bottom, ${N}, ${N} 50%, rgba(0,0,0,0.1) 51%, ${N});\n            box-shadow: inset 0 1px 0 rgba(255,255,255,0.3);\n          `;break;case"embossed":W="\n          box-shadow: inset 0 1px 2px rgba(0,0,0,0.2), 0 1px 0 rgba(255,255,255,0.8);\n          border: 1px solid rgba(0,0,0,0.1);\n        ",V="\n          box-shadow: inset 0 1px 0 rgba(255,255,255,0.3), inset 0 -1px 0 rgba(0,0,0,0.1);\n        ";break;case"inset":W="\n          box-shadow: inset 0 2px 4px rgba(0,0,0,0.3);\n          border: 1px solid rgba(0,0,0,0.2);\n        ";break;case"gradient-overlay":T.use_gradient?G="\n            background-image: linear-gradient(to bottom, \n              rgba(255,255,255,0.4) 0%, \n              rgba(255,255,255,0) 100%);\n          ":V=`\n            background: linear-gradient(to bottom, \n              ${N} 0%, \n              rgba(255,255,255,0) 100%\n            );\n          `;break;case"neon-glow":const t=(t=>{if(t.includes("linear-gradient")&&T.use_gradient&&T.gradient_stops){const t=T.gradient_display_mode||"full";if("value-based"===t||"cropped"===t)return B(T.gradient_stops,A);{const t=[...T.gradient_stops].sort(((t,e)=>e.position-t.position));if(t.length>0)return t[0].color}}return X(t)})(N);V=`\n          box-shadow: 0 0 10px ${t}, 0 0 20px ${t}, 0 0 30px ${t};\n          filter: brightness(1.2);\n        `,W="\n          box-shadow: inset 0 0 10px rgba(0,0,0,0.5);\n        ";break;case"outline":{const t=!(!T.use_gradient||!T.gradient_stops||"full"!==T.gradient_display_mode&&"cropped"!==T.gradient_display_mode&&"value-based"!==T.gradient_display_mode),e=T.gradient_stops&&T.gradient_stops.length>0?[...T.gradient_stops].sort(((t,e)=>t.position-e.position)):[{id:"1",position:0,color:"#ff0000"},{id:"2",position:50,color:"#ffff00"},{id:"3",position:100,color:"#00ff00"}],i=e[e.length-1],o=i?H(i.color):T.bar_color||"var(--primary-color)",n=e.map((t=>`${H(t.color)} ${t.position}%`)).join(", "),a=Math.max(0,Math.min(100,A)),r=t=>H(B(e,t));let s=o;"cropped"!==T.gradient_display_mode&&"value-based"!==T.gradient_display_mode||(s=r(a));const l=T.bar_background_color||E.background_color||j.background_color||"var(--secondary-background-color)",d=T.gradient_display_mode||"full";let c="",p="";t?"value-based"===d?(c=`linear-gradient(${l}, ${l}) padding-box,\n               linear-gradient(to right, ${s}, ${s}) border-box`,p="background-size: 100% 100%, 100% 100%;"):"cropped"===d?(c=`linear-gradient(${l}, ${l}) padding-box,\n               ${N} border-box,\n               linear-gradient(to right, ${s}, ${s}) border-box`,p=`background-size: 100% 100%, ${a}% 100%, 100% 100%;`):(c=`linear-gradient(${l}, ${l}) padding-box,\n               linear-gradient(to right, ${n}) border-box,\n               linear-gradient(to right, ${s}, ${s}) border-box`,p=`background-size: 100% 100%, ${a}% 100%, 100% 100%;`):(c=`linear-gradient(${l}, ${l}) padding-box,\n               linear-gradient(to right, ${N}, ${N}) border-box`,p="background-size: 100% 100%, 100% 100%;"),W=`\n            border: 2px solid transparent;\n            border-radius: ${R}px;\n            padding: 4px;\n            background: ${c};\n            ${p}\n            background-repeat: no-repeat;\n          `,V=`\n            background: ${N};\n            border: none;\n            position: relative;\n            margin: 0;\n            border-radius: ${R}px;\n          `}break;case"glass":W="\n          backdrop-filter: blur(10px);\n          background-color: rgba(255,255,255,0.1) !important;\n          border: 1px solid rgba(255,255,255,0.2);\n        ",T.use_gradient?G="\n            backdrop-filter: blur(5px);\n            background-image: linear-gradient(135deg, rgba(255,255,255,0.3), rgba(255,255,255,0.1));\n          ":V="\n            backdrop-filter: blur(5px);\n            background: linear-gradient(135deg, rgba(255,255,255,0.3), rgba(255,255,255,0.1)) !important;\n          ";break;case"metallic":T.use_gradient?G="\n            background-image: linear-gradient(to bottom, \n              rgba(255,255,255,0.4) 0%, \n              rgba(255,255,255,0) 20%, \n              rgba(255,255,255,0) 80%, \n              rgba(0,0,0,0.2) 100%);\n            box-shadow: inset 0 1px 0 rgba(255,255,255,0.5), inset 0 -1px 0 rgba(0,0,0,0.3);\n          ":V=`\n            background: linear-gradient(to bottom, \n              rgba(255,255,255,0.4) 0%, \n              ${N} 20%, \n              ${N} 80%, \n              rgba(0,0,0,0.2) 100%);\n            box-shadow: inset 0 1px 0 rgba(255,255,255,0.5), inset 0 -1px 0 rgba(0,0,0,0.3);\n          `;break;case"neumorphic":W="\n          box-shadow: inset 2px 2px 4px rgba(0,0,0,0.1), inset -2px -2px 4px rgba(255,255,255,0.1);\n        ",V="\n          box-shadow: 2px 2px 4px rgba(0,0,0,0.1), -2px -2px 4px rgba(255,255,255,0.1);\n        ";break;case"dashed":const e=12,i=4,o=e+i;V=A>=99.5?`\n            mask-image: repeating-linear-gradient(\n              90deg,\n              black 0px,\n              black ${e}px,\n              transparent ${e}px,\n              transparent ${o}px\n            );\n            -webkit-mask-image: repeating-linear-gradient(\n              90deg,\n              black 0px,\n              black ${e}px,\n              transparent ${e}px,\n              transparent ${o}px\n            );\n            border-radius: 0 ${R}px ${R}px 0;\n          `:`\n            mask-image: \n              repeating-linear-gradient(\n                90deg,\n                black 0px,\n                black ${e}px,\n                transparent ${e}px,\n                transparent ${o}px\n              ),\n              linear-gradient(\n                90deg,\n                black 0%,\n                black calc(100% - ${i+2}px),\n                transparent calc(100% - ${i+2}px),\n                transparent 100%\n              );\n            -webkit-mask-image: \n              repeating-linear-gradient(\n                90deg,\n                black 0px,\n                black ${e}px,\n                transparent ${e}px,\n                transparent ${o}px\n              ),\n              linear-gradient(\n                90deg,\n                black 0%,\n                black calc(100% - ${i+2}px),\n                transparent calc(100% - ${i+2}px),\n                transparent 100%\n              );\n            mask-composite: intersect;\n            -webkit-mask-composite: source-in;\n            border-radius: 0;\n          `;break;case"dots":const n=4,a=[],r=[];for(let t=10;t<=A&&t<=100;t+=10)a.push(`${t}%`),r.push(`radial-gradient(circle ${n}px at ${t}% center, ${N} 0%, ${N} 100%, transparent 100%)`);V=r.length>0?`\n            background-image: ${r.join(", ")};\n            background-size: 100% 100%;\n            background-repeat: no-repeat;\n          `:"background: transparent;"}const J=T.bar_animation_type||"none";let K=!1;if(T.bar_animation_enabled&&"none"!==J){const t=T.bar_animation_trigger_type||"state",i=T.bar_animation_entity,o=(null!==(x=T.bar_animation_value)&&void 0!==x?x:"").toString();if(i&&""!==i.trim()&&""!==o.trim()){if(null==e?void 0:e.states[i]){const n=e.states[i];let a="";if("attribute"===t){const t=T.bar_animation_attribute||"";a=t?String(null!==($=null===(w=n.attributes)||void 0===w?void 0:w[t])&&void 0!==$?$:""):""}else a=String(null!==(k=n.state)&&void 0!==k?k:"");K=String(a)===o}}else K=!0;if(K)switch(J){case"charging":Y="bar-anim-charging";break;case"pulse":Y="bar-anim-pulse";break;case"blinking":Y="bar-anim-blink";break;case"bouncing":Y="bar-anim-bounce";break;case"glow":Y="bar-anim-glow";break;case"rainbow":Y="bar-anim-rainbow";break;case"bubbles":Y="bar-anim-bubbles";break;case"fill":Y="bar-anim-fill";break;case"ripple":Y="bar-anim-ripple";break;case"traffic":Y="bar-anim-traffic";break;case"heartbeat":Y="bar-anim-heartbeat";break;case"flicker":Y="bar-anim-flicker";break;case"shimmer":Y="bar-anim-shimmer";break;case"vibrate":Y="bar-anim-vibrate"}}const Z=T.bar_animation_override_type||"none";if("none"!==Z&&""!==(T.bar_animation_override_entity||"").trim()){const t=T.bar_animation_override_trigger_type||"state",i=T.bar_animation_override_entity,o=(null!==(S=T.bar_animation_override_value)&&void 0!==S?S:"").toString();let n=!1;if(null==e?void 0:e.states[i]){const a=e.states[i];if("attribute"===t){const t=T.bar_animation_override_attribute||"";n=(t?String(null!==(z=null===(C=a.attributes)||void 0===C?void 0:C[t])&&void 0!==z?z:""):"")===o}else n=String(null!==(I=a.state)&&void 0!==I?I:"")===o}if(n)switch(Z){case"charging":Y="bar-anim-charging";break;case"pulse":Y="bar-anim-pulse";break;case"blinking":Y="bar-anim-blink";break;case"bouncing":Y="bar-anim-bounce";break;case"glow":Y="bar-anim-glow";break;case"rainbow":Y="bar-anim-rainbow";break;case"bubbles":Y="bar-anim-bubbles";break;case"fill":Y="bar-anim-fill";break;case"ripple":Y="bar-anim-ripple";break;case"traffic":Y="bar-anim-traffic";break;case"heartbeat":Y="bar-anim-heartbeat";break;case"flicker":Y="bar-anim-flicker";break;case"shimmer":Y="bar-anim-shimmer";break;case"vibrate":Y="bar-anim-vibrate"}}const Q={padding:E.padding_top||E.padding_bottom||E.padding_left||E.padding_right||j.padding_top||j.padding_bottom||j.padding_left||j.padding_right?`${this.addPixelUnit(E.padding_top||j.padding_top)||"16px"} ${this.addPixelUnit(E.padding_right||j.padding_right)||"16px"} ${this.addPixelUnit(E.padding_bottom||j.padding_bottom)||"16px"} ${this.addPixelUnit(E.padding_left||j.padding_left)||"16px"}`:"16px",margin:E.margin_top||E.margin_bottom||E.margin_left||E.margin_right||j.margin_top||j.margin_bottom||j.margin_left||j.margin_right?`${this.addPixelUnit(E.margin_top||j.margin_top)||"0px"} ${this.addPixelUnit(E.margin_right||j.margin_right)||"0px"} ${this.addPixelUnit(E.margin_bottom||j.margin_bottom)||"16px"} ${this.addPixelUnit(E.margin_left||j.margin_left)||"0px"}`:"0 0 16px 0",background:E.background_color||j.background_color||"transparent",backgroundImage:this.getBackgroundImageCSS(Object.assign(Object.assign({},j),E),e),backgroundSize:"cover",backgroundPosition:"center",backgroundRepeat:"no-repeat",border:(E.border_style||j.border_style)&&"none"!==(E.border_style||j.border_style)?`${this.addPixelUnit(E.border_width||j.border_width)||"1px"} ${E.border_style||j.border_style} ${E.border_color||j.border_color||"var(--divider-color)"}`:"none",borderRadius:this.addPixelUnit(E.border_radius||j.border_radius)||"0",position:E.position||j.position||"relative",top:E.top||j.top||"auto",bottom:E.bottom||j.bottom||"auto",left:E.left||j.left||"auto",right:E.right||j.right||"auto",zIndex:E.z_index||j.z_index||"auto",width:E.width||j.width||"100%",height:E.height||j.height||"auto",maxWidth:E.max_width||j.max_width||"100%",maxHeight:E.max_height||j.max_height||"none",minWidth:E.min_width||j.min_width||"none",minHeight:E.min_height||j.min_height||"auto",overflow:E.overflow||j.overflow||"visible",clipPath:E.clip_path||j.clip_path||"none",backdropFilter:E.backdrop_filter||j.backdrop_filter||"none",boxShadow:E.box_shadow_h&&E.box_shadow_v?`${E.box_shadow_h||"0"} ${E.box_shadow_v||"0"} ${E.box_shadow_blur||"0"} ${E.box_shadow_spread||"0"} ${E.box_shadow_color||"rgba(0,0,0,0.1)"}`:j.box_shadow_h&&j.box_shadow_v?`${j.box_shadow_h||"0"} ${j.box_shadow_v||"0"} ${j.box_shadow_blur||"0"} ${j.box_shadow_spread||"0"} ${j.box_shadow_color||"rgba(0,0,0,0.1)"}`:"none",boxSizing:"border-box",color:E.color||j.color||"var(--primary-text-color)",fontFamily:E.font_family||j.font_family||"inherit",fontSize:void 0!==E.font_size&&null!==E.font_size?`${E.font_size}px`:(j.font_size?`${j.font_size}px`:void 0)||"inherit",textAlign:E.text_align||j.text_align||"inherit",lineHeight:E.line_height||j.line_height||"inherit",letterSpacing:E.letter_spacing||j.letter_spacing||"normal",textShadow:E.text_shadow_h&&E.text_shadow_v?`${E.text_shadow_h||"0"} ${E.text_shadow_v||"0"} ${E.text_shadow_blur||"0"} ${E.text_shadow_color||"rgba(0,0,0,0.25)"}`:j.text_shadow_h&&j.text_shadow_v?`${j.text_shadow_h||"0"} ${j.text_shadow_v||"0"} ${j.text_shadow_blur||"0"} ${j.text_shadow_color||"rgba(0,0,0,0.25)"}`:"none"},tt=`${T.bar_width||100}%`;let et="flex-start";switch(T.bar_alignment){case"left":et="flex-start";break;case"center":et="center";break;case"right":et="flex-end"}let it=null,ot=null,nt=!1,at=0,rt=0;return q`
      <style>
        ${this.getStyles()}
      </style>
      <div class="bar-module-preview" style=${this.styleObjectToCss(Q)}>
        <!-- Bar Container -->
        <div style="display: flex; justify-content: ${et}; width: 100%;">
          <div
            class="bar-container"
            style="
              width: ${tt}; 
              height: ${F}; 
              background: ${T.bar_background_color||E.background_color||j.background_color||"var(--secondary-background-color)"};
              border-radius: ${R}px;
              overflow: hidden;
              position: relative;
              transition: ${!1!==T.animation?"all 0.3s ease":"none"};
              border: ${(T.bar_border_color||j.border_color)&&"outline"!==T.bar_style?`1px solid ${T.bar_border_color||j.border_color}`:"none"};
              ${W};
              cursor: ${T.tap_action&&"nothing"!==T.tap_action.action||T.hold_action&&"nothing"!==T.hold_action.action||T.double_tap_action&&"nothing"!==T.double_tap_action.action?"pointer":"default"};
            "
            @pointerdown=${t=>{t.preventDefault(),t.stopPropagation(),nt=!1,ot=setTimeout((()=>{nt=!0,T.hold_action&&"nothing"!==T.hold_action.action&&wt.handleAction(T.hold_action,e,t.target)}),500)}}
            @pointerup=${t=>{if(t.preventDefault(),t.stopPropagation(),ot&&(clearTimeout(ot),ot=null),nt)return void(nt=!1);const i=Date.now();i-rt<300&&1===at?(it&&(clearTimeout(it),it=null),at=0,T.double_tap_action&&"nothing"!==T.double_tap_action.action&&wt.handleAction(T.double_tap_action,e,t.target)):(at=1,rt=i,it=setTimeout((()=>{at=0,T.tap_action&&"nothing"!==T.tap_action.action&&wt.handleAction(T.tap_action,e,t.target)}),300))}}
          >
            <!-- Bar Fill / Dots Style -->
            ${"dots"===T.bar_style?(()=>{var t;const e=null!==(t=T.height)&&void 0!==t?t:20,i=Math.max(6,Math.floor(e-8)),o=T.bar_background_color||E.background_color||j.background_color||"var(--secondary-background-color)",n=T.use_gradient&&T.gradient_stops&&T.gradient_stops.length>0?[...T.gradient_stops].sort(((t,e)=>t.position-e.position)):[{id:"1",position:0,color:"#ff0000"},{id:"2",position:50,color:"#ffff00"},{id:"3",position:100,color:"#00ff00"}],a=t=>{const e=[...n].sort(((t,e)=>t.position-e.position));let i=e[0],o=e[e.length-1];for(let n=0;n<e.length-1;n++)if(t>=e[n].position&&t<=e[n+1].position){i=e[n],o=e[n+1];break}if(i.position===t)return i.color;if(o.position===t)return o.color;const a=o.position-i.position,r=0===a?0:(t-i.position)/a;return this.interpolateColor(i.color,o.color,r)},r=T.gradient_display_mode||"full",s=Array.from({length:20},((t,e)=>{const n=Math.round((e+1)/21*100),s=n<=A;let l=N;if(T.use_gradient){if("full"===r)if(s){const t=A>0?Math.min(100,Math.max(0,Math.round(n/Math.max(1,A)*100))):0;l=a(t)}else l=o;else if("cropped"===r)l=s?a(n):o;else if("value-based"===r){const t=a(A);l=s?t:o}}else l=s?T.bar_color||j.color||"var(--primary-color)":o;return q`<div
                      style="width:${i}px;height:${i}px;border-radius:50%;background:${l};flex-shrink:0;"
                    ></div>`}));return q`<div
                    class="dots-container"
                    style="display:flex;align-items:center;justify-content:space-between;width:100%;height:100%;padding:0 ${Math.max(2,Math.floor(i/3))}px;box-sizing:border-box;"
                  >
                    ${s}
                  </div>`})():q`
                  <div
                    class="bar-fill ${Y}"
                    style="
                      width: ${A}%;
                      height: 100%;
                      background: ${N};
                      transition: ${!1!==T.animation?"width 0.3s ease":"none"};
                      border-radius: ${R}px;
                      position: relative;
                      ${V}
                    "
                  >
                    ${G?q` <div
                          class="bar-fill-overlay"
                          style="
                              position: absolute;
                              inset: 0;
                              border-radius: ${R}px;
                              pointer-events: none;
                              ${G}
                            "
                        ></div>`:""}
                  </div>
                `}

            <!-- Limit Indicator -->
            ${T.limit_entity&&(null==e?void 0:e.states[T.limit_entity])&&O>=0?q`
                  <div
                    class="bar-limit-line"
                    style="
                    position: absolute; 
                    top: 0; 
                    bottom: 0; 
                    left: ${O}%; 
                    width: 2px; 
                    background-color: ${T.limit_color||"var(--warning-color)"}; 
                    z-index: 5; 
                    transform: translateX(-50%);
                  "
                    title="${(()=>{var t;try{const o=null===(t=e.states[T.limit_entity])||void 0===t?void 0:t.state;return(async()=>{const{formatEntityState:t}=await Promise.resolve().then(i.bind(i,57));t(e,T.limit_entity,{state:o,includeUnit:!0})})(),`Limit: ${o}`}catch(t){return"Limit"}})()}"
                  ></div>
                `:""}

            <!-- Percentage Text (Inside Bar) -->
            ${T.show_percentage?q`
                  <div
                    class="percentage-text"
                    style="
                    position: absolute;
                    top: 50%;
                    left: ${"left"===T.percentage_text_alignment?"8px":"right"===T.percentage_text_alignment?"calc(100% - 32px)":"50%"};
                    transform: translate(${"center"===T.percentage_text_alignment?"-50%, -50%":"0, -50%"});
                    text-align: ${T.percentage_text_alignment||"center"};
                    font-size: ${E.font_size?`${E.font_size}px`:`${T.percentage_text_size||14}px`};
                    color: ${T.percentage_text_color||E.color||j.color||"white"};
                    font-weight: 600;
                    z-index: 10;
                    text-shadow: 0 1px 2px rgba(0,0,0,0.5);
                    white-space: nowrap;
                  "
                  >
                    ${Math.round(A)}%
                  </div>
                `:""}
          </div>

          ${!(null==e?void 0:e.states[T.entity])&&T.entity?q`
                <div
                  class="entity-error"
                  style="color: var(--error-color); font-size: 12px; margin-top: 4px;"
                >
                  Entity not found: ${T.entity}
                </div>
              `:""}
        </div>

        <!-- Left and Right Side Labels (Below Bar) -->
        ${T.left_enabled||T.right_enabled?q`
              <div
                class="bar-labels-below"
                style="display: flex; justify-content: ${T.label_alignment||"space-between"}; align-items: center; margin-top: 8px; gap: 16px; width: 100%;"
              >
                ${T.left_enabled?q`
                      <div class="left-side-below" style="text-align: left;">
                        <span
                          style="font-size: ${E.font_size?`${E.font_size}px`:`${T.left_title_size||14}px`}; color: ${E.color||T.left_title_color||j.color||"var(--primary-text-color)"};"
                        >
                          ${T.left_title}:
                        </span>
                        <span
                          style="font-size: ${E.font_size?`${E.font_size}px`:`${T.left_value_size||14}px`}; font-weight: 600; color: ${E.color||T.left_value_color||j.color||"var(--primary-text-color)"}; margin-left: 4px;"
                        >
                          ${L}
                        </span>
                      </div>
                    `:q`<div></div>`}
                ${T.right_enabled?q`
                      <div class="right-side-below" style="text-align: right;">
                        <span
                          style="font-size: ${E.font_size?`${E.font_size}px`:`${T.right_title_size||14}px`}; color: ${E.color||T.right_title_color||j.color||"var(--primary-text-color)"};"
                        >
                          ${T.right_title}:
                        </span>
                        <span
                          style="font-size: ${E.font_size?`${E.font_size}px`:`${T.right_value_size||14}px`}; font-weight: 600; color: ${E.color||T.right_value_color||j.color||"var(--primary-text-color)"}; margin-left: 4px;"
                        >
                          ${M}
                        </span>
                      </div>
                    `:q`<div></div>`}
              </div>
            `:""}
      </div>
    `}_hashString(t){let e=0;for(let i=0;i<t.length;i+=1)e=(e<<5)-e+t.charCodeAt(i),e|=0;return Math.abs(e)}validate(t){const e=t,i=[...super.validate(t).errors];return e.entity&&""!==e.entity.trim()||i.push("Entity ID is required"),e.height&&(e.height<5||e.height>200)&&i.push("Bar height must be between 5 and 200 pixels"),e.border_radius&&(e.border_radius<0||e.border_radius>100)&&i.push("Border radius must be between 0 and 100 pixels"),e.limit_entity&&""!==e.limit_entity.trim()&&(e.limit_entity.includes(".")||i.push("Limit entity must be a valid entity ID (e.g., sensor.battery_limit)")),{valid:0===i.length,errors:i}}getStyles(){return'\n      .bar-module-preview {\n        max-width: 100%;\n        overflow: hidden;\n        box-sizing: border-box;\n      }\n      \n      .bar-container {\n        width: 100%;\n        position: relative;\n        display: block;\n        box-sizing: border-box;\n      }\n      \n      .bar-fill {\n        position: relative;\n        z-index: 1;\n        overflow: hidden; /* Keep overlay animations clipped to rounded corners */\n      }\n      \n      .bar-fill-overlay {\n        position: absolute;\n        inset: 0;\n        pointer-events: none;\n        z-index: 2;\n        overflow: hidden;\n        mix-blend-mode: normal;\n      }\n      \n      /* Ensure overlay inherits border radius properly */\n      .bar-fill-overlay {\n        border-radius: inherit;\n      }\n      \n      /* Outline style animation */\n      @keyframes outline-pulse {\n        0%, 100% { opacity: 0.6; }\n        50% { opacity: 1; }\n      }\n      \n      .bar-limit-line {\n        opacity: 0.9;\n        transition: opacity 0.2s ease;\n      }\n      \n      .bar-limit-line:hover {\n        opacity: 1;\n      }\n      \n      .bar-name {\n        font-size: 16px;\n        font-weight: 600;\n        color: var(--primary-text-color);\n        margin-bottom: 8px;\n        user-select: none;\n        word-wrap: break-word;\n      }\n      \n      .bar-value {\n        user-select: none;\n        text-shadow: 0 1px 2px rgba(0,0,0,0.1);\n      }\n      \n      .bar-value-outside {\n        user-select: none;\n        text-align: center;\n        font-weight: 600;\n        color: var(--primary-text-color);\n      }\n      \n      .entity-error {\n        font-size: 12px;\n        color: var(--error-color);\n        margin-top: 6px;\n        font-style: italic;\n        opacity: 0.8;\n      }\n      \n      .settings-section {\n        margin-bottom: 16px;\n        max-width: 100%;\n        box-sizing: border-box;\n      }\n      \n      .settings-section * {\n        box-sizing: border-box;\n      }\n      \n      .section-title {\n        font-size: 18px !important;\n        font-weight: 700 !important;\n        color: var(--primary-color) !important;\n        margin-bottom: 12px !important;\n        padding-bottom: 0 !important;\n        border-bottom: none !important;\n        text-transform: uppercase !important;\n        letter-spacing: 0.5px !important;\n      }\n      \n      .settings-section label {\n        display: block;\n        font-weight: 500;\n        margin-bottom: 4px;\n        color: var(--primary-text-color);\n      }\n      \n      .settings-section input,\n      .settings-section select {\n        width: 100%;\n        max-width: 100%;\n        padding: 8px;\n        border: 1px solid var(--divider-color);\n        border-radius: 4px;\n        background: var(--card-background-color);\n        color: var(--primary-text-color);\n        font-size: 14px;\n        box-sizing: border-box;\n      }\n      \n      .settings-section .checkbox-wrapper {\n        display: flex;\n        align-items: center;\n        gap: 8px;\n        font-weight: 500;\n      }\n      \n      .settings-section .checkbox-wrapper input[type="checkbox"] {\n        width: auto;\n        margin: 0;\n      }\n      \n      .help-text {\n        font-size: 12px;\n        color: var(--secondary-text-color);\n        margin: 4px 0 0 0;\n        opacity: 0.8;\n        word-wrap: break-word;\n      }\n      \n      .number-input,\n      .text-input,\n      .entity-input,\n      .select-input {\n        transition: border-color 0.2s ease;\n      }\n      \n      .number-input:focus,\n      .text-input:focus,\n      .entity-input:focus,\n      .select-input:focus {\n        outline: none;\n        border-color: var(--primary-color);\n        box-shadow: 0 0 0 1px var(--primary-color);\n      }\n      \n      /* Fix padding overflow */\n      .module-general-settings {\n        max-width: 100%;\n        overflow: hidden;\n      }\n      \n      .module-general-settings { }\n\n      .module-general-settings > * {\n        max-width: 100%;\n        box-sizing: border-box;\n      }\n\n      /* Conditional Fields Grouping CSS */\n      .conditional-fields-group {\n        margin-top: 16px;\n        border-left: 4px solid var(--primary-color);\n        background: rgba(var(--rgb-primary-color), 0.08);\n        border-radius: 0 8px 8px 0;\n        overflow: hidden;\n        transition: all 0.2s ease;\n        animation: slideInFromLeft 0.3s ease-out;\n      }\n\n      .conditional-fields-group:hover {\n        background: rgba(var(--rgb-primary-color), 0.12);\n      }\n\n      .conditional-fields-header {\n        background: rgba(var(--rgb-primary-color), 0.15);\n        padding: 12px 16px;\n        font-size: 14px;\n        font-weight: 600;\n        color: var(--primary-color);\n        border-bottom: 1px solid rgba(var(--rgb-primary-color), 0.2);\n        text-transform: uppercase;\n        letter-spacing: 0.5px;\n      }\n\n      .conditional-fields-content {\n        padding: 16px;\n      }\n\n      .conditional-fields-content > .field-title:first-child {\n        margin-top: 0 !important;\n      }\n\n      @keyframes slideInFromLeft {\n        from { \n          opacity: 0; \n          transform: translateX(-10px); \n        }\n        to { \n          opacity: 1; \n          transform: translateX(0); \n        }\n      }\n\n      /* Proper form field arrangement: Title -> Description -> Field */\n      .settings-section ha-form {\n        --ha-form-field-margin: 8px 0;\n      }\n\n      .settings-section ha-form::part(field) {\n        margin-bottom: 8px;\n      }\n\n      .settings-section ha-form .ha-form-label {\n        font-size: 14px;\n        font-weight: 500;\n        color: var(--primary-text-color);\n        margin-bottom: 4px;\n        display: block;\n      }\n\n      .settings-section ha-form .ha-form-description {\n        font-size: 12px;\n        color: var(--secondary-text-color);\n        margin-bottom: 8px;\n        display: block;\n        opacity: 0.8;\n        line-height: 1.4;\n      }\n\n      .settings-section ha-form mwc-formfield {\n        --mdc-typography-body2-font-size: 14px;\n      }\n\n      .settings-section ha-form ha-switch {\n        --switch-checked-color: var(--primary-color);\n        --switch-unchecked-color: var(--disabled-color);\n      }\n\n      /* Field arrangement styling */\n      .field-title {\n        font-size: 16px !important;\n        font-weight: 600 !important;\n      \n        margin-bottom: 4px !important;\n        padding-bottom: 0 !important;\n        border-bottom: none !important;\n        display: block !important;\n        line-height: 1.2 !important;\n      }\n\n      .field-description {\n        font-size: 13px !important;\n        color: var(--secondary-text-color) !important;\n        margin-bottom: 12px !important;\n        display: block !important;\n        opacity: 0.8 !important;\n        line-height: 1.4 !important;\n        font-weight: 400 !important;\n      }\n\n      /* Remove labels from ultra-color-picker when using external titles */\n      .settings-section ultra-color-picker .color-label {\n        display: none;\n      }\n\n      /* Prevent form fields from going off screen */\n      .property-input, .property-select {\n        max-width: 500px;\n      }\n\n      /* Apply max-width to ha-form elements */\n      .settings-section ha-form {\n        max-width: 500px;\n      }\n\n      /* Apply max-width to form inputs and selects */\n      .settings-section input,\n      .settings-section select,\n      .settings-section ha-textfield,\n      .settings-section ha-select {\n        max-width: 500px;\n      }\n      /* Give selects a consistent card background (scoped to bar module sections only) */\n      .bar-module-preview .settings-section ha-select {\n        background: var(--card-background-color) !important;\n        border: 1px solid var(--divider-color) !important;\n        border-radius: 6px !important;\n        padding: 4px 0 !important;\n        /* MWC menu and text field surfaces */\n        --mdc-theme-surface: var(--card-background-color);\n        --mdc-text-field-fill-color: var(--card-background-color);\n        --mdc-select-fill-color: var(--card-background-color);\n        --mdc-menu-surface-fill-color: var(--card-background-color);\n        --mdc-text-field-ink-color: var(--primary-text-color);\n        --mdc-text-field-outline-color: var(--divider-color);\n        --mdc-select-dropdown-icon-color: var(--secondary-text-color);\n        --mdc-theme-text-primary-on-background: var(--primary-text-color);\n        --mdc-theme-on-surface: var(--primary-text-color);\n      }\n\n      /* Ensure ha-form selects inherit same surface in all contexts */\n      .bar-module-preview .settings-section ha-form ha-select {\n        --mdc-theme-surface: var(--card-background-color);\n        --mdc-text-field-fill-color: var(--card-background-color);\n        --mdc-select-fill-color: var(--card-background-color);\n        --mdc-menu-surface-fill-color: var(--card-background-color);\n        --mdc-text-field-ink-color: var(--primary-text-color);\n        --mdc-text-field-outline-color: var(--divider-color);\n        --mdc-select-dropdown-icon-color: var(--secondary-text-color);\n        --mdc-theme-text-primary-on-background: var(--primary-text-color);\n        --mdc-theme-on-surface: var(--primary-text-color);\n      }\n\n      /* Give animation selects a proper background */\n      .settings-section[data-animation] ha-select,\n      .animation-select-group ha-select {\n        background: var(--card-background-color) !important;\n        border: 1px solid var(--divider-color) !important;\n        border-radius: 6px !important;\n        padding: 4px 0 !important;\n      }\n      /* Ensure percentage type dropdown has standard background container */\n      .percentage-type-group ha-select {\n        background: var(--card-background-color) !important;\n        border: 1px solid var(--divider-color) !important;\n        border-radius: 6px !important;\n        padding: 4px 0 !important;\n      }\n\n      /* Fix slider and input field layouts */\n      .settings-section .field-group {\n        max-width: 100%;\n        overflow: visible;\n        align-items: stretch;\n      }\n\n      /* Ensure slider containers don\'t get cut off */\n      .settings-section ha-form[style*="flex: 1"] {\n        min-width: 200px;\n        flex: 1 1 200px;\n      }\n\n      /* Fix input field containers */\n      .settings-section input[type="number"] {\n        min-width: 60px;\n        max-width: 80px;\n        flex-shrink: 0;\n      }\n\n      /* Ensure proper spacing for slider + input combos */\n      .settings-section div[style*="display: flex; gap: 8px"] {\n        gap: 8px !important;\n        align-items: center !important;\n        flex-wrap: nowrap !important;\n        min-width: 0;\n      }\n\n      .settings-section div[style*="display: flex; gap: 12px"] {\n        gap: 12px !important;\n        align-items: center !important;\n        flex-wrap: nowrap !important;\n        min-width: 0;\n      }\n\n      /* Prevent overflow in gradient editor */\n      .gradient-editor {\n        max-width: 100%;\n        overflow: visible;\n      }\n\n      .gradient-stop {\n        max-width: 100%;\n        overflow: visible;\n        position: relative;\n      }\n\n      /* Gradient stop drag handle styling */\n      .gradient-stop .drag-handle {\n        transition: all 0.2s ease;\n      }\n\n      .gradient-stop:hover .drag-handle {\n        color: var(--primary-color) !important;\n        transform: scale(1.1);\n      }\n\n      /* Ultra color picker sizing */\n      ultra-color-picker {\n        min-width: 40px;\n        max-width: 60px;\n        flex-shrink: 0;\n      }\n\n      /* Ensure gradient controls don\'t overflow */\n      .gradient-stops {\n        max-width: 100%;\n        overflow: visible;\n      }\n\n      /* Hide automatic value displays from ha-form sliders to prevent cut-off */\n      .settings-section ha-form ha-slider::part(value-display),\n      .settings-section ha-form mwc-slider::part(value-display),\n      .settings-section ha-form ha-slider .value-display,\n      .settings-section ha-form mwc-slider .value-display {\n        display: none !important;\n      }\n\n      /* Hide any automatic number displays that might appear next to sliders */\n      .settings-section ha-form .slider-value,\n      .settings-section ha-form .current-value,\n      .settings-section ha-form .number-display {\n        display: none !important;\n      }\n\n      /* Override any default slider value display styles */\n      .settings-section ha-form[data-field*="size"] .mdc-slider-value-indicator,\n      .settings-section ha-form[data-field*="size"] .value-indicator {\n        display: none !important;\n      }\n\n      /* More comprehensive hiding of slider value displays */\n      .settings-section ha-form ha-textfield[type="number"],\n      .settings-section ha-form mwc-textfield[type="number"],\n      .settings-section ha-form .number-input-display {\n        display: none !important;\n      }\n\n      /* Target specific Home Assistant slider value containers */\n      .settings-section ha-form .form-group .number-display,\n      .settings-section ha-form .ha-form-number .display-value,\n      .settings-section ha-form [role="slider"] + *:not(.mdc-slider-track),\n      .settings-section ha-form .mdc-slider + .value-display {\n        display: none !important;\n      }\n\n      /* Ensure sliders take full width without value displays */\n      .settings-section ha-form .mdc-slider,\n      .settings-section ha-form ha-slider {\n        width: 100% !important;\n        max-width: 100% !important;\n      }\n\n      /* Hide any text elements that might display current values */\n      .settings-section ha-form .field-wrapper > span:last-child,\n      .settings-section ha-form .form-control > span:last-child,\n      .settings-section ha-form .slider-container > span:last-child {\n        display: none !important;\n      }\n\n      /* Specifically target number displays in form groups */\n      .settings-section ha-form .form-group > *:last-child:not(ha-slider):not(.mdc-slider):not(input[type="range"]) {\n        display: none !important;\n      }\n\n      /* Custom Slider Controls - Optimized Design */\n      .number-range-control {\n        display: flex;\n        gap: 8px;\n        align-items: center;\n      }\n\n      .range-slider {\n        flex: 0 0 65%;\n        height: 6px;\n        background: var(--divider-color);\n        border-radius: 3px;\n        outline: none;\n        appearance: none;\n        -webkit-appearance: none;\n        cursor: pointer;\n        transition: all 0.2s ease;\n        min-width: 0;\n      }\n\n      .range-slider::-webkit-slider-thumb {\n        appearance: none;\n        -webkit-appearance: none;\n        width: 18px;\n        height: 18px;\n        background: var(--primary-color);\n        border-radius: 50%;\n        cursor: pointer;\n        transition: all 0.2s ease;\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n      }\n\n      .range-slider::-moz-range-thumb {\n        width: 18px;\n        height: 18px;\n        background: var(--primary-color);\n        border-radius: 50%;\n        cursor: pointer;\n        border: none;\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n      }\n\n      .range-slider:hover {\n        background: var(--primary-color);\n        opacity: 0.7;\n      }\n\n      .range-slider:hover::-webkit-slider-thumb {\n        transform: scale(1.1);\n      }\n\n      .range-slider:hover::-moz-range-thumb {\n        transform: scale(1.1);\n      }\n\n      .range-input {\n        flex: 0 0 20%;\n        padding: 6px 8px !important;\n        border: 1px solid var(--divider-color);\n        border-radius: 4px;\n        background: var(--secondary-background-color);\n        color: var(--primary-text-color);\n        font-size: 13px;\n        text-align: center;\n        transition: all 0.2s ease;\n        box-sizing: border-box;\n      }\n\n      .range-input:focus {\n        outline: none;\n        border-color: var(--primary-color);\n        box-shadow: 0 0 0 2px rgba(var(--rgb-primary-color), 0.2);\n      }\n\n      .range-reset-btn {\n        width: 32px;\n        height: 32px;\n        padding: 0;\n        border: 1px solid var(--divider-color);\n        border-radius: 4px;\n        background: var(--secondary-background-color);\n        color: var(--primary-text-color);\n        cursor: pointer;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        transition: all 0.2s ease;\n        flex-shrink: 0;\n      }\n\n      .range-reset-btn:hover {\n        background: var(--primary-color);\n        color: var(--text-primary-color);\n        border-color: var(--primary-color);\n      }\n\n      .range-reset-btn ha-icon {\n        font-size: 14px;\n      }\n\n      /* Conditional Fields Grouping - Reusable Pattern */\n      .conditional-fields-group {\n        margin-top: 16px;\n        border-left: 4px solid var(--primary-color);\n        background: rgba(var(--rgb-primary-color), 0.08);\n        border-radius: 0 8px 8px 0;\n        overflow: hidden;\n        transition: all 0.2s ease;\n      }\n\n      .conditional-fields-group:hover {\n        background: rgba(var(--rgb-primary-color), 0.12);\n        border-left-color: var(--primary-color);\n      }\n\n      .conditional-fields-header {\n        background: rgba(var(--rgb-primary-color), 0.15);\n        padding: 12px 16px;\n        font-size: 14px;\n        font-weight: 600;\n        color: var(--primary-color);\n        border-bottom: 1px solid rgba(var(--rgb-primary-color), 0.2);\n        text-transform: uppercase;\n        letter-spacing: 0.5px;\n        margin: 0;\n      }\n\n      .conditional-fields-content {\n        padding: 16px;\n        background: transparent;\n      }\n\n      /* Remove top margin from first field in conditional groups */\n      .conditional-fields-content > .field-title:first-child {\n        margin-top: 0 !important;\n      }\n\n      /* Ensure proper spacing within conditional field groups */\n      .conditional-fields-content .field-title {\n     \n      }\n\n      .conditional-fields-content .field-description {\n        color: var(--secondary-text-color);\n        opacity: 0.9;\n      }\n\n      /* Animation for conditional fields appearing */\n      .conditional-fields-group {\n        animation: slideInFromLeft 0.3s ease-out;\n      }\n\n      @keyframes slideInFromLeft {\n        from {\n          opacity: 0;\n          transform: translateX(-10px);\n        }\n        to {\n          opacity: 1;\n          transform: translateX(0);\n        }\n      }\n\n      /* Make conditional fields responsive */\n      @media (max-width: 768px) {\n        .conditional-fields-group {\n          border-left-width: 3px;\n        }\n        \n        .conditional-fields-header {\n          padding: 10px 12px;\n          font-size: 13px;\n        }\n        \n        .conditional-fields-content {\n          padding: 12px;\n        }\n      }\n\n      /* ==========================\n         Bar Animations\n         These classes animate the .bar-fill element when triggered\n         ========================== */\n      .bar-fill.bar-anim-charging::after {\n        content: \'\';\n        position: absolute; inset: 0; pointer-events: none;\n        background-image: repeating-linear-gradient(45deg, rgba(255,255,255,0.25) 0, rgba(255,255,255,0.25) 10px, transparent 10px, transparent 20px);\n        background-size: 28px 28px;\n        animation: charging-stripes 1.2s linear infinite;\n      }\n      @keyframes charging-stripes { 0% { background-position: 0 0; } 100% { background-position: 28px 0; } }\n\n      .bar-fill.bar-anim-pulse { animation: bar-pulse 1.6s ease-in-out infinite; }\n      @keyframes bar-pulse { 0%,100% { filter: brightness(1); } 50% { filter: brightness(1.3); } }\n\n      .bar-fill.bar-anim-blink { animation: bar-blink 1s steps(2, start) infinite; }\n      @keyframes bar-blink { 0% { opacity: 1; } 50% { opacity: 0.3; } 100% { opacity: 1; } }\n\n      .bar-fill.bar-anim-bounce { animation: bar-bounce 1.2s ease-in-out infinite; transform-origin: center; }\n      @keyframes bar-bounce { 0%,100% { transform: translateY(0); } 50% { transform: translateY(-2px); } }\n\n      .bar-fill.bar-anim-glow { box-shadow: 0 0 10px currentColor, 0 0 20px currentColor; animation: bar-glow 1.5s ease-in-out infinite; }\n      @keyframes bar-glow { 0%,100% { filter: brightness(1); } 50% { filter: brightness(1.4); } }\n\n      .bar-fill.bar-anim-rainbow::after { content:\'\'; position:absolute; inset:0; pointer-events:none; background: linear-gradient(90deg, red, orange, yellow, green, cyan, blue, violet); background-size: 400% 100%; mix-blend-mode: overlay; opacity: 0.9; animation: rainbow-shift 3s linear infinite; }\n      @keyframes rainbow-shift { 0% { background-position: 0% 50%; } 100% { background-position: 100% 50%; } }\n\n      /* Bubbles: two extended layers with discrete bubbles, animated bottom -> top */\n      .bar-fill.bar-anim-bubbles::before,\n      .bar-fill.bar-anim-bubbles::after {\n        content: \'\';\n        position: absolute;\n        left: 0; right: 0;\n        top: -220%;\n        height: 440%;\n        pointer-events: none;\n        will-change: transform, opacity;\n        background-repeat: no-repeat;\n        filter: none;\n      }\n      /* Layer 1 (faster, fewer bubbles) */\n      .bar-fill.bar-anim-bubbles::before {\n        background:\n          radial-gradient(circle at 8% 80%,  rgba(255,255,255,0.55) 0 6px, transparent 7px),\n          radial-gradient(circle at 22% 55%, rgba(255,255,255,0.45) 0 5px, transparent 6px),\n          radial-gradient(circle at 37% 72%, rgba(255,255,255,0.50) 0 7px, transparent 8px),\n          radial-gradient(circle at 49% 60%, rgba(255,255,255,0.42) 0 5px, transparent 6px),\n          radial-gradient(circle at 63% 82%, rgba(255,255,255,0.50) 0 6px, transparent 7px),\n          radial-gradient(circle at 77% 68%, rgba(255,255,255,0.46) 0 5px, transparent 6px),\n          radial-gradient(circle at 89% 78%, rgba(255,255,255,0.52) 0 6px, transparent 7px);\n        animation: bubbles-rise-layer1 7s linear infinite;\n        transform: translateY(0%);\n      }\n      /* Layer 2 (slower, different positions) */\n      .bar-fill.bar-anim-bubbles::after {\n        background:\n          radial-gradient(circle at 14% 84%, rgba(255,255,255,0.48) 0 7px, transparent 8px),\n          radial-gradient(circle at 30% 66%, rgba(255,255,255,0.40) 0 5px, transparent 6px),\n          radial-gradient(circle at 55% 82%, rgba(255,255,255,0.50) 0 6px, transparent 7px),\n          radial-gradient(circle at 71% 64%, rgba(255,255,255,0.44) 0 5px, transparent 6px),\n          radial-gradient(circle at 84% 78%, rgba(255,255,255,0.50) 0 7px, transparent 8px);\n        animation: bubbles-rise-layer2 10s linear infinite;\n        animation-delay: 1.2s;\n        transform: translateY(0%);\n      }\n      @keyframes bubbles-rise-layer1 {\n        0%   { transform: translateY(0%); opacity: 0; }\n        22%  { opacity: 1; }\n        88%  { opacity: 1; }\n        100% { transform: translateY(-58%); opacity: 0; }\n      }\n      @keyframes bubbles-rise-layer2 {\n        0%   { transform: translateY(0%); opacity: 0; }\n        26%  { opacity: 1; }\n        88%  { opacity: 1; }\n        100% { transform: translateY(-58%); opacity: 0; }\n      }\n\n      .bar-fill.bar-anim-fill { animation: bar-fill-wave 1.5s ease-in-out infinite; }\n      @keyframes bar-fill-wave { 0%,100% { filter: saturate(1); } 50% { filter: saturate(1.4); } }\n\n      .bar-fill.bar-anim-ripple::after {\n        content: \'\';\n        position: absolute; inset: 0; pointer-events: none;\n        background: linear-gradient(90deg, transparent 0%, rgba(255,255,255,0.65) 20%, transparent 40%);\n        background-size: 200% 100%;\n        animation: ripple-sweep 1.1s ease-in-out infinite;\n        opacity: 0.9;\n      }\n      @keyframes ripple-sweep {\n        0% { background-position-x: -50%; }\n        100% { background-position-x: 150%; }\n      }\n\n      /* Traffic: moving hazard chevrons left->right to evoke flowing traffic lanes */\n      .bar-fill.bar-anim-traffic::after {\n        content:\'\'; position:absolute; inset:0; pointer-events:none; opacity: 0.95;\n        background-image:\n          linear-gradient(135deg, rgba(255,255,255,0.00) 0 40%, rgba(255,255,255,0.25) 40% 60%, rgba(255,255,255,0.00) 60% 100%),\n          linear-gradient(-135deg, rgba(255,255,255,0.00) 0 40%, rgba(255,255,255,0.25) 40% 60%, rgba(255,255,255,0.00) 60% 100%);\n        background-size: 44px 100%, 44px 100%;\n        background-position: 0 0, 22px 0;\n        animation: traffic-chevrons 1s linear infinite;\n        mix-blend-mode: screen;\n      }\n      @keyframes traffic-chevrons { 0% { background-position: 0 0, 22px 0; } 100% { background-position: 44px 0, 66px 0; } }\n\n      /* Traffic Flow: thicker bands with alternating opacity, moving left->right */\n      \n\n      .bar-fill.bar-anim-heartbeat { animation: heartbeat 1.2s ease-in-out infinite; transform-origin: center; }\n      @keyframes heartbeat { 0%,100% { transform: scale(1); } 20% { transform: scale(1.02); } 40% { transform: scale(0.99); } 60% { transform: scale(1.02); } 80% { transform: scale(1); } }\n\n      .bar-fill.bar-anim-flicker { animation: flicker 2s infinite; }\n      @keyframes flicker { 0%,19%,21%,23%,25%,54%,56%,100%{ opacity:1 } 20%,24%,55%{ opacity:0.4 } }\n\n      .bar-fill.bar-anim-shimmer { position: relative; overflow: hidden; }\n      .bar-fill.bar-anim-shimmer::after { content:\'\'; position:absolute; top:0; bottom:0; width:40%; left:-40%; background: linear-gradient(90deg, transparent, rgba(255,255,255,0.35), transparent); animation: shimmer-move 1.4s ease-in-out infinite; }\n      @keyframes shimmer-move { 0% { left: -40%; } 100% { left: 120%; } }\n\n      .bar-fill.bar-anim-vibrate { animation: vibrate 0.15s linear infinite; }\n      @keyframes vibrate { 0% { transform: translate(0); } 25% { transform: translate(0.5px,-0.5px); } 50% { transform: translate(-0.5px,0.5px); } 75% { transform: translate(0.5px,0.5px); } 100% { transform: translate(0); } }\n    '}styleObjectToCss(t){return Object.entries(t).map((([t,e])=>`${this.camelToKebab(t)}: ${e}`)).join("; ")}camelToKebab(t){return t.replace(/([a-z0-9]|(?=[A-Z]))([A-Z])/g,"$1-$2").toLowerCase()}getBackgroundImageCSS(t,e){const i=t.background_image_type,o=t.background_image,n=t.background_image_entity;switch(i){case"upload":if(o)return o.startsWith("/api/image/serve/")?`url("${this.getImageUrl(e,o)}")`:(o.startsWith("data:image/"),`url("${o}")`);break;case"entity":if(n&&e){const t=e.states[n];if(t){const e=t.attributes.entity_picture||t.attributes.image||t.state;if(e&&"unknown"!==e&&"unavailable"!==e)return`url("${e}")`}}break;case"url":if(o)return`url("${o}")`;break;default:return"none"}return"none"}getImageUrl(t,e){if(!e)return"";if(e.startsWith("http"))return e;if(e.startsWith("data:image/"))return e;if(e.includes("/api/image/serve/")){const i=e.match(/\/api\/image\/serve\/([^\/]+)/);if(i&&i[1]){const o=i[1];try{return`${(t.hassUrl?t.hassUrl():"").replace(/\/$/,"")}/api/image/serve/${o}/original`}catch(t){return e}}return e}return e.startsWith("/")?`${(t.hassUrl?t.hassUrl():"").replace(/\/$/,"")}${e}`:e}getBarSizeFromHeight(t){return t<=12?"thin":t<=20?"regular":t<=30?"thick":"thiccc"}getBarRadiusFromStyle(t){return 0===t?"square":t<8?"rounded-square":"round"}interpolateColor(t,e,i){const o=this.hexToRgb(t),n=this.hexToRgb(e);if(!o||!n)return t;const a=Math.round(o.r+(n.r-o.r)*i),r=Math.round(o.g+(n.g-o.g)*i),s=Math.round(o.b+(n.b-o.b)*i);return this.rgbToHex(a,r,s)}hexToRgb(t){if(!t.startsWith("#"))return null;const e=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(t);return e?{r:parseInt(e[1],16),g:parseInt(e[2],16),b:parseInt(e[3],16)}:null}rgbToHex(t,e,i){return`#${((1<<24)+(t<<16)+(e<<8)+i).toString(16).slice(1)}`}addPixelUnit(t){return t?/^\d+$/.test(t)?`${t}px`:/^[\d\s]+$/.test(t)?t.split(" ").map((t=>t.trim()?`${t}px`:t)).join(" "):t:t}}function Kt(t,e){if(!e)return"";if(e.startsWith("http"))return e;if(e.startsWith("data:image/"))return e;if(e.includes("/api/image/serve/")){const i=e.match(/\/api\/image\/serve\/([^\/]+)/);if(i&&i[1]){const o=i[1];try{return`${(t.hassUrl?t.hassUrl():"").replace(/\/$/,"")}/api/image/serve/${o}/original`}catch(t){return e}}return e}if(e.startsWith("local/")||e.includes("/local/")||e.startsWith("media-source://")){const i=e.replace(/^\/?local\//,"").replace(/^media-source:\/\/media_source\/local\//,"");return`${(t.hassUrl?t.hassUrl():"").replace(/\/$/,"")}/local/${i}`}return e.startsWith("/")?`${(t.hassUrl?t.hassUrl():"").replace(/\/$/,"")}${e}`:e}class Zt extends xt{constructor(){super(...arguments),this.metadata={type:"icon",title:"Icons",description:"Interactive icon buttons",author:"WJD Designs",version:"1.0.0",icon:"mdi:circle",category:"interactive",tags:["icon","button","interactive","control"]},this._previewCollapsed=!1,this._localStylesInjected=!1}_injectGlobalStyles(){if(!Zt._globalStylesInjected&&"undefined"!=typeof document){const t="uvc-icon-module-styles";if(!document.getElementById(t)){const e=document.createElement("style");e.id=t,e.textContent=this.getStyles()+"\n"+Zt._ANIMATION_KEYFRAMES,document.head.appendChild(e)}Zt._globalStylesInjected=!0}}_hashString(t){let e=0;if(0===t.length)return e.toString();for(let i=0;i<t.length;i++)e=(e<<5)-e+t.charCodeAt(i),e|=0;return Math.abs(e).toString(36)}_highlightJinja2(t){if(!t)return"";let e=t.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;");return e=e.replace(/(\{\{[\s\S]*?\}\})/g,'<span style="color: #569cd6;">$1</span>'),e=e.replace(/(\{%[\s\S]*?%\})/g,'<span style="color: #c586c0;">$1</span>'),e=e.replace(/((['"`])[^'"`]*?\2)/g,'<span style="color: #ce9178;">$1</span>'),["if","else","elif","endif","for","endfor","in","not","and","or","is","true","false","none","True","False","None"].forEach((t=>{const i=new RegExp(`\\b(${t})\\b`,"g");e=e.replace(i,'<span style="color: #569cd6;">$1</span>')})),e=e.replace(/\b([a-zA-Z_][a-zA-Z0-9_]*)\s*\(/g,'<span style="color: #dcdcaa;">$1</span>('),e=e.replace(/\|\s*([a-zA-Z_][a-zA-Z0-9_]*)/g,'| <span style="color: #dcdcaa;">$1</span>'),e=e.replace(/\b(\d+(?:\.\d+)?)\b/g,'<span style="color: #b5cea8;">$1</span>'),e=e.replace(/(==|!=|<=|>=|<|>|\+|-|\*|\/|%)/g,'<span style="color: #d4d4d4;">$1</span>'),e}createDefault(t,e){return{id:t||this.generateId("icon"),type:"icon",icons:[{id:this.generateId("icon-item"),entity:"weather.forecast_home",name:"",icon_inactive:"mdi:weather-partly-cloudy",icon_active:"mdi:weather-partly-cloudy",inactive_state:"",active_state:"",custom_inactive_state_text:"",custom_active_state_text:"",custom_inactive_name_text:"",custom_active_name_text:"",inactive_template_mode:!1,inactive_template:"",active_template_mode:!1,active_template:"",use_entity_color_for_icon:!1,color_inactive:"var(--secondary-text-color)",color_active:"var(--primary-color)",inactive_icon_color:"var(--secondary-text-color)",active_icon_color:"var(--primary-color)",inactive_name_color:"var(--primary-text-color)",active_name_color:"var(--primary-text-color)",inactive_state_color:"var(--secondary-text-color)",active_state_color:"var(--secondary-text-color)",show_name_when_inactive:!0,show_state_when_inactive:!0,show_icon_when_inactive:!0,show_name_when_active:!0,show_state_when_active:!0,show_icon_when_active:!0,show_state:!0,show_name:!0,show_units:!0,enable_hover_effect:!1,icon_size:26,text_size:14,name_icon_gap:8,name_state_gap:2,icon_state_gap:4,active_icon_size:26,inactive_icon_size:26,active_text_size:14,inactive_text_size:14,state_size:14,active_state_size:14,inactive_state_size:14,icon_size_locked:!0,text_size_locked:!0,state_size_locked:!0,active_icon_locked:!0,active_icon_color_locked:!1,active_icon_background_locked:!0,active_icon_background_color_locked:!0,active_name_locked:!0,active_name_color_locked:!0,active_state_locked:!1,active_state_color_locked:!0,icon_background:"none",use_entity_color_for_icon_background:!1,icon_background_color:"transparent",inactive_icon_animation:"none",active_icon_animation:"none",vertical_alignment:"center",container_width:void 0,container_background_shape:"none",container_background_color:"#808080",tap_action:{action:"nothing"},hold_action:{action:"nothing"},double_tap_action:{action:"nothing"},click_action:"toggle",double_click_action:"none",hold_action_legacy:"none",navigation_path:"",url:"",service:"",service_data:{},template_mode:!1,template:"",dynamic_icon_template_mode:!1,dynamic_icon_template:"",dynamic_color_template_mode:!1,dynamic_color_template:""}],columns:3,gap:16,tap_action:{action:"nothing"},hold_action:{action:"nothing"},double_tap_action:{action:"nothing"},enable_hover_effect:!0,hover_background_color:"var(--divider-color)"}}renderGeneralTab(t,e,i,o){const n=t;return q`
      ${this.injectUcFormStyles()}
      <div class="module-general-settings">
        ${n.icons.map(((t,i)=>q`
            <div class="icon-settings-container">
              <!-- Entity Configuration -->
              ${this.renderSettingsSection("Entity Configuration","Configure the entity and active/inactive states",[{title:"Entity",description:"Select the entity this icon represents",hass:e,data:{entity:t.entity||""},schema:[this.entityField("entity")],onChange:t=>{const a=t.detail.value.entity,r={entity:a};if(a&&(null==e?void 0:e.states[a])){const t=Lt.getEntityIcon(a,e);t&&(r.icon_inactive=t,!1!==n.icons[i].active_icon_locked&&(r.icon_active=t))}if(a&&this._isBinaryEntity(a)){const t=n.icons[i];t.active_state||t.inactive_state||(r.active_state="on",r.inactive_state="off")}this._updateIcon(n,i,r,o)}},{title:"Inactive State",description:'State value considered "inactive" (leave blank to use actual entity state)',hass:e,data:{inactive_state:t.inactive_state||""},schema:[this.textField("inactive_state")],onChange:t=>this._updateIcon(n,i,{inactive_state:t.detail.value.inactive_state},o)},{title:"Active State",description:'State value considered "active" (leave blank to use actual entity state)',hass:e,data:{active_state:t.active_state||""},schema:[this.textField("active_state")],onChange:t=>this._updateIcon(n,i,{active_state:t.detail.value.active_state},o)}])}

              <!-- Icon Section -->
              <div class="settings-section" style="margin-bottom: 24px;">
                <div class="section-title">
                  <div style="display: flex; align-items: center; gap: 12px;">
                    <span>Icon</span>
                    <ha-switch
                      .checked=${!1!==t.show_icon_when_active&&!1!==t.show_icon_when_inactive}
                      @change=${t=>{const e=t.target.checked;this._updateIcon(n,i,{show_icon_when_active:e,show_icon_when_inactive:e},o)}}
                    ></ha-switch>
                  </div>
                </div>

                ${!1!==t.show_icon_when_active||!1!==t.show_icon_when_inactive?q`
                      <!-- Inactive Icon Section -->
                      <div style="margin-top: 16px;">
                        <details
                          style="border: 1px solid var(--divider-color); border-radius: 8px; background: var(--card-background-color);"
                          @toggle=${t=>{const e=t.target,i=e.querySelector("ha-icon");i&&(i.style.transform=e.open?"rotate(90deg)":"rotate(0deg)")}}
                        >
                          <summary
                            style="padding: 16px; font-size: 16px; font-weight: 600; color: var(--primary-color); cursor: pointer; background: var(--secondary-background-color); border-radius: 8px 8px 0 0; display: flex; align-items: center; gap: 8px;"
                          >
                            <ha-icon
                              icon="mdi:chevron-right"
                              style="transition: transform 0.2s;"
                            ></ha-icon>
                            Inactive Icon
                          </summary>
                          <div style="padding: 16px;">
                            ${this.renderSettingsSection("Inactive Icon Configuration","Configure the inactive icon settings",[{title:"Inactive Icon",description:"Icon to show when inactive",hass:e,data:{icon_inactive:t.icon_inactive||""},schema:[this.iconField("icon_inactive")],onChange:t=>this._updateIconWithLockSync(n,i,"icon_inactive",t.detail.value.icon_inactive,o)}])}

                            <div class="field-container" style="margin-bottom: 16px;">
                              <div class="field-title">Inactive Icon Color</div>
                              <div class="field-description">Color when inactive</div>
                              <ultra-color-picker
                                .value=${t.inactive_icon_color||"var(--secondary-text-color)"}
                                @value-changed=${t=>this._updateIconWithLockSync(n,i,"inactive_icon_color",t.detail.value,o)}
                              ></ultra-color-picker>
                            </div>

                            ${this.renderSettingsSection("Inactive Background","Configure the inactive background settings",[{title:"Inactive Background Shape",description:"Background shape when inactive",hass:e,data:{inactive_icon_background:t.inactive_icon_background||"none"},schema:[this.selectField("inactive_icon_background",[{value:"none",label:"None"},{value:"circle",label:"Circle"},{value:"square",label:"Square"},{value:"rounded-square",label:"Rounded Square"}])],onChange:t=>{const e=t.detail.value.inactive_icon_background,a={inactive_icon_background:e};e&&"none"!==e&&(a.inactive_icon_background_color="var(--divider-color)"),this._updateIcon(n,i,a,o)}}])}

                            <div class="field-container" style="margin-bottom: 16px;">
                              <div class="field-title">Inactive Background Color</div>
                              <div class="field-description">Background color when inactive</div>
                              <ultra-color-picker
                                .value=${t.inactive_icon_background_color||"transparent"}
                                @value-changed=${t=>this._updateIconWithLockSync(n,i,"inactive_icon_background_color",t.detail.value,o)}
                              ></ultra-color-picker>
                            </div>

                            <div class="field-container">
                              <div class="field-title">Inactive Icon Size</div>
                              <div class="field-description">Icon size when inactive</div>
                              ${this._renderSizeControl(n,i,o,"inactive_icon_size",t.inactive_icon_size||26,0,50,26)}
                            </div>
                          </div>
                        </details>
                      </div>

                      <!-- Active Icon Section -->
                      <div style="margin-top: 16px;">
                        <details
                          style="border: 1px solid var(--divider-color); border-radius: 8px; background: var(--card-background-color);"
                          @toggle=${t=>{const e=t.target,i=e.querySelector("ha-icon");i&&(i.style.transform=e.open?"rotate(90deg)":"rotate(0deg)")}}
                        >
                          <summary
                            style="padding: 16px; font-size: 16px; font-weight: 600; color: var(--primary-color); cursor: pointer; background: var(--secondary-background-color); border-radius: 8px 8px 0 0; display: flex; align-items: center; gap: 8px;"
                          >
                            <ha-icon
                              icon="mdi:chevron-right"
                              style="transition: transform 0.2s;"
                            ></ha-icon>
                            Active Icon
                          </summary>
                          <div style="padding: 16px;">
                            <div class="field-container" style="margin-bottom: 16px;">
                              <div class="field-title">Active Icon</div>
                              <div class="field-description">Icon to show when active</div>
                              ${this._renderFieldWithLock(n,i,o,"active_icon_locked","icon_active","icon_inactive",t.icon_active||t.icon_inactive||"","icon",e)}
                            </div>

                            <div class="field-container" style="margin-bottom: 16px;">
                              <div class="field-title">Active Icon Color</div>
                              <div class="field-description">Color when active</div>
                              ${this._renderFieldWithLock(n,i,o,"active_icon_color_locked","active_icon_color","inactive_icon_color",t.active_icon_color||"var(--primary-color)","color",e)}
                            </div>

                            <div class="field-container" style="margin-bottom: 16px;">
                              <div class="field-title">Active Background Shape</div>
                              <div class="field-description">Background shape when active</div>
                              ${this._renderFieldWithLock(n,i,o,"active_icon_background_locked","active_icon_background","inactive_icon_background",t.active_icon_background||"none","select",e,[{value:"none",label:"None"},{value:"circle",label:"Circle"},{value:"square",label:"Square"},{value:"rounded-square",label:"Rounded Square"}])}
                            </div>

                            <div class="field-container" style="margin-bottom: 16px;">
                              <div class="field-title">Active Background Color</div>
                              <div class="field-description">Background color when active</div>
                              ${this._renderFieldWithLock(n,i,o,"active_icon_background_color_locked","active_icon_background_color","inactive_icon_background_color",t.active_icon_background_color||"transparent","color",e)}
                            </div>

                            <div class="field-container">
                              <div class="field-title">Active Icon Size</div>
                              <div class="field-description">Icon size when active</div>
                              ${this._renderSizeControlWithLock(n,i,o,"icon_size","active_icon_size","inactive_icon_size",t.active_icon_size||26,0,50,26)}
                            </div>
                          </div>
                        </details>
                      </div>
                    `:""}
              </div>

              <!-- Name Section -->
              <div class="settings-section" style="margin-bottom: 24px;">
                <div class="section-title">
                  <div style="display: flex; align-items: center; gap: 12px;">
                    <span>Name</span>
                    <ha-switch
                      .checked=${!1!==t.show_name_when_active&&!1!==t.show_name_when_inactive}
                      @change=${t=>{const e=t.target.checked;this._updateIcon(n,i,{show_name_when_active:e,show_name_when_inactive:e},o)}}
                    ></ha-switch>
                  </div>
                </div>

                ${!1!==t.show_name_when_active||!1!==t.show_name_when_inactive?q`
                      <!-- Inactive Name Section -->
                      <div style="margin-top: 16px;">
                        <details
                          style="border: 1px solid var(--divider-color); border-radius: 8px; background: var(--card-background-color);"
                          @toggle=${t=>{const e=t.target,i=e.querySelector("ha-icon");i&&(i.style.transform=e.open?"rotate(90deg)":"rotate(0deg)")}}
                        >
                          <summary
                            style="padding: 16px; font-size: 16px; font-weight: 600; color: var(--primary-color); cursor: pointer; background: var(--secondary-background-color); border-radius: 8px 8px 0 0; display: flex; align-items: center; gap: 8px;"
                          >
                            <ha-icon
                              icon="mdi:chevron-right"
                              style="transition: transform 0.2s;"
                            ></ha-icon>
                            Inactive Name
                          </summary>
                          <div style="padding: 16px;">
                            ${this.renderSettingsSection("Inactive Name Configuration","Configure the inactive name settings",[{title:"Custom Inactive Name",description:"Override entity name when inactive (leave empty to use entity name)",hass:e,data:{custom_inactive_name_text:t.custom_inactive_name_text||""},schema:[this.textField("custom_inactive_name_text")],onChange:t=>this._updateIcon(n,i,{custom_inactive_name_text:t.detail.value.custom_inactive_name_text},o)}])}

                            <div class="field-container" style="margin-bottom: 16px;">
                              <div class="field-title">Inactive Name Color</div>
                              <div class="field-description">Name color when inactive</div>
                              <ultra-color-picker
                                .value=${t.inactive_name_color||"var(--primary-text-color)"}
                                @value-changed=${t=>this._updateIconWithLockSync(n,i,"inactive_name_color",t.detail.value,o)}
                              ></ultra-color-picker>
                            </div>

                            <div class="field-container">
                              <div class="field-title">Inactive Name Size</div>
                              <div class="field-description">Name text size when inactive</div>
                              ${this._renderSizeControl(n,i,o,"inactive_text_size",t.inactive_text_size||14,0,50,14)}
                            </div>
                          </div>
                        </details>
                      </div>

                      <!-- Active Name Section -->
                      <div style="margin-top: 16px;">
                        <details
                          style="border: 1px solid var(--divider-color); border-radius: 8px; background: var(--card-background-color);"
                          @toggle=${t=>{const e=t.target,i=e.querySelector("ha-icon");i&&(i.style.transform=e.open?"rotate(90deg)":"rotate(0deg)")}}
                        >
                          <summary
                            style="padding: 16px; font-size: 16px; font-weight: 600; color: var(--primary-color); cursor: pointer; background: var(--secondary-background-color); border-radius: 8px 8px 0 0; display: flex; align-items: center; gap: 8px;"
                          >
                            <ha-icon
                              icon="mdi:chevron-right"
                              style="transition: transform 0.2s;"
                            ></ha-icon>
                            Active Name
                          </summary>
                          <div style="padding: 16px;">
                            <div class="field-container" style="margin-bottom: 16px;">
                              <div class="field-title">Custom Active Name</div>
                              <div class="field-description">
                                Override entity name when active (leave empty to use entity name)
                              </div>
                              ${this._renderFieldWithLock(n,i,o,"active_name_locked","custom_active_name_text","custom_inactive_name_text",t.custom_active_name_text||"","text",e)}
                            </div>

                            <div class="field-container" style="margin-bottom: 16px;">
                              <div class="field-title">Active Name Color</div>
                              <div class="field-description">Name color when active</div>
                              ${this._renderFieldWithLock(n,i,o,"active_name_color_locked","active_name_color","inactive_name_color",t.active_name_color||"var(--primary-text-color)","color",e)}
                            </div>

                            <div class="field-container">
                              <div class="field-title">Active Name Size</div>
                              <div class="field-description">Name text size when active</div>
                              ${this._renderSizeControlWithLock(n,i,o,"text_size","active_text_size","inactive_text_size",t.active_text_size||t.inactive_text_size||14,0,50,12)}
                            </div>
                          </div>
                        </details>
                      </div>
                    `:""}
              </div>

              <!-- State Section -->
              <div class="settings-section" style="margin-bottom: 24px;">
                <div class="section-title">
                  <div style="display: flex; align-items: center; gap: 12px;">
                    <span>State</span>
                    <ha-switch
                      .checked=${!1!==t.show_state_when_active&&!1!==t.show_state_when_inactive}
                      @change=${t=>{const e=t.target.checked;this._updateIcon(n,i,{show_state_when_active:e,show_state_when_inactive:e},o)}}
                    ></ha-switch>
                  </div>
                </div>

                ${!1!==t.show_state_when_active||!1!==t.show_state_when_inactive?q`
                      <!-- Inactive State Section -->
                      <div style="margin-top: 16px;">
                        <details
                          style="border: 1px solid var(--divider-color); border-radius: 8px; background: var(--card-background-color);"
                          @toggle=${t=>{const e=t.target,i=e.querySelector("ha-icon");i&&(i.style.transform=e.open?"rotate(90deg)":"rotate(0deg)")}}
                        >
                          <summary
                            style="padding: 16px; font-size: 16px; font-weight: 600; color: var(--primary-color); cursor: pointer; background: var(--secondary-background-color); border-radius: 8px 8px 0 0; display: flex; align-items: center; gap: 8px;"
                          >
                            <ha-icon
                              icon="mdi:chevron-right"
                              style="transition: transform 0.2s;"
                            ></ha-icon>
                            Inactive State
                          </summary>
                          <div style="padding: 16px;">
                            ${this.renderSettingsSection("Inactive State Configuration","Configure the inactive state settings",[{title:"Custom Inactive State",description:"Custom text when inactive (leave empty to use actual state)",hass:e,data:{custom_inactive_state_text:t.custom_inactive_state_text||""},schema:[this.textField("custom_inactive_state_text")],onChange:t=>this._updateIcon(n,i,{custom_inactive_state_text:t.detail.value.custom_inactive_state_text},o)}])}

                            <div class="field-container" style="margin-bottom: 16px;">
                              <div class="field-title">Inactive State Color</div>
                              <div class="field-description">State color when inactive</div>
                              <ultra-color-picker
                                .value=${t.inactive_state_color||"var(--secondary-text-color)"}
                                @value-changed=${t=>this._updateIconWithLockSync(n,i,"inactive_state_color",t.detail.value,o)}
                              ></ultra-color-picker>
                            </div>

                            <div class="field-container">
                              <div class="field-title">Inactive State Size</div>
                              <div class="field-description">State text size when inactive</div>
                              ${this._renderSizeControl(n,i,o,"inactive_state_size",t.inactive_state_size||10,0,50,10)}
                            </div>
                          </div>
                        </details>
                      </div>

                      <!-- Active State Section -->
                      <div style="margin-top: 16px;">
                        <details
                          style="border: 1px solid var(--divider-color); border-radius: 8px; background: var(--card-background-color);"
                          @toggle=${t=>{const e=t.target,i=e.querySelector("ha-icon");i&&(i.style.transform=e.open?"rotate(90deg)":"rotate(0deg)")}}
                        >
                          <summary
                            style="padding: 16px; font-size: 16px; font-weight: 600; color: var(--primary-color); cursor: pointer; background: var(--secondary-background-color); border-radius: 8px 8px 0 0; display: flex; align-items: center; gap: 8px;"
                          >
                            <ha-icon
                              icon="mdi:chevron-right"
                              style="transition: transform 0.2s;"
                            ></ha-icon>
                            Active State
                          </summary>
                          <div style="padding: 16px;">
                            <div class="field-container" style="margin-bottom: 16px;">
                              <div class="field-title">Custom Active State</div>
                              <div class="field-description">
                                Custom text when active (leave empty to use actual state)
                              </div>
                              ${this._renderFieldWithLock(n,i,o,"active_state_locked","custom_active_state_text","custom_inactive_state_text",t.custom_active_state_text||"","text",e)}
                            </div>

                            <div class="field-container" style="margin-bottom: 16px;">
                              <div class="field-title">Active State Color</div>
                              <div class="field-description">State color when active</div>
                              ${this._renderFieldWithLock(n,i,o,"active_state_color_locked","active_state_color","inactive_state_color",t.active_state_color||"var(--secondary-text-color)","color",e)}
                            </div>

                            <div class="field-container">
                              <div class="field-title">Active State Size</div>
                              <div class="field-description">State text size when active</div>
                              ${this._renderSizeControlWithLock(n,i,o,"state_size","active_state_size","inactive_state_size",t.active_state_size||10,0,50,10)}
                            </div>
                          </div>
                        </details>
                      </div>
                    `:""}
              </div>

              <!-- Advanced Template Mode Section -->
              <div class="template-section" style="margin-bottom: 24px;">
                <div class="template-header">
                  <div class="switch-container">
                    <label class="switch-label">Advanced Template Mode</label>
                    <label class="switch">
                      <input
                        type="checkbox"
                        .checked=${t.template_mode||!1}
                        @change=${t=>{const e=t.target.checked;this._updateIcon(n,i,{template_mode:e},o)}}
                      />
                      <span class="slider round"></span>
                    </label>
                  </div>
                  <div class="template-description">
                    Use Jinja2 templates for advanced icon control. Templates can control visibility
                    (true/false to show/hide icons) and customize state text. Return custom text for
                    Active State, return actual entity state for Inactive State.
                  </div>
                </div>

                ${t.template_mode?q`
                      <div class="template-content">
                        <textarea
                          .value=${t.template||""}
                          @input=${t=>{const e=t.target;this._updateIcon(n,i,{template:e.value},o)}}
                          placeholder="{% if states('binary_sensor.example') == 'on' %}true{% else %}false{% endif %}"
                          class="template-editor"
                          rows="6"
                        ></textarea>
                        <div class="template-help">
                          <p><strong>For visibility control, return a boolean:</strong></p>
                          <ul>
                            <li>
                              <code>true</code>, <code>on</code>, <code>yes</code>, <code>1</code> →
                              Show icon (Active State)
                            </li>
                            <li>
                              <code>false</code>, <code>off</code>, <code>no</code>,
                              <code>0</code> → Hide icon (Inactive State)
                            </li>
                          </ul>
                          <p><strong>For custom state text, return a string:</strong></p>
                          <ul>
                            <li>
                              <code
                                >{% if states('weather.forecast_home') == 'cloudy' %}About to Rain{%
                                else %}{{ states('weather.forecast_home') }}{% endif %}</code
                              >
                              → When cloudy: shows "About to Rain" (Active), when not cloudy: shows
                              actual state (Inactive)
                            </li>
                            <li>
                              <code>{{ states('sensor.temperature') | round(1) }}°F</code> → Shows
                              formatted temperature and Active State is current
                            </li>
                          </ul>
                          <p>
                            <strong>Note:</strong> Use the same entity name throughout your template
                            to avoid "unknown" states
                          </p>
                        </div>
                      </div>
                    `:""}
              </div>

              <!-- Icon Animation Section -->
              ${this.renderSettingsSection("Icon Animation","Configure animations for active and inactive states",[{title:"Active Animation",description:"Animation when icon is active",hass:e,data:{active_icon_animation:t.active_icon_animation||"none"},schema:[this.selectField("active_icon_animation",[{value:"none",label:"None"},{value:"pulse",label:"Pulse"},{value:"spin",label:"Spin"},{value:"bounce",label:"Bounce"},{value:"flash",label:"Flash"},{value:"shake",label:"Shake"},{value:"vibrate",label:"Vibrate"},{value:"rotate-left",label:"Rotate Left"},{value:"rotate-right",label:"Rotate Right"},{value:"fade",label:"Fade"},{value:"scale",label:"Scale"},{value:"tada",label:"Tada"}])],onChange:t=>this._updateIcon(n,i,{active_icon_animation:t.detail.value.active_icon_animation},o)},{title:"Inactive Animation",description:"Animation when icon is inactive",hass:e,data:{inactive_icon_animation:t.inactive_icon_animation||"none"},schema:[this.selectField("inactive_icon_animation",[{value:"none",label:"None"},{value:"pulse",label:"Pulse"},{value:"spin",label:"Spin"},{value:"bounce",label:"Bounce"},{value:"flash",label:"Flash"},{value:"shake",label:"Shake"},{value:"vibrate",label:"Vibrate"},{value:"rotate-left",label:"Rotate Left"},{value:"rotate-right",label:"Rotate Right"},{value:"fade",label:"Fade"},{value:"scale",label:"Scale"},{value:"tada",label:"Tada"}])],onChange:t=>this._updateIcon(n,i,{inactive_icon_animation:t.detail.value.inactive_icon_animation},o)}])}
            </div>
          `))}
      </div>
    `}renderActionsTab(t,e,i,o){return $t.render(t,e,i,o,(()=>this.injectUcFormStyles()))}renderOtherTab(t,e,i,o){const n=t;return q`
      <div class="module-other-settings">
        ${n.icons.map(((t,i)=>{var a,r,s,l,d,c;return q`
            <div
              class="settings-section"
              style="background: var(--secondary-background-color); border-radius: 8px; padding: 16px; margin-bottom: 32px;"
            >
              <!-- Show Units Toggle -->
              ${this.renderSettingsSection("Display Options","Configure what information to display",[{title:"Show Units",description:"Display the units of measurement alongside the entity state",hass:e,data:{show_units:t.show_units?"yes":"no"},schema:[this.selectField("show_units",[{value:"no",label:"No"},{value:"yes",label:"Yes"}])],onChange:t=>this._updateIcon(n,i,{show_units:"yes"===t.detail.value.show_units},o)},{title:"Enable Hover Effect",description:"Enable hover effects when mouse is over the icon",hass:e,data:{enable_hover_effect:t.enable_hover_effect?"yes":"no"},schema:[this.selectField("enable_hover_effect",[{value:"no",label:"No"},{value:"yes",label:"Yes"}])],onChange:t=>this._updateIcon(n,i,{enable_hover_effect:"yes"===t.detail.value.enable_hover_effect},o)}])}

              <!-- Name-Icon Spacing Control - Only show when both Name and Icon are enabled -->
              ${!1===t.show_name_when_active&&!1===t.show_name_when_inactive||!1===t.show_icon_when_active&&!1===t.show_icon_when_inactive?"":q`
                    <div class="settings-section" style="margin-bottom: 24px;">
                      <div class="field-container" style="margin-bottom: 24px;">
                        <div
                          class="field-title"
                          style="font-size: 16px !important; font-weight: 600 !important; margin-bottom: 4px;"
                        >
                          Name-Icon Spacing
                        </div>
                        <div
                          class="field-description"
                          style="font-size: 13px !important; font-weight: 400 !important; margin-bottom: 12px; opacity: 0.8; line-height: 1.4;"
                        >
                          Adjust the spacing between the name and icon elements
                        </div>
                        <div
                          class="gap-control-container"
                          style="display: flex; align-items: center; gap: 12px;"
                        >
                          <input
                            type="range"
                            class="gap-slider"
                            min="0"
                            max="20"
                            step="1"
                            .value="${null!==(a=t.name_icon_gap)&&void 0!==a?a:8}"
                            @input=${t=>{const e=t.target,a=Number(e.value);this._updateIcon(n,i,{name_icon_gap:a},o)}}
                          />
                          <input
                            type="number"
                            class="gap-input"
                            style="width: 50px !important; max-width: 50px !important; min-width: 50px !important; padding: 4px 6px !important; font-size: 13px !important;"
                            min="0"
                            max="20"
                            step="1"
                            .value="${null!==(r=t.name_icon_gap)&&void 0!==r?r:8}"
                            @input=${t=>{const e=t.target,a=Number(e.value);isNaN(a)||this._updateIcon(n,i,{name_icon_gap:a},o)}}
                            @keydown=${t=>{if("ArrowUp"===t.key||"ArrowDown"===t.key){t.preventDefault();const e=t.target,a=isNaN(Number(e.value))?12:Number(e.value),r="ArrowUp"===t.key?1:-1,s=Math.max(0,Math.min(20,a+r));this._updateIcon(n,i,{name_icon_gap:s},o)}}}
                          />
                          <button
                            class="reset-btn"
                            @click=${()=>this._updateIcon(n,i,{name_icon_gap:8},o)}
                            title="Reset to default (8px)"
                          >
                            <ha-icon icon="mdi:refresh"></ha-icon>
                          </button>
                        </div>
                      </div>
                    </div>
                  `}

              <!-- Name-State Spacing Control - Only show when both Name and State are enabled -->
              ${!1===t.show_name_when_active&&!1===t.show_name_when_inactive||!1===t.show_state_when_active&&!1===t.show_state_when_inactive?"":q`
                    <div class="settings-section" style="margin-bottom: 24px;">
                      <div class="field-container" style="margin-bottom: 24px;">
                        <div
                          class="field-title"
                          style="font-size: 16px !important; font-weight: 600 !important; margin-bottom: 4px;"
                        >
                          Name-State Spacing
                        </div>
                        <div
                          class="field-description"
                          style="font-size: 13px !important; font-weight: 400 !important; margin-bottom: 12px; opacity: 0.8; line-height: 1.4;"
                        >
                          Adjust the spacing between the name and state elements
                        </div>
                        <div
                          class="gap-control-container"
                          style="display: flex; align-items: center; gap: 12px;"
                        >
                          <input
                            type="range"
                            class="gap-slider"
                            min="0"
                            max="20"
                            step="1"
                            .value="${null!==(s=t.name_state_gap)&&void 0!==s?s:2}"
                            @input=${t=>{const e=t.target,a=Number(e.value);this._updateIcon(n,i,{name_state_gap:a},o)}}
                          />
                          <input
                            type="number"
                            class="gap-input"
                            style="width: 50px !important; max-width: 50px !important; min-width: 50px !important; padding: 4px 6px !important; font-size: 13px !important;"
                            min="0"
                            max="20"
                            step="1"
                            .value="${null!==(l=t.name_state_gap)&&void 0!==l?l:2}"
                            @input=${t=>{const e=t.target,a=Number(e.value);isNaN(a)||this._updateIcon(n,i,{name_state_gap:a},o)}}
                            @keydown=${t=>{if("ArrowUp"===t.key||"ArrowDown"===t.key){t.preventDefault();const e=t.target,a=isNaN(Number(e.value))?12:Number(e.value),r="ArrowUp"===t.key?1:-1,s=Math.max(0,Math.min(20,a+r));this._updateIcon(n,i,{name_state_gap:s},o)}}}
                          />
                          <button
                            class="reset-btn"
                            @click=${()=>this._updateIcon(n,i,{name_state_gap:2},o)}
                            title="Reset to default (2px)"
                          >
                            <ha-icon icon="mdi:refresh"></ha-icon>
                          </button>
                        </div>
                      </div>
                    </div>
                  `}

              <!-- Icon-State Spacing Control - Only show when Icon and State are enabled but Name is disabled -->
              ${!1===t.show_icon_when_active&&!1===t.show_icon_when_inactive||!1===t.show_state_when_active&&!1===t.show_state_when_inactive||!1!==t.show_name_when_active||!1!==t.show_name_when_inactive?"":q`
                    <div class="settings-section" style="margin-bottom: 24px;">
                      <div class="field-container" style="margin-bottom: 24px;">
                        <div
                          class="field-title"
                          style="font-size: 16px !important; font-weight: 600 !important; margin-bottom: 4px;"
                        >
                          Icon-State Spacing
                        </div>
                        <div
                          class="field-description"
                          style="font-size: 13px !important; font-weight: 400 !important; margin-bottom: 12px; opacity: 0.8; line-height: 1.4;"
                        >
                          Adjust the spacing between the icon and state elements
                        </div>
                        <div
                          class="gap-control-container"
                          style="display: flex; align-items: center; gap: 12px;"
                        >
                          <input
                            type="range"
                            class="gap-slider"
                            min="0"
                            max="20"
                            step="1"
                            .value="${null!==(d=t.icon_state_gap)&&void 0!==d?d:4}"
                            @input=${t=>{const e=t.target,a=Number(e.value);this._updateIcon(n,i,{icon_state_gap:a},o)}}
                          />
                          <input
                            type="number"
                            class="gap-input"
                            style="width: 50px !important; max-width: 50px !important; min-width: 50px !important; padding: 4px 6px !important; font-size: 13px !important;"
                            min="0"
                            max="20"
                            step="1"
                            .value="${null!==(c=t.icon_state_gap)&&void 0!==c?c:4}"
                            @input=${t=>{const e=t.target,a=Number(e.value);isNaN(a)||this._updateIcon(n,i,{icon_state_gap:a},o)}}
                            @keydown=${t=>{if("ArrowUp"===t.key||"ArrowDown"===t.key){t.preventDefault();const e=t.target,a=isNaN(Number(e.value))?12:Number(e.value),r="ArrowUp"===t.key?1:-1,s=Math.max(0,Math.min(20,a+r));this._updateIcon(n,i,{icon_state_gap:s},o)}}}
                          />
                          <button
                            class="reset-btn"
                            @click=${()=>this._updateIcon(n,i,{icon_state_gap:4},o)}
                            title="Reset to default (4px)"
                          >
                            <ha-icon icon="mdi:refresh"></ha-icon>
                          </button>
                        </div>
                      </div>
                    </div>
                  `}

              <!-- Container Style Section -->
              <div
                class="settings-section"
                style="margin-bottom: 24px; padding: 16px; background: var(--card-background-color); border-radius: 8px;"
              >
                <div
                  class="section-title"
                  style="font-size: 18px !important; font-weight: 700 !important; text-transform: uppercase; color: var(--primary-color); margin-bottom: 16px; letter-spacing: 0.5px;"
                >
                  Container Style
                </div>

                <!-- Vertical Alignment -->
                <div class="settings-section" style="margin-bottom: 16px;">
                  <div
                    class="field-title"
                    style="font-size: 16px !important; font-weight: 600 !important; margin-bottom: 4px;"
                  >
                    Vertical Alignment
                  </div>
                  <div
                    class="field-description"
                    style="font-size: 13px !important; font-weight: 400 !important; margin-bottom: 12px; opacity: 0.8; line-height: 1.4;"
                  >
                    How to align the icon within the container
                  </div>
                  ${this.renderUcForm(e,{vertical_alignment:t.vertical_alignment||"center"},[this.selectField("vertical_alignment",[{value:"top",label:"Top"},{value:"center",label:"Center"},{value:"bottom",label:"Bottom"}])],(t=>this._updateIcon(n,i,{vertical_alignment:t.detail.value.vertical_alignment},o)),!1)}
                </div>

                <!-- Container Width -->
                <div class="settings-section" style="margin-bottom: 16px;">
                  <div
                    class="field-title"
                    style="font-size: 16px !important; font-weight: 600 !important; margin-bottom: 4px;"
                  >
                    Container Width
                  </div>
                  <div
                    class="field-description"
                    style="font-size: 13px !important; font-weight: 400 !important; margin-bottom: 12px; opacity: 0.8; line-height: 1.4;"
                  >
                    Maximum width of the icon container as percentage (auto by default)
                  </div>
                  <div class="field-container" style="margin-bottom: 24px;">
                    <div
                      class="gap-control-container"
                      style="display: flex; align-items: center; gap: 12px;"
                    >
                      <input
                        type="range"
                        class="gap-slider"
                        min="10"
                        max="100"
                        step="5"
                        .value="${t.container_width||""}"
                        @input=${t=>{const e=t.target,a=Number(e.value);this._updateIcon(n,i,{container_width:a},o)}}
                      />
                      <input
                        type="number"
                        class="gap-input"
                        style="width: 50px !important; max-width: 50px !important; min-width: 50px !important; padding: 4px 6px !important; font-size: 13px !important;"
                        min="10"
                        max="100"
                        step="5"
                        .value="${t.container_width||""}"
                        @input=${t=>{const e=t.target,a=Number(e.value);isNaN(a)||this._updateIcon(n,i,{container_width:a},o)}}
                        @keydown=${t=>{if("ArrowUp"===t.key||"ArrowDown"===t.key){t.preventDefault();const e=t.target,a=Number(e.value)||50,r="ArrowUp"===t.key?5:-5,s=Math.max(10,Math.min(100,a+r));this._updateIcon(n,i,{container_width:s},o)}}}
                      />
                      <button
                        class="reset-btn"
                        @click=${()=>this._updateIcon(n,i,{container_width:void 0},o)}
                        title="Reset to default (auto)"
                      >
                        <ha-icon icon="mdi:refresh"></ha-icon>
                      </button>
                    </div>
                  </div>
                </div>

                <!-- Container Background Shape -->
                <div class="settings-section" style="margin-bottom: 16px;">
                  <div
                    class="field-title"
                    style="font-size: 16px !important; font-weight: 600 !important; margin-bottom: 4px;"
                  >
                    Container Background Shape
                  </div>
                  <div
                    class="field-description"
                    style="font-size: 13px !important; font-weight: 400 !important; margin-bottom: 12px; opacity: 0.8; line-height: 1.4;"
                  >
                    Shape of the icon container background
                  </div>
                  ${this.renderUcForm(e,{container_background_shape:t.container_background_shape||"none"},[this.selectField("container_background_shape",[{value:"none",label:"None"},{value:"rounded",label:"Rounded"},{value:"square",label:"Square"},{value:"circle",label:"Circle"}])],(t=>this._updateIcon(n,i,{container_background_shape:t.detail.value.container_background_shape},o)),!1)}
                  ${t.container_background_shape&&"none"!==t.container_background_shape?q`
                        <div class="conditional-fields-group" style="margin-top: 24px;">
                          <div class="conditional-fields-content">
                            <div class="field-container" style="margin-bottom: 16px;">
                              <div
                                class="field-title"
                                style="font-size: 16px !important; font-weight: 600 !important; margin-bottom: 12px;"
                              >
                                Container Background Color
                              </div>
                              <ultra-color-picker
                                .value=${t.container_background_color||"#808080"}
                                @value-changed=${t=>this._updateIcon(n,i,{container_background_color:t.detail.value},o)}
                              ></ultra-color-picker>
                            </div>
                          </div>
                        </div>
                      `:""}
                </div>
              </div>

              <!-- Dynamic Icon Template -->
              <div class="template-section" style="margin-bottom: 24px;">
                <div class="template-header">
                  <div class="switch-container">
                    <label class="switch-label">Dynamic Icon Template</label>
                    <label class="switch">
                      <input
                        type="checkbox"
                        .checked=${t.dynamic_icon_template_mode||!1}
                        @change=${t=>{const e=t.target.checked;this._updateIcon(n,i,{dynamic_icon_template_mode:e},o)}}
                      />
                      <span class="slider round"></span>
                    </label>
                  </div>
                  <div class="template-description">
                    Use Jinja2 templates to dynamically select the icon based on entity states or
                    conditions.
                  </div>
                </div>

                ${t.dynamic_icon_template_mode?q`
                      <div class="template-content">
                        <textarea
                          .value=${t.dynamic_icon_template||""}
                          @input=${t=>{const e=t.target;this._updateIcon(n,i,{dynamic_icon_template:e.value},o)}}
                          placeholder="{% if states('sensor.weather') == 'sunny' %}mdi:weather-sunny{% else %}mdi:weather-cloudy{% endif %}"
                          class="template-editor"
                          rows="6"
                        ></textarea>
                        <div class="template-help">
                          <p><strong>Template should return an icon name:</strong></p>
                          <ul>
                            <li><code>mdi:lightbulb</code> → Material Design Icons</li>
                            <li><code>fas:home</code> → Font Awesome Solid</li>
                            <li><code>fab:github</code> → Font Awesome Brands</li>
                          </ul>
                          <p><strong>Examples:</strong></p>
                          <ul>
                            <li>
                              <code
                                >{% if states('sensor.weather') == 'sunny' %}mdi:weather-sunny{%
                                else %}mdi:weather-cloudy{% endif %}</code
                              >
                            </li>
                            <li>
                              <code
                                >{{ 'mdi:battery-' + (states('sensor.battery') | int // 10 * 10) |
                                string }}</code
                              >
                            </li>
                          </ul>
                        </div>
                      </div>
                    `:""}
              </div>

              <!-- Dynamic Color Template -->
              <div class="template-section">
                <div class="template-header">
                  <div class="switch-container">
                    <label class="switch-label">Dynamic Color Template</label>
                    <label class="switch">
                      <input
                        type="checkbox"
                        .checked=${t.dynamic_color_template_mode||!1}
                        @change=${t=>{const e=t.target.checked;this._updateIcon(n,i,{dynamic_color_template_mode:e},o)}}
                      />
                      <span class="slider round"></span>
                    </label>
                  </div>
                  <div class="template-description">
                    Use Jinja2 templates to dynamically set the icon color based on entity states or
                    values.
                  </div>
                </div>

                ${t.dynamic_color_template_mode?q`
                      <div class="template-content">
                        <textarea
                          .value=${t.dynamic_color_template||""}
                          @input=${t=>{const e=t.target;this._updateIcon(n,i,{dynamic_color_template:e.value},o)}}
                          placeholder="{% if states('sensor.temperature') | float > 20 %}#ff0000{% else %}#0066cc{% endif %}"
                          class="template-editor"
                          rows="6"
                        ></textarea>
                        <div class="template-help">
                          <p><strong>Template should return a color value:</strong></p>
                          <ul>
                            <li><code>#ff0000</code> → Hex colors</li>
                            <li><code>rgb(255,0,0)</code> → RGB colors</li>
                            <li><code>var(--primary-color)</code> → CSS variables</li>
                          </ul>
                          <p><strong>Examples:</strong></p>
                          <ul>
                            <li>
                              <code
                                >{% if states('sensor.temperature') | float > 25 %}#ff0000{% else
                                %}#0066cc{% endif %}</code
                              >
                            </li>
                            <li>
                              <code
                                >{{ 'hsl(' + (states('sensor.humidity') | int * 2) | string +
                                ',70%,50%)' }}</code
                              >
                            </li>
                          </ul>
                        </div>
                      </div>
                    `:""}
              </div>
            </div>
          `}))}
      </div>
    `}renderPreview(t,e){const i=t;!this._templateService&&e&&(this._templateService=new kt(e)),this._templateService&&e&&this._templateService.updateHass(e);const o=i,n=i.design||{},a={padding:n.padding_top||n.padding_bottom||n.padding_left||n.padding_right||o.padding_top||o.padding_bottom||o.padding_left||o.padding_right?`${this.addPixelUnit(n.padding_top||o.padding_top)||"8px"} ${this.addPixelUnit(n.padding_right||o.padding_right)||"0px"} ${this.addPixelUnit(n.padding_bottom||o.padding_bottom)||"8px"} ${this.addPixelUnit(n.padding_left||o.padding_left)||"0px"}`:"8px 0",margin:n.margin_top||n.margin_bottom||n.margin_left||n.margin_right||o.margin_top||o.margin_bottom||o.margin_left||o.margin_right?`${this.addPixelUnit(n.margin_top||o.margin_top)||"0px"} ${this.addPixelUnit(n.margin_right||o.margin_right)||"0px"} ${this.addPixelUnit(n.margin_bottom||o.margin_bottom)||"0px"} ${this.addPixelUnit(n.margin_left||o.margin_left)||"0px"}`:"0",background:n.background_color||o.background_color||"transparent",backgroundImage:this.getBackgroundImageCSS(Object.assign(Object.assign({},o),n),e),backgroundSize:"cover",backgroundPosition:"center",backgroundRepeat:"no-repeat",border:(n.border_style||o.border_style)&&"none"!==(n.border_style||o.border_style)?`${this.addPixelUnit(n.border_width||o.border_width)||"1px"} ${n.border_style||o.border_style} ${n.border_color||o.border_color||"var(--divider-color)"}`:"none",borderRadius:this.addPixelUnit(n.border_radius||o.border_radius)||"0",position:n.position||o.position||"relative",top:n.top||o.top||"auto",bottom:n.bottom||o.bottom||"auto",left:n.left||o.left||"auto",right:n.right||o.right||"auto",zIndex:n.z_index||o.z_index||"auto",width:n.width||o.width||"100%",height:n.height||o.height||"auto",maxWidth:n.max_width||o.max_width||"100%",maxHeight:n.max_height||o.max_height||"none",minWidth:n.min_width||o.min_width||"none",minHeight:n.min_height||o.min_height||"auto",overflow:n.overflow||o.overflow||"hidden",clipPath:n.clip_path||o.clip_path||"none",backdropFilter:n.backdrop_filter||o.backdrop_filter||"none",boxShadow:n.box_shadow_h&&n.box_shadow_v?`${n.box_shadow_h||"0"} ${n.box_shadow_v||"0"} ${n.box_shadow_blur||"0"} ${n.box_shadow_spread||"0"} ${n.box_shadow_color||"rgba(0,0,0,0.1)"}`:o.box_shadow_h&&o.box_shadow_v?`${o.box_shadow_h||"0"} ${o.box_shadow_v||"0"} ${o.box_shadow_blur||"0"} ${o.box_shadow_spread||"0"} ${o.box_shadow_color||"rgba(0,0,0,0.1)"}`:"none",boxSizing:"border-box"};this._injectGlobalStyles();const r=this._localStylesInjected?q``:q`<style>
          ${this.getStyles()}
        </style>`;return this._localStylesInjected=!0,q`
      ${r}
      <div class="icon-module-container" style=${this.styleObjectToCss(a)}>
        <div class="icon-module-preview">
          <div
            class="icon-grid"
            style="
            display: grid;
            grid-template-columns: repeat(${Math.min(i.columns||3,i.icons.length)}, 1fr);
            gap: ${i.gap||16}px;
            justify-content: ${i.alignment||"center"};
          "
          >
            ${i.icons.slice(0,6).map((t=>{var o,a,r,s,l,d,c,p,u,m,g;const h=null==e?void 0:e.states[t.entity],b=(null==h?void 0:h.state)||"unknown",v=this._evaluateIconState(t,e),_=v?!1!==t.show_icon_when_active:!1!==t.show_icon_when_inactive,f=v?!1!==t.show_name_when_active:!1!==t.show_name_when_inactive,y=v?!1!==t.show_state_when_active:!1!==t.show_state_when_inactive;let x=v&&t.icon_active||t.icon_inactive;if(t.dynamic_icon_template_mode&&t.dynamic_icon_template){!this._templateService&&e&&(this._templateService=new kt(e));const i=this._hashString(t.dynamic_icon_template),n=`dynamic_icon_${t.entity}_${t.id}_${i}`;e.__uvc_template_strings||(e.__uvc_template_strings={}),this._templateService&&!this._templateService.hasTemplateSubscription(n)&&this._templateService.subscribeToTemplate(t.dynamic_icon_template,n,(()=>{"undefined"!=typeof window&&window.dispatchEvent(new CustomEvent("ultra-card-template-update"))}));const a=null===(o=null==e?void 0:e.__uvc_template_strings)||void 0===o?void 0:o[n];a&&""!==String(a).trim()&&(x=String(a))}else(null===(a=null==h?void 0:h.attributes)||void 0===a?void 0:a.icon)&&!x&&(x=h.attributes.icon);let w=t.use_entity_color_for_icon&&(null===(r=null==h?void 0:h.attributes)||void 0===r?void 0:r.rgb_color)?`rgb(${h.attributes.rgb_color.join(",")})`:v?t.active_icon_color:t.inactive_icon_color;if(t.dynamic_color_template_mode&&t.dynamic_color_template){!this._templateService&&e&&(this._templateService=new kt(e));const i=this._hashString(t.dynamic_color_template),o=`dynamic_color_${t.entity}_${t.id}_${i}`;e.__uvc_template_strings||(e.__uvc_template_strings={}),this._templateService&&!this._templateService.hasTemplateSubscription(o)&&this._templateService.subscribeToTemplate(t.dynamic_color_template,o,(()=>{"undefined"!=typeof window&&window.dispatchEvent(new CustomEvent("ultra-card-template-update"))}));const n=null===(s=null==e?void 0:e.__uvc_template_strings)||void 0===s?void 0:s[o];n&&""!==String(n).trim()&&(w=String(n))}const $=n.color||(v?t.active_name_color:t.inactive_name_color),k=n.color||(v?t.active_state_color:t.inactive_state_color),S=v?t.custom_active_name_text||t.name||(null===(l=null==h?void 0:h.attributes)||void 0===l?void 0:l.friendly_name)||t.entity:t.custom_inactive_name_text||t.name||(null===(d=null==h?void 0:h.attributes)||void 0===d?void 0:d.friendly_name)||t.entity;let C;if(t.template_mode&&t.template){!this._templateService&&e&&(this._templateService=new kt(e));const i=this._hashString(t.template),o=`display_${t.entity}_${t.id}_${i}`;e.__uvc_template_strings||(e.__uvc_template_strings={}),this._templateService&&!this._templateService.hasTemplateSubscription(o)&&this._templateService.subscribeToTemplate(t.template,o,(()=>{"undefined"!=typeof window&&window.dispatchEvent(new CustomEvent("ultra-card-template-update"))}));const n=null===(c=null==e?void 0:e.__uvc_template_strings)||void 0===c?void 0:c[o];if(void 0!==n){const i=String(n).toLowerCase();C=["true","false","on","off","yes","no","0","1"].includes(i)||""===String(n).trim()?v?t.custom_active_state_text&&""!==t.custom_active_state_text.trim()?t.custom_active_state_text:this._formatValueWithUnits(b,t.entity,t,e):t.custom_inactive_state_text&&""!==t.custom_inactive_state_text.trim()?t.custom_inactive_state_text:this._formatValueWithUnits(b,t.entity,t,e):String(n)!==b?String(n):v?t.custom_active_state_text&&""!==t.custom_active_state_text.trim()?t.custom_active_state_text:this._formatValueWithUnits(b,t.entity,t,e):t.custom_inactive_state_text&&""!==t.custom_inactive_state_text.trim()?t.custom_inactive_state_text:this._formatValueWithUnits(b,t.entity,t,e)}else C=v?t.custom_active_state_text&&""!==t.custom_active_state_text.trim()?t.custom_active_state_text:this._formatValueWithUnits(b,t.entity,t,e):t.custom_inactive_state_text&&""!==t.custom_inactive_state_text.trim()?t.custom_inactive_state_text:this._formatValueWithUnits(b,t.entity,t,e)}else C=v?t.custom_active_state_text&&""!==t.custom_active_state_text.trim()?t.custom_active_state_text:this._formatValueWithUnits(b,t.entity,t,e):t.custom_inactive_state_text&&""!==t.custom_inactive_state_text.trim()?t.custom_inactive_state_text:this._formatValueWithUnits(b,t.entity,t,e);const z=v?t.active_icon_background||t.icon_background:t.inactive_icon_background||t.icon_background,I=v?t.active_icon_background_color||t.icon_background_color:t.inactive_icon_background_color||t.icon_background_color,T="none"!==z?{backgroundColor:t.use_entity_color_for_icon_background&&(null===(p=null==h?void 0:h.attributes)||void 0===p?void 0:p.rgb_color)?`rgb(${h.attributes.rgb_color.join(",")})`:I,borderRadius:"circle"===z?"50%":"rounded-square"===z?"8px":"0",padding:"8px"}:{},A=Object.assign(Object.assign({},{display:"flex",alignItems:"center",justifyContent:"center"}),T),P=t.active_icon_animation||"none",D=t.inactive_icon_animation||"none",L=v?P:D,M="none"!==L?`icon-animation-${L}`:"";M&&setTimeout((()=>{this._updateIconAnimationClasses(t.entity,M,v)}),100);const O={display:"flex",flexDirection:"column",alignItems:"center",justifyContent:t.vertical_alignment||"center",padding:"8px",borderRadius:"circle"===t.container_background_shape?"50%":"rounded"===t.container_background_shape?"8px":"square"===t.container_background_shape?"0":"8px",background:t.container_background_shape&&"none"!==t.container_background_shape?t.container_background_color||"#808080":"transparent",cursor:"pointer",transition:"all 0.2s ease",width:t.container_width?`${t.container_width}%`:"auto",minWidth:"60px"};let j=null,E=null,F=!1,U=0,R=0;return q`
                <div
                  class="icon-item-preview ${t.enable_hover_effect?"hover-enabled":""}"
                  style=${this.styleObjectToCss(Object.assign(Object.assign({},O),{gap:"0px",touchAction:"manipulation",backgroundImage:this.getBackgroundImageCSS(t,e),backgroundSize:"cover",backgroundPosition:"center",backgroundRepeat:"no-repeat",margin:"0 auto"}))}
                  @pointerdown=${o=>{o.preventDefault(),F=!1,i.hold_action&&(E=setTimeout((()=>{F=!0;const n="default"===i.hold_action.action?Object.assign(Object.assign({},i.hold_action),{action:"toggle",entity:t.entity}):Object.assign(Object.assign({},i.hold_action),{entity:i.hold_action.entity||t.entity});wt.handleAction(n,e,o.target)}),500))}}
                  @pointerup=${o=>{if(o.preventDefault(),o.stopPropagation(),E&&(clearTimeout(E),E=null),F)return void(F=!1);const n=Date.now();if(n-R<300&&1===U){if(j&&(clearTimeout(j),j=null),U=0,i.double_tap_action){const n="default"===i.double_tap_action.action?Object.assign(Object.assign({},i.double_tap_action),{action:"toggle",entity:t.entity}):Object.assign(Object.assign({},i.double_tap_action),{entity:i.double_tap_action.entity||t.entity});wt.handleAction(n,e,o.target)}}else if(U=1,R=n,j&&clearTimeout(j),!i.double_tap_action&&i.tap_action){const n="default"===i.tap_action.action?Object.assign(Object.assign({},i.tap_action),{action:"toggle",entity:t.entity}):Object.assign(Object.assign({},i.tap_action),{entity:i.tap_action.entity||t.entity});wt.handleAction(n,e,o.target)}else i.tap_action&&(j=setTimeout((()=>{if(1===U){const n="default"===i.tap_action.action?Object.assign(Object.assign({},i.tap_action),{action:"toggle",entity:t.entity}):Object.assign(Object.assign({},i.tap_action),{entity:i.tap_action.entity||t.entity});wt.handleAction(n,e,o.target)}U=0}),300))}}
                  @pointerleave=${()=>{E&&(clearTimeout(E),E=null),F=!1}}
                >
                  ${_?q`
                        <div
                          style="${this.styleObjectToCss(Object.assign(Object.assign({},A),{marginBottom:f?`${null!==(u=t.name_icon_gap)&&void 0!==u?u:8}px`:y?`${null!==(m=t.icon_state_gap)&&void 0!==m?m:4}px`:"0px"}))}"
                        >
                          <ha-icon
                            icon="${x||"mdi:help-circle"}"
                            class="${M} ultra-force-animation"
                            style="
                      color: ${w||"var(--secondary-text-color)"};
                      --mdc-icon-size: ${Number(v?t.active_icon_size||t.icon_size:t.inactive_icon_size||t.icon_size)||26}px;
                    "
                          ></ha-icon>
                        </div>
                      `:""}
                  ${f?q`
                        <div
                          class="icon-name"
                          style="
                      font-size: ${v?t.active_text_size||t.text_size||12:t.inactive_text_size||t.text_size||14}px;
                        color: ${$||"var(--primary-text-color)"};
                      text-align: center;
                      line-height: 1.2;
                        max-width: 120px;
                      word-wrap: break-word;
                      margin-bottom: ${y?`${null!==(g=t.name_state_gap)&&void 0!==g?g:2}px`:"0px"};
                    "
                        >
                          ${S}
                        </div>
                      `:""}
                  ${y?q`
                        <div
                          class="icon-state"
                          style="
                      font-size: ${v?t.active_state_size||t.state_size||12:t.inactive_state_size||t.state_size||12}px;
                        color: ${k||"var(--secondary-text-color)"};
                      text-align: center;
                      line-height: 1.2;
                    "
                        >
                          ${C}
                        </div>
                      `:""}
                </div>
              `}))}
            ${i.icons.length>6?q`
                  <div
                    class="more-icons"
                    style="
                display: flex;
                align-items: center;
                justify-content: center;
                padding: 8px;
                color: var(--secondary-text-color);
                font-size: 12px;
                font-style: italic;
              "
                  >
                    +${i.icons.length-6} more
                  </div>
                `:""}
          </div>

          <!-- More Icons Indicator -->
          ${i.icons.length>6?q`
                <div
                  class="more-icons"
                  style="
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    padding: 8px;
                    color: var(--secondary-text-color);
                    font-size: 12px;
                    font-style: italic;
                    margin-top: 8px;
                  "
                >
                  +${i.icons.length-6} more icons
                </div>
              `:""}
        </div>
      </div>
    `}renderSplitPreview(t,e){var i;const o=t;let n=!1;if(o.icons.length>0){const t=o.icons[0];if(t.template_mode&&t.template){!this._templateService&&e&&(this._templateService=new kt(e));const o=this._hashString(t.template),a=`display_${t.entity}_${t.id}_${o}`;e.__uvc_template_strings||(e.__uvc_template_strings={}),this._templateService&&!this._templateService.hasTemplateSubscription(a)&&this._templateService.subscribeToTemplate(t.template,a,(()=>{"undefined"!=typeof window&&window.dispatchEvent(new CustomEvent("ultra-card-template-update"))}));const r=null===(i=null==e?void 0:e.__uvc_template_strings)||void 0===i?void 0:i[a];if(void 0!==r){const i=String(r).toLowerCase();if(["true","false","on","off","yes","no","0","1"].includes(i))n=["true","on","yes","1"].includes(i)||parseFloat(i)>0&&!isNaN(parseFloat(i));else if(""!==String(r).trim()){const i=null==e?void 0:e.states[t.entity],o=(null==i?void 0:i.state)||"unknown";n=String(r)!==o||this._evaluateIconState(t,e)}else n=!1}}else n=this._evaluateIconState(t,e)}return this._injectGlobalStyles(),this._injectKeyframesForAllSplitPreviewIcons(),q`
      <style>
        ${Zt._ANIMATION_KEYFRAMES} .icon-split-preview {
          --animation-duration: 2s;
          --animation-timing: linear;
        }
        .icon-split-preview .icon-animation-spin {
          animation: iconSpin var(--animation-duration) var(--animation-timing) infinite;
        }
        .icon-split-preview .icon-animation-bounce {
          animation: iconBounce 1s ease-in-out infinite;
        }
        .icon-split-preview .icon-animation-pulse {
          animation: iconPulse 1.5s ease-in-out infinite;
        }
        .icon-split-preview .icon-animation-flash {
          animation: iconFlash 1s ease-in-out infinite;
        }
        .icon-split-preview .icon-animation-shake {
          animation: iconShake 0.5s ease-in-out infinite;
        }
        .icon-split-preview .icon-animation-vibrate {
          animation: iconVibrate 0.3s ease-in-out infinite;
        }
        .icon-split-preview .icon-animation-rotate-left {
          animation: iconRotateLeft var(--animation-duration) var(--animation-timing) infinite;
        }
        .icon-split-preview .icon-animation-rotate-right {
          animation: iconRotateRight var(--animation-duration) var(--animation-timing) infinite;
        }
        .icon-split-preview .icon-animation-fade {
          animation: iconFade 2s ease-in-out infinite;
        }
        .icon-split-preview .icon-animation-scale {
          animation: iconScale 1.5s ease-in-out infinite;
        }
        .icon-split-preview .icon-animation-tada {
          animation: iconTada 2s ease-in-out infinite;
        }
      </style>
      <div class="icon-split-preview">
        <!-- State Labels -->
        <div
          style="
               display: grid; 
               grid-template-columns: 1fr 1fr; 
               margin-bottom: 12px;
               text-align: center;
             "
        >
          <div>
            ${n?q`<div style="height: 14px; margin-bottom: 4px;"></div>`:q`<div
                  style="font-size: 10px; font-weight: 700; color: var(--primary-color); text-transform: uppercase; letter-spacing: 0.5px; margin-bottom: 4px;"
                >
                  Current
                </div>`}
            <div style="font-size: 12px; font-weight: 600; color: var(--secondary-text-color);">
              Inactive State
            </div>
          </div>
          <div>
            ${n?q`<div
                  style="font-size: 10px; font-weight: 700; color: var(--primary-color); text-transform: uppercase; letter-spacing: 0.5px; margin-bottom: 4px;"
                >
                  Current
                </div>`:q`<div style="height: 14px; margin-bottom: 4px;"></div>`}
            <div style="font-size: 12px; font-weight: 600; color: var(--secondary-text-color);">
              Active State
            </div>
          </div>
        </div>

        <!-- Split Preview Container -->
        <div
          style="
               display: grid; 
               grid-template-columns: 1fr 1fr; 
               border: 1px solid var(--divider-color); 
               border-radius: 8px; 
               overflow: hidden;
               min-height: 120px;
             "
        >
          <!-- Inactive Preview -->
          <div
            style="
                 background: var(--card-background-color);
                 border-right: 1px solid var(--divider-color);
                 padding: 16px;
                 display: flex;
                 align-items: center;
                 justify-content: center;
               "
          >
            ${this._renderSimpleIconGrid(o,e,!1)}
          </div>

          <!-- Active Preview -->
          <div
            style="
                 background: var(--card-background-color);
                 padding: 16px;
                 display: flex;
                 align-items: center;
                 justify-content: center;
               "
          >
            ${this._renderSimpleIconGrid(o,e,!0)}
          </div>
        </div>

        <!-- Icon Count Indicator -->
        ${o.icons.length>6?q`
              <div
                style="
                 text-align: center;
                 padding: 8px;
                 color: var(--secondary-text-color);
                 font-size: 12px;
                 font-style: italic;
               "
              >
                Showing first 6 of ${o.icons.length} icons
              </div>
            `:""}
      </div>
    `}_renderSimpleIconGrid(t,e,i){const o=t.icons.slice(0,6);return Math.min(3,o.length),q`
      <div
        style="
          display: flex;
        "
      >
        ${o.map((t=>this._renderSingleIconPreview(t,e,i)))}
      </div>
    `}_renderSingleIconPreview(t,e,i){var o,n,a,r,s,l,d,c,p,u,m;const g=null==e?void 0:e.states[t.entity],h=(null==g?void 0:g.state)||"unknown",b=i?!1!==t.show_icon_when_active:!1!==t.show_icon_when_inactive,v=i?!1!==t.show_name_when_active:!1!==t.show_name_when_inactive,_=i?!1!==t.show_state_when_active:!1!==t.show_state_when_inactive;let f=i&&t.icon_active||t.icon_inactive;if(t.dynamic_icon_template_mode&&t.dynamic_icon_template){!this._templateService&&e&&(this._templateService=new kt(e));const i=this._hashString(t.dynamic_icon_template),n=`dynamic_icon_${t.entity}_${t.id}_${i}`;e.__uvc_template_strings||(e.__uvc_template_strings={}),this._templateService&&!this._templateService.hasTemplateSubscription(n)&&this._templateService.subscribeToTemplate(t.dynamic_icon_template,n,(()=>{"undefined"!=typeof window&&window.dispatchEvent(new CustomEvent("ultra-card-template-update"))}));const a=null===(o=null==e?void 0:e.__uvc_template_strings)||void 0===o?void 0:o[n];a&&""!==String(a).trim()&&(f=String(a))}else(null===(n=null==g?void 0:g.attributes)||void 0===n?void 0:n.icon)&&!f&&(f=g.attributes.icon);let y=t.use_entity_color_for_icon&&(null===(a=null==g?void 0:g.attributes)||void 0===a?void 0:a.rgb_color)?`rgb(${g.attributes.rgb_color.join(",")})`:i?t.active_icon_color:t.inactive_icon_color;if(t.dynamic_color_template_mode&&t.dynamic_color_template){!this._templateService&&e&&(this._templateService=new kt(e));const i=this._hashString(t.dynamic_color_template),o=`dynamic_color_${t.entity}_${t.id}_${i}`;e.__uvc_template_strings||(e.__uvc_template_strings={}),this._templateService&&!this._templateService.hasTemplateSubscription(o)&&this._templateService.subscribeToTemplate(t.dynamic_color_template,o,(()=>{"undefined"!=typeof window&&window.dispatchEvent(new CustomEvent("ultra-card-template-update"))}));const n=null===(r=null==e?void 0:e.__uvc_template_strings)||void 0===r?void 0:r[o];n&&""!==String(n).trim()&&(y=String(n))}const x=i?t.active_name_color:t.inactive_name_color,w=i?t.active_state_color:t.inactive_state_color,$=i?t.custom_active_name_text||t.name||(null===(s=null==g?void 0:g.attributes)||void 0===s?void 0:s.friendly_name)||t.entity:t.custom_inactive_name_text||t.name||(null===(l=null==g?void 0:g.attributes)||void 0===l?void 0:l.friendly_name)||t.entity;let k;if(t.template_mode&&t.template){!this._templateService&&e&&(this._templateService=new kt(e));const o=this._hashString(t.template),n=`state_${t.entity}_${t.id}_${o}`;e.__uvc_template_strings||(e.__uvc_template_strings={}),this._templateService&&!this._templateService.hasTemplateSubscription(n)&&this._templateService.subscribeToTemplate(t.template,n,(()=>{"undefined"!=typeof window&&window.dispatchEvent(new CustomEvent("ultra-card-template-update"))}));const a=null===(d=null==e?void 0:e.__uvc_template_strings)||void 0===d?void 0:d[n];if(void 0!==a&&""!==String(a).trim()){const o=String(a).toLowerCase();k=["true","false","on","off","yes","no","0","1"].includes(o)?i?t.custom_active_state_text&&""!==t.custom_active_state_text.trim()?t.custom_active_state_text:this._formatValueWithUnits(h,t.entity,t,e):t.custom_inactive_state_text&&""!==t.custom_inactive_state_text.trim()?t.custom_inactive_state_text:this._formatValueWithUnits(h,t.entity,t,e):"unknown"===String(a)?"Template Error: Check entity names":String(a)}else k=this._formatValueWithUnits(h,t.entity,t,e)}else k=i?t.custom_active_state_text&&""!==t.custom_active_state_text.trim()?t.custom_active_state_text:this._formatValueWithUnits(h,t.entity,t,e):t.custom_inactive_state_text&&""!==t.custom_inactive_state_text.trim()?t.custom_inactive_state_text:this._formatValueWithUnits(h,t.entity,t,e);const S=i?t.active_icon_background||t.icon_background:t.inactive_icon_background||t.icon_background,C=i?t.active_icon_background_color||t.icon_background_color:t.inactive_icon_background_color||t.icon_background_color,z="none"!==S?{backgroundColor:t.use_entity_color_for_icon_background&&(null===(c=null==g?void 0:g.attributes)||void 0===c?void 0:c.rgb_color)?`rgb(${g.attributes.rgb_color.join(",")})`:C,borderRadius:"circle"===S?"50%":"rounded-square"===S?"8px":"0",padding:"8px"}:{},I=Object.assign(Object.assign({},{display:"flex",alignItems:"center",justifyContent:"center"}),z),T=t.active_icon_animation||"none",A=t.inactive_icon_animation||"none",P=i?T:A,D="none"!==P?`icon-animation-${P}`:"",L={display:"flex",flexDirection:"column",alignItems:"center",justifyContent:t.vertical_alignment||"center",padding:"8px",borderRadius:"circle"===t.container_background_shape?"50%":"rounded"===t.container_background_shape?"8px":"square"===t.container_background_shape?"0":"8px",background:t.container_background_shape&&"none"!==t.container_background_shape?t.container_background_color||"#808080":"transparent",backgroundImage:this.getBackgroundImageCSS(t,e),backgroundSize:"cover",backgroundPosition:"center",backgroundRepeat:"no-repeat",cursor:"pointer",transition:"all 0.2s ease",width:t.container_width?`${t.container_width}%`:"auto",minWidth:"60px",margin:"0 auto"},M=null!==(p=t.name_icon_gap)&&void 0!==p?p:8,O=null!==(u=t.name_state_gap)&&void 0!==u?u:2,j=null!==(m=t.icon_state_gap)&&void 0!==m?m:4;return q`
      <div
        class="icon-item-preview ${t.enable_hover_effect?"hover-enabled":""}"
        style=${this.styleObjectToCss(Object.assign(Object.assign({},L),{gap:"0px"}))}
      >
        ${b?q`
              <div
                style="${this.styleObjectToCss(Object.assign(Object.assign({},I),{marginBottom:v?`${M}px`:_?`${j}px`:"0px"}))}"
              >
                <ha-icon
                  icon="${f||"mdi:help-circle"}"
                  class="${D} ultra-force-animation"
                  style="
                    color: ${y||"var(--secondary-text-color)"};
                    --mdc-icon-size: ${Number(i?t.active_icon_size||t.icon_size:t.inactive_icon_size||t.icon_size)||26}px;
                    ${D&&"none"!==D?`animation: ${this._getInlineAnimation(D)} !important;`:""}
                  "
                  data-animation-debug="${D||"none"}"
                  data-is-active="${i}"
                ></ha-icon>
              </div>
            `:""}
        ${v?q`
              <div
                class="icon-name"
                style="
                  font-size: ${i?t.active_text_size||t.text_size||12:t.inactive_text_size||t.text_size||14}px;
                  color: ${x||"var(--primary-text-color)"};
                  text-align: center;
                  line-height: 1.2;
                  max-width: 120px;
                  word-wrap: break-word;
                  margin-bottom: ${_?`${O}px`:"0px"};
                "
              >
                ${$}
              </div>
            `:""}
        ${_?q`
              <div
                class="icon-state"
                style="
                  font-size: ${i?t.active_state_size||t.state_size||10:t.inactive_state_size||t.state_size||10}px;
                  color: ${w||"var(--secondary-text-color)"};
                  text-align: center;
                  line-height: 1.2;
                "
              >
                ${k}
              </div>
            `:""}
      </div>
    `}renderIconGrid(t,e,i,o=!0){return q`
      <div
        class="icon-grid"
        style="
          display: grid;
          grid-template-columns: repeat(${Math.min(Math.max(1,Math.floor((t.columns||3)/2)),t.icons.length)}, 1fr);
          gap: ${t.gap||16}px;
          justify-content: ${t.alignment||"center"};
        "
      >
        ${t.icons.slice(0,6).map((t=>{var n,a,r,s,l,d,c,p;const u=null==e?void 0:e.states[t.entity],m=(null==u?void 0:u.state)||"unknown",g=i,h=g?!1!==t.show_icon_when_active:!1!==t.show_icon_when_inactive,b=g?!1!==t.show_name_when_active:!1!==t.show_name_when_inactive,v=g?!1!==t.show_state_when_active:!1!==t.show_state_when_inactive;let _=g&&t.icon_active||t.icon_inactive;(null===(n=null==u?void 0:u.attributes)||void 0===n?void 0:n.icon)&&!_&&(_=u.attributes.icon);const f=t.use_entity_color_for_icon&&(null===(a=null==u?void 0:u.attributes)||void 0===a?void 0:a.rgb_color)?`rgb(${u.attributes.rgb_color.join(",")})`:g?t.active_icon_color:t.inactive_icon_color,y=g?t.active_name_color:t.inactive_name_color,x=g?t.active_state_color:t.inactive_state_color,w=g?t.custom_active_name_text||t.name||(null===(r=null==u?void 0:u.attributes)||void 0===r?void 0:r.friendly_name)||t.entity:t.custom_inactive_name_text||t.name||(null===(s=null==u?void 0:u.attributes)||void 0===s?void 0:s.friendly_name)||t.entity;let $;$=g?t.custom_active_state_text&&""!==t.custom_active_state_text.trim()?t.custom_active_state_text:this._formatValueWithUnits(m,t.entity,t,e):t.custom_inactive_state_text&&""!==t.custom_inactive_state_text.trim()?t.custom_inactive_state_text:this._formatValueWithUnits(m,t.entity,t,e);const k=g?t.active_icon_background||t.icon_background:t.inactive_icon_background||t.icon_background,S=g?t.active_icon_background_color||t.icon_background_color:t.inactive_icon_background_color||t.icon_background_color,C="none"!==k?{backgroundColor:t.use_entity_color_for_icon_background&&(null===(l=null==u?void 0:u.attributes)||void 0===l?void 0:l.rgb_color)?`rgb(${u.attributes.rgb_color.join(",")})`:S,borderRadius:"circle"===k?"50%":"rounded-square"===k?"8px":"0",padding:"8px"}:{},z=Object.assign(Object.assign({},{display:"flex",alignItems:"center",justifyContent:"center"}),C),I=t.active_icon_animation||"none",T=t.inactive_icon_animation||"none",A=g?I:T,P="none"!==A?`icon-animation-${A}`:"";P&&o&&setTimeout((()=>{this._updateIconAnimationClasses(t.entity,P,g)}),150);const D={display:"flex",flexDirection:"column",alignItems:"center",justifyContent:t.vertical_alignment||"center",padding:"8px",borderRadius:"circle"===t.container_background_shape?"50%":"rounded"===t.container_background_shape?"8px":"square"===t.container_background_shape?"0":"8px",background:t.container_background_shape&&"none"!==t.container_background_shape?t.container_background_color||"#808080":"transparent",backgroundImage:this.getBackgroundImageCSS(t,e),backgroundSize:"cover",backgroundPosition:"center",backgroundRepeat:"no-repeat",cursor:"pointer",transition:"all 0.2s ease",width:t.container_width?`${t.container_width}%`:"auto",minWidth:"60px",margin:"0 auto"},L=null!==(d=t.name_icon_gap)&&void 0!==d?d:8,M=null!==(c=t.name_state_gap)&&void 0!==c?c:2,O=null!==(p=t.icon_state_gap)&&void 0!==p?p:4;return q`
            <div
              class="icon-item-preview ${t.enable_hover_effect?"hover-enabled":""}"
              style=${this.styleObjectToCss(Object.assign(Object.assign({},D),{gap:"0px"}))}
            >
              ${h?q`
                    <div
                      style="${this.styleObjectToCss(Object.assign(Object.assign({},z),{marginBottom:b?`${L}px`:v?`${O}px`:"0px"}))}"
                    >
                      <ha-icon
                        icon="${_||"mdi:help-circle"}"
                        class="${P} ultra-force-animation"
                        style="
                          color: ${f||"var(--secondary-text-color)"};
                          --mdc-icon-size: ${Number(g?t.active_icon_size||t.icon_size:t.inactive_icon_size||t.icon_size)||26}px;
                          ${P&&"none"!==P?`animation: ${this._getInlineAnimation(P)} !important;`:""}
                        "
                        data-animation-debug="${P||"none"}"
                        data-is-active="${g}"
                      ></ha-icon>
                    </div>
                  `:""}
              ${b?q`
                    <div
                      class="icon-name"
                      style="
                        font-size: ${g?t.active_text_size||t.text_size||12:t.inactive_text_size||t.text_size||14}px;
                        color: ${y||"var(--primary-text-color)"};
                        text-align: center;
                        line-height: 1.2;
                        max-width: 120px;
                        word-wrap: break-word;
                        margin-bottom: ${v?`${M}px`:"0px"};
                      "
                    >
                      ${w}
                    </div>
                  `:""}
              ${v?q`
                    <div
                      class="icon-state"
                      style="
                        font-size: ${g?t.active_state_size||t.state_size||10:t.inactive_state_size||t.state_size||10}px;
                        color: ${x||"var(--secondary-text-color)"};
                        text-align: center;
                        line-height: 1.2;
                      "
                    >
                      ${$}
                    </div>
                  `:""}
            </div>
          `}))}
      </div>
    `}validate(t){const e=t,i=[...super.validate(t).errors];return e.icons&&0!==e.icons.length||i.push("At least one icon is required"),e.icons.forEach(((t,e)=>{t.entity&&""!==t.entity.trim()||i.push(`Icon ${e+1}: Entity ID is required`),t.icon_inactive&&""!==t.icon_inactive.trim()||i.push(`Icon ${e+1}: Inactive icon is required`)})),{valid:0===i.length,errors:i}}updateHass(t){this._templateService&&this._templateService.updateHass(t)}cleanup(){this._templateService&&(this._templateService.unsubscribeAllTemplates(),this._templateService=void 0)}_isBinaryEntity(t){const e=t.split(".")[0];return["binary_sensor","switch","input_boolean","automation","script","light","fan","lock","cover","device_tracker"].includes(e)}_evaluateIconState(t,e){var i;const o=null==e?void 0:e.states[t.entity];if(!o)return!1;const n=o.state;if(t.template_mode&&t.template){!this._templateService&&e&&(this._templateService=new kt(e));const o=this._hashString(t.template),a=`display_${t.entity}_${t.id}_${o}`;e.__uvc_template_strings||(e.__uvc_template_strings={}),this._templateService&&!this._templateService.hasTemplateSubscription(a)&&this._templateService.subscribeToTemplate(t.template,a,(()=>{"undefined"!=typeof window&&window.dispatchEvent(new CustomEvent("ultra-card-template-update"))}));const r=null===(i=null==e?void 0:e.__uvc_template_strings)||void 0===i?void 0:i[a];if(void 0!==r){const t=String(r).toLowerCase();if(["true","false","on","off","yes","no","0","1"].includes(t))return["true","on","yes","1"].includes(t)||parseFloat(t)>0&&!isNaN(parseFloat(t));if(""===String(r).trim())return!1;if(String(r)!==n)return!0}}if(t.active_state&&t.inactive_state)return n===t.active_state||(t.inactive_state,!1);if(t.active_state)return n===t.active_state;if(t.inactive_state)return n!==t.inactive_state;if(["on","true","active","open","playing","home"].includes(n.toLowerCase()))return!0;if(["off","false","inactive","closed","paused","stopped","away","unavailable","unknown"].includes(n.toLowerCase()))return!1;const a=parseFloat(n);return!isNaN(a)&&a>0}getStyles(){return`\n      /* Hide unwanted form labels with underscores and slots */\n      [slot='label'] {\n        display: none !important;\n      }\n\n      ha-form .mdc-form-field > label,\n      ha-form .mdc-text-field > label,\n      ha-form .mdc-floating-label,\n      ha-form .mdc-notched-outline__leading,\n      ha-form .mdc-notched-outline__notch,\n      ha-form .mdc-notched-outline__trailing,\n      ha-form .mdc-floating-label--float-above,\n      ha-form label[for],\n      ha-form .ha-form-label,\n      ha-form .form-label {\n        display: none !important;\n      }\n\n      /* Hide any labels containing underscores */\n      ha-form label[data-label*='_'],\n      ha-form .label-text:contains('_'),\n      label:contains('_') {\n        display: none !important;\n      }\n        .label {\n          display: none !important;\n        }\n\n      /* Additional safeguards for underscore labels */\n      ha-form .mdc-text-field-character-counter,\n      ha-form .mdc-text-field-helper-text,\n      ha-form mwc-formfield,\n      ha-form .formfield {\n        display: none !important;\n      }\n\n      /* Hide form field labels that match underscore patterns */\n      ha-form[data-field*='_'] label,\n      ha-form[data-field*='_'] .mdc-floating-label,\n      ha-form[data-field*='_'] .mdc-notched-outline__notch > .mdc-floating-label {\n        display: none !important;\n      }\n\n      /* Target specific underscore field names */\n      ha-form[data-field='use_entity_color_for_icon'] label,\n      ha-form[data-field='use_entity_color_for_icon_background'] label,\n      ha-form[data-field='show_name_when_active'] label,\n      ha-form[data-field='show_state_when_active'] label,\n      ha-form[data-field='show_icon_when_active'] label,\n      ha-form[data-field='show_name_when_inactive'] label,\n      ha-form[data-field='show_state_when_inactive'] label,\n      ha-form[data-field='show_icon_when_inactive'] label,\n      ha-form[data-field='active_template_mode'] label,\n      ha-form[data-field='inactive_template_mode'] label,\n      ha-form[data-field='dynamic_icon_template_mode'] label,\n      ha-form[data-field='dynamic_color_template_mode'] label {\n        display: none !important;\n      }\n\n      /* Make dynamic template toggles more compact */\n      ha-form[data-field='dynamic_icon_template_mode'] ha-switch,\n      ha-form[data-field='dynamic_color_template_mode'] ha-switch {\n        --mdc-switch-track-width: 36px !important;\n        --mdc-switch-track-height: 20px !important;\n        --switch-checked-track-color: var(--primary-color) !important;\n        --switch-unchecked-track-color: var(--disabled-color) !important;\n        transform: scale(0.8) !important;\n      }\n\n      ha-form[data-field='dynamic_icon_template_mode'] .mdc-switch,\n      ha-form[data-field='dynamic_color_template_mode'] .mdc-switch {\n        transform: scale(0.8) !important;\n      }\n\n      /* Hide any element with underscore in text content */\n      *:not(script):not(style) {\n        text-decoration: none !important;\n      }\n      \n      /* Target elements that might show underscore text */\n      .mdc-form-field__label:contains('_'),\n      .mdc-text-field__input + label:contains('_'),\n      .mdc-select__selected-text:contains('_') {\n        display: none !important;\n      }\n\n\n      \n      .icon-grid {\n        width: 100%;\n      }\n\n      /* Collapsible Header Styles */\n      .collapsible-header:hover {\n        background: rgba(var(--rgb-primary-color), 0.08) !important;\n        border-color: var(--primary-color) !important;\n      }\n\n      .collapsible-header:active {\n        transform: scale(0.98);\n      }\n\n      /* Split Preview Styles */\n      .split-preview-container {\n        position: relative;\n      }\n\n      .split-preview-container::before {\n        content: '';\n        position: absolute;\n        top: 0;\n        left: 50%;\n        transform: translateX(-50%);\n        width: 1px;\n        height: 100%;\n        background: var(--divider-color);\n        z-index: 1;\n      }\n\n      .icon-module-split-preview .inactive-preview .icon-item-preview {\n        border: 1px solid rgba(var(--rgb-primary-color), 0.1);\n        background: rgba(var(--rgb-primary-color), 0.02);\n      }\n\n      .icon-module-split-preview .active-preview .icon-item-preview {\n        border: 1px solid rgba(var(--rgb-primary-color), 0.2);\n        background: rgba(var(--rgb-primary-color), 0.04);\n      }\n\n      .icon-module-split-preview .inactive-preview .icon-item-preview.hover-enabled:hover {\n        background: rgba(var(--rgb-primary-color), 0.08) !important;\n        border-color: var(--primary-color) !important;\n        transform: scale(1.02);\n      }\n\n      .icon-module-split-preview .active-preview .icon-item-preview.hover-enabled:hover {\n        background: rgba(var(--rgb-primary-color), 0.12) !important;\n        border-color: var(--primary-color) !important;\n        transform: scale(1.02);\n      }\n\n      /* Preview state indicators */\n      .icon-module-split-preview .preview-header div {\n        padding: 8px 12px;\n        border-radius: 20px;\n        font-size: 12px;\n        font-weight: 700;\n        text-transform: uppercase;\n        letter-spacing: 0.5px;\n        margin: 0 8px;\n        background: rgba(var(--rgb-primary-color), 0.08);\n        border: 1px solid rgba(var(--rgb-primary-color), 0.2);\n      }\n\n      /* Responsive adjustments for split view */\n      @media (max-width: 768px) {\n        .icon-module-split-preview .split-preview-container {\n          grid-template-columns: 1fr !important;\n          grid-template-rows: auto auto;\n        }\n\n        .icon-module-split-preview .preview-header {\n          flex-direction: column !important;\n          gap: 8px !important;\n        }\n\n        .icon-module-split-preview .inactive-preview {\n          border-right: none !important;\n          border-bottom: 1px solid var(--divider-color) !important;\n        }\n\n        .icon-module-split-preview .split-preview-container::before {\n          display: none;\n        }\n\n        .icon-module-split-preview .preview-header div {\n          margin: 0 !important;\n        }\n\n        .collapsible-header {\n          padding: 10px 12px !important;\n        }\n\n        .collapsible-header span {\n          font-size: 14px !important;\n        }\n\n        .collapsible-header ha-icon {\n          font-size: 16px !important;\n        }\n      }\n\n      @media (max-width: 480px) {\n        .icon-module-split-preview .icon-grid {\n          grid-template-columns: repeat(auto-fit, minmax(35px, 1fr)) !important;\n          gap: 2px !important;\n        }\n\n        .icon-module-split-preview .inactive-preview,\n        .icon-module-split-preview .active-preview {\n          padding: 8px !important;\n        }\n\n        .icon-module-split-preview .preview-header div {\n          font-size: 10px !important;\n          padding: 6px 8px !important;\n        }\n\n        .collapsible-header {\n          padding: 8px 10px !important;\n        }\n\n        .collapsible-header span {\n          font-size: 12px !important;\n        }\n\n        .collapsible-header ha-icon {\n          font-size: 14px !important;\n        }\n      }\n      \n      .icon-item-preview.hover-enabled:hover {\n        background: var(--primary-color) !important;\n        color: white;\n        transform: scale(1.05);\n      }\n      \n      .icon-item-preview.hover-enabled:hover ha-icon {\n        color: white !important;\n      }\n      \n      .icon-item-preview.hover-enabled:hover .icon-name,\n      .icon-item-preview.hover-enabled:hover .icon-state {\n        color: white !important;\n      }\n      \n      /* Field styling */\n      .field-title {\n        font-size: 16px !important;\n        font-weight: 600 !important;\n     \n        margin-bottom: 4px !important;\n        display: block !important;\n      }\n\n      .field-description {\n        font-size: 13px !important;\n        color: var(--secondary-text-color) !important;\n        margin-bottom: 12px !important;\n        display: block !important;\n        opacity: 0.8 !important;\n        line-height: 1.4 !important;\n      }\n\n      .section-title {\n        font-size: 18px !important;\n        font-weight: 700 !important;\n        color: var(--primary-color) !important;\n        text-transform: uppercase !important;\n        letter-spacing: 0.5px !important;\n      }\n\n      .settings-section {\n        margin-bottom: 16px;\n        max-width: 100%;\n        box-sizing: border-box;\n      }\n\n      /* Conditional Fields Grouping CSS */\n      .conditional-fields-group {\n        margin-top: 16px;\n        border-left: 4px solid var(--primary-color);\n        background: rgba(var(--rgb-primary-color), 0.08);\n        border-radius: 0 8px 8px 0;\n        overflow: hidden;\n        transition: all 0.2s ease;\n        animation: slideInFromLeft 0.3s ease-out;\n      }\n\n      .conditional-fields-group:hover {\n        background: rgba(var(--rgb-primary-color), 0.12);\n      }\n\n      .conditional-fields-header {\n        background: rgba(var(--rgb-primary-color), 0.15);\n        padding: 12px 16px;\n        font-size: 14px;\n        font-weight: 600;\n        color: var(--primary-color);\n        border-bottom: 1px solid rgba(var(--rgb-primary-color), 0.2);\n        text-transform: uppercase;\n        letter-spacing: 0.5px;\n      }\n\n      .conditional-fields-content {\n        padding: 16px;\n      }\n\n      .conditional-fields-content > .field-title:first-child {\n        margin-top: 0 !important;\n      }\n\n      @keyframes slideInFromLeft {\n        from { \n          opacity: 0; \n          transform: translateX(-10px); \n        }\n        to { \n          opacity: 1; \n          transform: translateX(0); \n        }\n      }\n\n      /* Expandable details styling */\n      details > summary {\n        list-style: none;\n      }\n\n      details > summary::-webkit-details-marker {\n        display: none;\n      }\n\n      details[open] > summary ha-icon {\n        transform: rotate(90deg);\n      }\n\n      details > summary:hover {\n        background: rgba(var(--rgb-primary-color), 0.1) !important;\n      }\n\n      /* Icon animations - Simple and direct selectors */\n      .icon-animation-pulse {\n        animation: iconPulse 2s ease-in-out infinite !important;\n      }\n\n      .icon-animation-spin {\n        animation: iconSpin 2s linear infinite !important;\n      }\n\n      .icon-animation-bounce {\n        animation: iconBounce 1s ease-in-out infinite !important;\n      }\n\n      .icon-animation-flash {\n        animation: iconFlash 1s ease-in-out infinite !important;\n      }\n\n      .icon-animation-shake {\n        animation: iconShake 0.5s ease-in-out infinite !important;\n      }\n\n      .icon-animation-vibrate {\n        animation: iconVibrate 0.3s ease-in-out infinite !important;\n      }\n\n      .icon-animation-rotate-left {\n        animation: iconRotateLeft 2s linear infinite !important;\n      }\n\n      .icon-animation-rotate-right {\n        animation: iconRotateRight 2s linear infinite !important;\n      }\n\n      .icon-animation-fade {\n        animation: iconFade 2s ease-in-out infinite !important;\n      }\n\n      .icon-animation-scale {\n        animation: iconScale 1s ease-in-out infinite !important;\n      }\n\n      .icon-animation-tada {\n        animation: iconTada 1s ease-in-out infinite !important;\n      }\n\n\n\n      @keyframes iconPulse {\n        0%, 100% { opacity: 1; transform: scale(1); }\n        50% { opacity: 0.7; transform: scale(1.1); }\n      }\n\n      @keyframes iconSpin {\n        from { transform: rotate(0deg); }\n        to { transform: rotate(360deg); }\n      }\n\n      @keyframes iconBounce {\n        0%, 20%, 50%, 80%, 100% { transform: translateY(0); }\n        40% { transform: translateY(-10px); }\n        60% { transform: translateY(-5px); }\n      }\n\n      @keyframes iconFlash {\n        0%, 50%, 100% { opacity: 1; }\n        25%, 75% { opacity: 0.3; }\n      }\n\n      @keyframes iconShake {\n        0%, 100% { transform: translateX(0); }\n        10%, 30%, 50%, 70%, 90% { transform: translateX(-2px); }\n        20%, 40%, 60%, 80% { transform: translateX(2px); }\n      }\n\n      @keyframes iconVibrate {\n        0%, 100% { transform: translate(0); }\n        10% { transform: translate(-1px, -1px); }\n        20% { transform: translate(1px, -1px); }\n        30% { transform: translate(-1px, 1px); }\n        40% { transform: translate(1px, 1px); }\n        50% { transform: translate(-1px, -1px); }\n        60% { transform: translate(1px, -1px); }\n        70% { transform: translate(-1px, 1px); }\n        80% { transform: translate(1px, 1px); }\n        90% { transform: translate(-1px, -1px); }\n      }\n\n      @keyframes iconRotateLeft {\n        from { transform: rotate(0deg); }\n        to { transform: rotate(-360deg); }\n      }\n\n      @keyframes iconRotateRight {\n        from { transform: rotate(0deg); }\n        to { transform: rotate(360deg); }\n      }\n\n      @keyframes iconFade {\n        0%, 100% { opacity: 1; }\n        50% { opacity: 0.3; }\n      }\n\n      @keyframes iconScale {\n        0%, 100% { transform: scale(1); }\n        50% { transform: scale(1.2); }\n      }\n\n      @keyframes iconTada {\n        0% { transform: scale(1); }\n        10%, 20% { transform: scale(0.9) rotate(-3deg); }\n        30%, 50%, 70%, 90% { transform: scale(1.1) rotate(3deg); }\n        40%, 60%, 80% { transform: scale(1.1) rotate(-3deg); }\n        100% { transform: scale(1) rotate(0); }\n      }\n\n      @keyframes lockUnlockedPulse {\n        0%, 100% { \n          box-shadow: 0 0 0 2px rgba(33, 150, 243, 0.2);\n          border-color: var(--info-color, #2196F3);\n        }\n        50% { \n          box-shadow: 0 0 0 3px rgba(33, 150, 243, 0.4);\n          border-color: var(--info-color, #1976D2);\n        }\n      }\n\n      /* Respect user's motion preferences */\n      @media (prefers-reduced-motion: reduce) {\n        .lock-btn.unlocked {\n          animation: none !important;\n        }\n      }\n\n      /* Add icon button styling */\n      .add-icon-btn:hover {\n        background: var(--primary-color);\n        color: white;\n      }\n      \n      /* Remove icon button styling */\n      .remove-icon-btn:disabled {\n        opacity: 0.3;\n        cursor: not-allowed;\n      }\n\n      /* Icon picker specific styling */\n      ha-icon-picker {\n        --ha-icon-picker-width: 100%;\n        --ha-icon-picker-height: 56px;\n      }\n\n      /* Dropdown styling */\n      ha-select {\n        width: 100%;\n        --ha-select-height: 40px;\n      }\n\n      /* Hide any radio buttons that might still be rendered */\n      ha-radio,\n      mwc-radio,\n      .mdc-radio {\n        display: none !important;\n      }\n\n      /* Text field and select consistency */\n      ha-textfield,\n      ha-select {\n        --mdc-shape-small: 8px;\n        --mdc-theme-primary: var(--primary-color);\n      }\n\n      /* Note: Dropdown positioning fixes are now handled globally in ultra-card-editor.ts */\n\n      /* Module tab content input width - restrict to icon module only */\n      .icon-module .module-tab-content input[type="number"], \n      .icon-module .module-tab-content input[type="text"],\n      .icon-module .module-tab-content .gap-input {\n        width: 25% !important;\n        max-width: 25% !important;\n        min-width: 25% !important;\n      }\n\n      /* Grid styling for layout options */\n      .settings-section[style*="grid"] > div {\n        min-width: 0;\n      }\n\n      /* Responsive adjustments */\n      @media (max-width: 768px) {\n        .settings-section[style*="grid-template-columns: 1fr 1fr 1fr"] {\n          grid-template-columns: 1fr !important;\n          gap: 12px !important;\n        }\n\n        .settings-section[style*="grid-template-columns: 1fr 1fr"] {\n          grid-template-columns: 1fr !important;\n          gap: 12px !important;\n        }\n\n        .conditional-fields-group {\n          border-left-width: 3px;\n        }\n        \n        .conditional-fields-header {\n          padding: 10px 12px;\n          font-size: 13px;\n        }\n        \n        .conditional-fields-content {\n          padding: 12px;\n        }\n\n        /* Mobile-friendly field titles and descriptions */\n        .field-title {\n          font-size: 14px !important;\n        }\n\n        .field-description {\n          font-size: 12px !important;\n          line-height: 1.3 !important;\n        }\n\n        .section-title {\n          font-size: 16px !important;\n        }\n\n        /* Mobile-friendly size controls */\n        .gap-control-container {\n          gap: 8px !important;\n        }\n\n        .gap-input {\n          width: 44px !important;\n          max-width: 44px !important;\n          min-width: 44px !important;\n          font-size: 12px !important;\n        }\n\n        .reset-btn {\n          width: 32px !important;\n          height: 32px !important;\n        }\n\n        .reset-btn ha-icon {\n          font-size: 14px !important;\n          display: flex !important;\n          align-items: center !important;\n          justify-content: center !important;\n          margin: 0 !important;\n          padding: 0 !important;\n          line-height: 1 !important;\n        }\n\n        /* Mobile-friendly lock buttons */\n        .lock-btn {\n          padding: 6px 12px !important;\n          font-size: 12px !important;\n        }\n\n        .lock-btn ha-icon {\n          font-size: 16px !important;\n        }\n\n        .lock-btn.unlocked {\n          border-color: var(--info-color, #2196F3) !important;\n          background: rgba(33, 150, 243, 0.15) !important;\n          color: var(--info-color, #2196F3) !important;\n          box-shadow: 0 0 0 1px rgba(33, 150, 243, 0.3) !important;\n        }\n\n        .lock-btn.unlocked ha-icon {\n          color: var(--info-color, #2196F3) !important;\n        }\n\n        /* Mobile-friendly accordions */\n        details > summary {\n          padding: 12px !important;\n          font-size: 14px !important;\n        }\n\n        details > summary ha-icon {\n          font-size: 16px !important;\n        }\n\n        /* Mobile-friendly form fields */\n        .icon-settings-container {\n          padding: 12px !important;\n        }\n\n        /* Mobile-friendly preview grid */\n        .icon-grid {\n          grid-template-columns: repeat(auto-fit, minmax(60px, 1fr)) !important;\n          gap: 8px !important;\n        }\n\n        .icon-item-preview {\n          min-width: 50px !important;\n          padding: 6px !important;\n        }\n      }\n\n      /* Extra small devices (phones, 480px and down) */\n      @media (max-width: 480px) {\n        .field-title {\n          font-size: 13px !important;\n        }\n\n        .field-description {\n          font-size: 11px !important;\n        }\n\n        .section-title {\n          font-size: 14px !important;\n        }\n\n        .gap-input {\n          width: 40px !important;\n          max-width: 40px !important;\n          min-width: 40px !important;\n          font-size: 11px !important;\n        }\n\n        .reset-btn {\n          width: 28px !important;\n          height: 28px !important;\n        }\n\n        .reset-btn ha-icon {\n          font-size: 12px !important;\n          display: flex !important;\n          align-items: center !important;\n          justify-content: center !important;\n          margin: 0 !important;\n          padding: 0 !important;\n          line-height: 1 !important;\n        }\n\n        .lock-btn {\n          padding: 4px 8px !important;\n          font-size: 11px !important;\n        }\n\n        .lock-btn.unlocked {\n          border-color: var(--info-color, #2196F3) !important;\n          background: rgba(33, 150, 243, 0.15) !important;\n          color: var(--info-color, #2196F3) !important;\n          box-shadow: 0 0 0 1px rgba(33, 150, 243, 0.3) !important;\n        }\n\n        .lock-btn.unlocked ha-icon {\n          color: var(--info-color, #2196F3) !important;\n        }\n\n        .icon-settings-container {\n          padding: 8px !important;\n        }\n\n        /* Stack lock controls vertically on very small screens */\n        .gap-control-container {\n          flex-wrap: wrap !important;\n          gap: 6px !important;\n        }\n\n        .gap-slider {\n          width: 100% !important;\n          order: 1;\n        }\n\n        .gap-input {\n          order: 2;\n        }\n\n        .reset-btn {\n          order: 3;\n        }\n\n        .lock-btn {\n          order: 4;\n          width: 100% !important;\n          justify-content: center !important;\n        }\n      }\n\n      /* Ensure form elements don't overflow */\n      .settings-section ha-form {\n        max-width: 100%;\n        overflow: visible;\n      }\n\n      /* Color picker adjustments */\n      .settings-section ha-form[data-field*="color"] {\n        min-height: 56px;\n      }\n\n      /* Boolean toggle adjustments */\n      .settings-section ha-form[data-field*="mode"] {\n        display: flex;\n        align-items: center;\n        min-height: auto;\n      }\n\n      /* Number slider adjustments */\n      .settings-section ha-form[data-field*="size"] .mdc-slider,\n      .settings-section ha-form[data-field*="gap"] .mdc-slider,\n      .settings-section ha-form[data-field*="columns"] .mdc-slider {\n        width: 100%;\n        max-width: 100%;\n      }\n\n      /* Gap control styles */\n      .gap-control-container {\n        display: flex;\n        align-items: center;\n        gap: 12px;\n      }\n\n      .gap-slider {\n        flex: 1;\n        height: 6px;\n        background: var(--divider-color);\n        border-radius: 3px;\n        outline: none;\n        appearance: none;\n        -webkit-appearance: none;\n        cursor: pointer;\n        transition: all 0.2s ease;\n      }\n\n      .gap-slider::-webkit-slider-thumb {\n        appearance: none;\n        -webkit-appearance: none;\n        width: 20px;\n        height: 20px;\n        background: var(--primary-color);\n        border-radius: 50%;\n        cursor: pointer;\n        transition: all 0.2s ease;\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n      }\n\n      .gap-slider::-moz-range-thumb {\n        width: 20px;\n        height: 20px;\n        background: var(--primary-color);\n        border-radius: 50%;\n        cursor: pointer;\n        border: none;\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n      }\n\n      .gap-slider:hover {\n        background: var(--primary-color);\n        opacity: 0.7;\n      }\n\n      .gap-slider:hover::-webkit-slider-thumb {\n        transform: scale(1.1);\n      }\n\n      .gap-slider:hover::-moz-range-thumb {\n        transform: scale(1.1);\n      }\n\n      .gap-input {\n        width: 48px !important;\n        max-width: 48px !important;\n        min-width: 48px !important;\n        padding: 4px 6px !important;\n        border: 1px solid var(--divider-color);\n        border-radius: 4px;\n        background: var(--secondary-background-color);\n        color: var(--primary-text-color);\n        font-size: 13px;\n        text-align: center;\n        transition: all 0.2s ease;\n        flex-shrink: 0;\n        box-sizing: border-box;\n      }\n\n      .gap-input:focus {\n        outline: none;\n        border-color: var(--primary-color);\n        box-shadow: 0 0 0 2px rgba(var(--rgb-primary-color), 0.2);\n      }\n\n      .reset-btn {\n        width: 36px;\n        height: 36px;\n        padding: 0;\n        border: 1px solid var(--divider-color);\n        border-radius: 4px;\n        background: var(--secondary-background-color);\n        color: var(--primary-text-color);\n        cursor: pointer;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        transition: all 0.2s ease;\n        flex-shrink: 0;\n        box-sizing: border-box;\n      }\n\n      .reset-btn:hover {\n        background: var(--primary-color);\n        color: var(--text-primary-color);\n        border-color: var(--primary-color);\n        transform: none;\n      }\n\n      .reset-btn ha-icon {\n        font-size: 16px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        margin: 0;\n        padding: 0;\n        line-height: 1;\n      }\n\n      /* Lock button styles */\n      .lock-btn {\n        display: flex;\n        align-items: center;\n        gap: 8px;\n        padding: 8px 16px;\n        border: 2px solid var(--divider-color);\n        border-radius: 8px;\n        background: var(--secondary-background-color);\n        color: var(--primary-text-color);\n        cursor: pointer;\n        font-size: 14px;\n        font-weight: 500;\n        transition: all 0.3s ease;\n        outline: none;\n        position: relative;\n      }\n\n      .lock-btn:hover {\n        border-color: var(--primary-color);\n        background: var(--primary-color);\n        color: white;\n      }\n\n      .lock-btn.locked {\n        border-color: var(--primary-color);\n        background: rgba(var(--rgb-primary-color), 0.1);\n        color: var(--primary-color);\n      }\n\n      .lock-btn.locked:hover {\n        background: var(--primary-color);\n        color: white;\n      }\n\n      button.lock-btn.unlocked {\n        background-color: var(--primary-color);\n        border-color: var(--primary-color);\n      }\n\n      .lock-btn.unlocked {\n        border-color: var(--info-color, #2196F3) !important;\n        background: rgba(33, 150, 243, 0.15) !important;\n        color: var(--info-color, #2196F3) !important;\n        box-shadow: 0 0 0 2px rgba(33, 150, 243, 0.2) !important;\n        animation: lockUnlockedPulse 2s ease-in-out infinite;\n      }\n\n      .lock-btn.unlocked:hover {\n        background: var(--info-color, #2196F3) !important;\n        color: white !important;\n        box-shadow: 0 0 0 2px rgba(33, 150, 243, 0.4) !important;\n        animation: none !important;\n      }\n\n      .lock-btn.unlocked ha-icon {\n        color: var(--info-color, #2196F3) !important;\n      }\n\n      .lock-btn.unlocked:hover ha-icon {\n        color: white !important;\n      }\n\n      .lock-btn ha-icon {\n        font-size: 18px;\n      }\n\n      /* Field lock button styling */\n      .field-container .lock-btn {\n        padding: 6px 12px;\n        font-size: 12px;\n        min-width: auto;\n      }\n\n      .field-container .lock-btn ha-icon {\n        font-size: 16px;\n      }\n\n      /* Icon settings container */\n      .icon-settings-container {\n        background: var(--secondary-background-color);\n        border-radius: 8px;\n        padding: 16px;\n        margin-bottom: 24px;\n        border: 1px solid var(--divider-color);\n      }\n\n      .icon-header {\n        display: flex;\n        align-items: center;\n        gap: 12px;\n        margin-bottom: 16px;\n        padding-bottom: 12px;\n        border-bottom: 1px solid var(--divider-color);\n      }\n\n      .icon-preview {\n        width: 32px;\n        height: 32px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        background: var(--primary-color);\n        color: white;\n        border-radius: 50%;\n        flex-shrink: 0;\n      }\n\n      .icon-title {\n        flex: 1;\n        font-size: 16px;\n        font-weight: 600;\n        color: var(--primary-text-color);\n      }\n\n      .remove-icon-btn {\n        background: var(--error-color);\n        color: white;\n        border: none;\n        border-radius: 4px;\n        padding: 6px;\n        cursor: pointer;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        transition: all 0.2s ease;\n      }\n\n      .remove-icon-btn:hover {\n        background: var(--error-color);\n        opacity: 0.8;\n      }\n\n      .remove-icon-btn:disabled {\n        opacity: 0.3;\n        cursor: not-allowed;\n      }\n\n      .remove-icon-btn ha-icon {\n        font-size: 16px;\n      }\n\n      /* Size lock container */\n      .size-lock-container {\n        padding: 12px;\n        background: rgba(var(--rgb-primary-color), 0.05);\n        border-radius: 8px;\n        border: 1px solid rgba(var(--rgb-primary-color), 0.2);\n      }\n\n      /* Hide unwanted action options */\n      ha-form mwc-list-item[value="toggle"],\n      ha-form mwc-list-item[graphic="icon"]:has(ha-icon[icon="mdi:gesture-tap"]),\n      ha-form .mdc-deprecated-list-item[data-value="toggle"],\n      ha-form .mdc-list-item[data-value="toggle"],\n      ha-form option[value="toggle"] {\n        display: none !important;\n      }\n\n      /* Hide "Default ()" option - target by text content */\n      ha-form mwc-list-item:has-text("Default ()"),\n      ha-form .mdc-deprecated-list-item:has-text("Default ()"),\n      ha-form .mdc-list-item:has-text("Default ()"),\n      ha-form option:has-text("Default ()") {\n        display: none !important;\n      }\n\n      /* Alternative approach using CSS attribute selectors for text content */\n      ha-form mwc-list-item[textContent*="Default ()"],\n      ha-form .mdc-deprecated-list-item[textContent*="Default ()"],\n      ha-form .mdc-list-item[textContent*="Default ()"] {\n        display: none !important;\n      }\n\n      /* Template Section Styles */\n      .template-section {\n        background: var(--card-background-color);\n        border-radius: 8px;\n        padding: 16px;\n        border: 1px solid var(--divider-color);\n        margin-bottom: 32px;\n      }\n\n      .template-header {\n        margin-bottom: 16px;\n      }\n\n      .switch-container {\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n        gap: 8px;\n        margin-bottom: 8px;\n      }\n\n      .switch-label {\n        font-weight: 600;\n        color: var(--primary-text-color);\n        font-size: 16px;\n      }\n\n      .switch {\n        position: relative;\n        display: inline-block;\n        width: 50px;\n        height: 24px;\n      }\n\n      .switch input {\n        opacity: 0;\n        width: 0;\n        height: 0;\n      }\n\n      .slider {\n        position: absolute;\n        cursor: pointer;\n        top: 0;\n        left: 0;\n        right: 0;\n        bottom: 0;\n        background-color: var(--switch-unchecked-color, #ccc);\n        transition: .4s;\n      }\n\n      .slider:before {\n        position: absolute;\n        content: "";\n        height: 18px;\n        width: 18px;\n        left: 3px;\n        bottom: 3px;\n        background-color: white;\n        transition: .4s;\n      }\n\n      input:checked + .slider {\n        background-color: var(--primary-color);\n      }\n\n      input:checked + .slider:before {\n        transform: translateX(26px);\n      }\n\n      .slider.round {\n        border-radius: 24px;\n    max-width: 50px;\n}\n      }\n\n      .slider.round:before {\n        border-radius: 50%;\n      }\n\n      .template-description {\n        font-size: 13px;\n        color: var(--secondary-text-color);\n        line-height: 1.4;\n        margin-bottom: 8px;\n      }\n\n      .template-content {\n        display: flex;\n        flex-direction: column;\n        gap: 8px;\n      }\n\n      .template-editor {\n        min-height: 120px;\n        font-family: 'Courier New', monospace;\n        font-size: 13px;\n        line-height: 1.4;\n        resize: vertical;\n        width: 100%;\n        padding: 12px;\n        border: 1px solid var(--divider-color);\n        border-radius: 8px;\n        background: var(--card-background-color);\n        color: var(--primary-text-color);\n        outline: none;\n        transition: border-color 0.2s ease;\n      }\n\n      .template-editor:focus {\n        border-color: var(--primary-color);\n        box-shadow: 0 0 0 1px var(--primary-color);\n      }\n\n      .template-help {\n        font-size: 12px;\n        color: var(--secondary-text-color);\n        font-style: italic;\n        margin-top: 4px;\n      }\n\n      .template-help p {\n        margin: 8px 0;\n        font-weight: 500;\n      }\n\n      .template-help ul {\n        margin: 4px 0;\n        padding-left: 16px;\n      }\n\n      .template-help li {\n        margin: 2px 0;\n      }\n\n      .template-help code {\n        background: rgba(var(--rgb-primary-color), 0.1);\n        padding: 2px 4px;\n        border-radius: 3px;\n        font-family: 'Courier New', monospace;\n        font-size: 11px;\n      }\n\n      ${$t.getHoverStyles()}\n    `}_addIcon(t,e){const i={id:this.generateId("icon-item"),entity:"weather.forecast_home",name:"",icon_inactive:"mdi:weather-partly-cloudy",icon_active:"mdi:weather-partly-cloudy",inactive_state:"",active_state:"",custom_inactive_state_text:"",custom_active_state_text:"",custom_inactive_name_text:"",custom_active_name_text:"",inactive_template_mode:!1,inactive_template:"",active_template_mode:!1,active_template:"",use_entity_color_for_icon:!1,color_inactive:"var(--secondary-text-color)",color_active:"var(--primary-color)",inactive_icon_color:"var(--secondary-text-color)",active_icon_color:"var(--primary-color)",inactive_name_color:"var(--primary-text-color)",active_name_color:"var(--primary-text-color)",inactive_state_color:"var(--secondary-text-color)",active_state_color:"var(--secondary-text-color)",show_name_when_inactive:!0,show_state_when_inactive:!0,show_icon_when_inactive:!0,show_name_when_active:!0,show_state_when_active:!0,show_icon_when_active:!0,show_state:!0,show_name:!0,icon_size:26,text_size:14,name_icon_gap:8,name_state_gap:2,icon_state_gap:4,active_icon_size:26,inactive_icon_size:26,active_text_size:14,inactive_text_size:14,state_size:14,active_state_size:14,inactive_state_size:14,icon_background:"none",use_entity_color_for_icon_background:!1,icon_background_color:"transparent",active_icon_background:"none",inactive_icon_background:"none",active_icon_background_color:"transparent",inactive_icon_background_color:"transparent",icon_size_locked:!0,text_size_locked:!0,state_size_locked:!0,active_icon_locked:!0,active_icon_color_locked:!1,active_icon_background_locked:!0,active_icon_background_color_locked:!0,active_name_locked:!0,active_name_color_locked:!0,active_state_locked:!1,active_state_color_locked:!0,inactive_icon_animation:"none",active_icon_animation:"none",show_units:!0,vertical_alignment:"center",container_width:void 0,container_background_shape:"none",container_background_color:"#808080",tap_action:{action:"nothing"},hold_action:{action:"nothing"},double_tap_action:{action:"nothing"},click_action:"toggle",double_click_action:"none",hold_action_legacy:"none",navigation_path:"",url:"",service:"",service_data:{},template_mode:!1,template:"",dynamic_icon_template_mode:!1,dynamic_icon_template:"",dynamic_color_template_mode:!1,dynamic_color_template:""};e({icons:[...t.icons,i]})}_removeIcon(t,e,i){if(t.icons.length<=1)return;const o=t.icons.filter(((t,i)=>i!==e));i({icons:o})}_updateIcon(t,e,i,o){const n=t.icons.map(((t,o)=>o===e?Object.assign(Object.assign({},t),i):t));o({icons:n})}_updateIconWithLockSync(t,e,i,o,n){const a=t.icons[e],r={[i]:o},s={icon_inactive:{active:"icon_active",lock:"active_icon_locked"},inactive_icon_size:{active:"active_icon_size",lock:"icon_size_locked"},inactive_text_size:{active:"active_text_size",lock:"text_size_locked"},inactive_state_size:{active:"active_state_size",lock:"state_size_locked"},inactive_icon_color:{active:"active_icon_color",lock:"active_icon_color_locked"},inactive_name_color:{active:"active_name_color",lock:"active_name_color_locked"},inactive_state_color:{active:"active_state_color",lock:"active_state_color_locked"},inactive_icon_background:{active:"active_icon_background",lock:"active_icon_background_locked"},inactive_icon_background_color:{active:"active_icon_background_color",lock:"active_icon_background_color_locked"}}[i];s&&!1!==a[s.lock]&&(r[s.active]=o),this._updateIcon(t,e,r,n)}getBackgroundImageCSS(t,e){var i,o;const n=t.background_image_type,a=t.background_image,r=t.background_image_entity;if(!n||"none"===n)return"none";switch(n){case"upload":if(a)return`url("${Kt(e,a)}")`;break;case"url":if(a)return`url("${a}")`;break;case"entity":if(r&&e){const t=e.states[r];if(t){const n=(null===(i=t.attributes)||void 0===i?void 0:i.entity_picture)||(null===(o=t.attributes)||void 0===o?void 0:o.image)||("string"==typeof t.state?t.state:"");if(n&&"unknown"!==n&&"unavailable"!==n)return`url("${Kt(e,n)}")`}}}return"none"}styleObjectToCss(t){return Object.entries(t).map((([t,e])=>`${t.replace(/[A-Z]/g,(t=>`-${t.toLowerCase()}`))}: ${e}`)).join("; ")}addPixelUnit(t){return t?/^\d+$/.test(t)?`${t}px`:/^[\d\s]+$/.test(t)?t.split(" ").map((t=>t.trim()?`${t}px`:t)).join(" "):t:t}_renderSizeControl(t,e,i,o,n,a,r,s){return q`
      <div class="gap-control-container" style="display: flex; align-items: center; gap: 12px;">
        <input
          type="range"
          class="gap-slider"
          min="${a}"
          max="${r}"
          step="1"
          .value="${n}"
          @input=${n=>{const a=n.target,r=Number(a.value);this._updateIconWithLockSync(t,e,o,r,i)}}
        />
        <input
          type="number"
          class="gap-input"
          min="${a}"
          max="${r}"
          step="1"
          .value="${n}"
          @input=${n=>{const s=n.target,l=Number(s.value);!isNaN(l)&&l>=a&&l<=r&&this._updateIconWithLockSync(t,e,o,l,i)}}
          @keydown=${n=>{if("ArrowUp"===n.key||"ArrowDown"===n.key){n.preventDefault();const l=n.target,d=Number(l.value)||s,c="ArrowUp"===n.key?1:-1,p=Math.max(a,Math.min(r,d+c));this._updateIconWithLockSync(t,e,o,p,i)}}}
        />
        <button
          class="reset-btn"
          @click=${()=>{this._updateIconWithLockSync(t,e,o,s,i)}}
          title="Reset to default (${s})"
        >
          <ha-icon icon="mdi:refresh"></ha-icon>
        </button>
      </div>
    `}_renderFieldWithLock(t,e,i,o,n,a,r,s,l,d){const c=t.icons[e],p=!1!==c[o],u=p&&c[a]||r;return q`
      <div style="display: flex; align-items: center; gap: 12px;">
        <div style="flex: 1;">
          ${"icon"===s?q`
                <div
                  style="opacity: ${p?"0.5":"1"}; pointer-events: ${p?"none":"auto"};"
                >
                  ${this.renderUcForm(l,{[n]:u},[this.iconField(n)],(o=>{p||this._updateIcon(t,e,{[n]:o.detail.value[n]},i)}),!1)}
                </div>
              `:"color"===s?q`
                  <ultra-color-picker
                    .value=${u}
                    .disabled=${p}
                    @value-changed=${o=>{p||this._updateIcon(t,e,{[n]:o.detail.value},i)}}
                  ></ultra-color-picker>
                `:"select"===s?q`
                    <div
                      style="opacity: ${p?"0.5":"1"}; pointer-events: ${p?"none":"auto"};"
                    >
                      ${this.renderUcForm(l,{[n]:u},[this.selectField(n,d||[])],(o=>{p||this._updateIcon(t,e,{[n]:o.detail.value[n]},i)}),!1)}
                    </div>
                  `:q`
                    <div
                      style="opacity: ${p?"0.5":"1"}; pointer-events: ${p?"none":"auto"};"
                    >
                      ${this.renderUcForm(l,{[n]:u},[this.textField(n)],(o=>{p||this._updateIcon(t,e,{[n]:o.detail.value[n]},i)}),!1)}
                    </div>
                  `}
        </div>
        <button
          class="lock-btn ${p?"locked":"unlocked"}"
          @click=${()=>{const r=!p,s={[o]:r};r&&(s[n]=c[a]),this._updateIcon(t,e,s,i)}}
          title="${p?"Unlock to customize this field independently":"Lock to inherit from inactive state"}"
        >
          <ha-icon icon="${p?"mdi:lock":"mdi:lock-open"}"></ha-icon>
        </button>
      </div>
    `}_renderSizeControlWithLock(t,e,i,o,n,a,r,s,l,d){const c=t.icons[e],p=`${o}_locked`,u=!1!==c[p],m=u?c[a]||d:r;return q`
      <div class="gap-control-container" style="display: flex; align-items: center; gap: 12px;">
        <input
          type="range"
          class="gap-slider"
          min="${s}"
          max="${l}"
          step="1"
          .value="${m}"
          .disabled=${u}
          @input=${o=>{if(!u){const a=o.target,r=Number(a.value);this._updateIcon(t,e,{[n]:r},i)}}}
        />
        <input
          type="number"
          class="gap-input"
          min="${s}"
          max="${l}"
          step="1"
          .value="${m}"
          .disabled=${u}
          @input=${o=>{if(!u){const a=o.target,r=Number(a.value);!isNaN(r)&&r>=s&&r<=l&&this._updateIcon(t,e,{[n]:r},i)}}}
          @keydown=${o=>{if(!u&&("ArrowUp"===o.key||"ArrowDown"===o.key)){o.preventDefault();const a=o.target,r=Number(a.value)||d,c="ArrowUp"===o.key?1:-1,p=Math.max(s,Math.min(l,r+c));this._updateIcon(t,e,{[n]:p},i)}}}
        />
        <button
          class="reset-btn"
          @click=${()=>{u||this._updateIcon(t,e,{[n]:d},i)}}
          title="Reset to default (${d})"
          .disabled=${u}
        >
          <ha-icon icon="mdi:refresh"></ha-icon>
        </button>
        <button
          class="lock-btn ${u?"locked":"unlocked"}"
          @click=${()=>{const o=!u,r={[p]:o};o&&(r[n]=c[a]||d),this._updateIcon(t,e,r,i)}}
          title="${u?"Unlock to set different sizes for active/inactive":"Lock to use same size for both states"}"
        >
          <ha-icon icon="${u?"mdi:lock":"mdi:lock-open"}"></ha-icon>
        </button>
      </div>
    `}_updateIconAnimationClasses(t,e,i){[document,document.body,this.shadowRoot,this.renderRoot,...Array.from(document.querySelectorAll("*")).filter((t=>t.shadowRoot)).map((t=>t.shadowRoot))].filter(Boolean).forEach(((t,i)=>{try{t.querySelectorAll("ha-icon").forEach((t=>{if((t.getAttribute("data-animation-debug")||"")!==e)return;const i=t.className.split(" ").filter((t=>!t.startsWith("icon-animation-")));e&&!e.includes("none")&&i.push(e),t.className=i.join(" ");const o=e.replace("icon-animation-","");if(o&&"none"!==o){const e="icon"+o.split("-").map((t=>t.charAt(0).toUpperCase()+t.slice(1))).join(""),i=o.includes("spin")||o.includes("rotate")?"2s linear infinite":"1s ease-in-out infinite";t.style.animation=`${e} ${i}`}else t.style.animation="";this._injectKeyframesIntoHaIcon(t),t.offsetHeight}))}catch(t){}}))}_getInlineAnimation(t){const e=t.replace("icon-animation-","");return e&&"none"!==e?`${"icon"+e.split("-").map((t=>t.charAt(0).toUpperCase()+t.slice(1))).join("")} ${e.includes("spin")||e.includes("rotate")?"2s linear infinite":"bounce"===e?"1s ease-in-out infinite":"shake"===e?"0.5s ease-in-out infinite":"vibrate"===e?"0.3s ease-in-out infinite":"2s ease-in-out infinite"}`:""}_applyAnimationDirectly(t,e){const i=e.replace("icon-animation-","");if(!i||"none"===i)return;const o="icon"+i.split("-").map((t=>t.charAt(0).toUpperCase()+t.slice(1))).join(""),n=i.includes("spin")||i.includes("rotate")?"2s linear infinite":"2s ease-in-out infinite";t.style.animation=`${o} ${n}`,this._injectKeyframesIntoHaIcon(t)}_injectKeyframesForAllSplitPreviewIcons(){const t=(e=1)=>{const i=document.querySelectorAll('ha-icon[data-animation-debug]:not([data-animation-debug="none"])'),o=[...Array.from(document.querySelectorAll("*")).filter((t=>t.shadowRoot)).map((t=>t.shadowRoot))],n=Array.from(i);o.forEach((t=>{t.querySelectorAll('ha-icon[data-animation-debug]:not([data-animation-debug="none"])').forEach((t=>n.push(t)))}));let a=0;n.forEach((t=>{this._injectKeyframesIntoHaIcon(t),a++})),0===a&&e<10&&setTimeout((()=>t(e+1)),150)};t()}_formatValueWithUnits(t,e,i,o){var n;return e&&(null===(n=null==o?void 0:o.states)||void 0===n?void 0:n[e])?(0,Dt.formatEntityState)(o,e,{state:t,includeUnit:!1!==i.show_units}):t}_injectKeyframesIntoHaIcon(t){const e=t.shadowRoot;if(!e)return;const i=e.querySelector("style[data-uvc-keyframes]");i&&i.remove();try{const t=document.createElement("style");if(t.setAttribute("data-uvc-keyframes",""),t.textContent=Zt._ANIMATION_KEYFRAMES,e.appendChild(t),!document.head.querySelector("style[data-uvc-global-keyframes]")){const t=document.createElement("style");t.setAttribute("data-uvc-global-keyframes",""),t.textContent=Zt._ANIMATION_KEYFRAMES,document.head.appendChild(t)}}catch(t){console.error("❌ Error injecting keyframes:",t)}}}Zt._globalStylesInjected=!1,Zt._ANIMATION_KEYFRAMES="\n    @keyframes iconPulse {0%,100%{opacity:1;transform:scale(1);}50%{opacity:0.7;transform:scale(1.1);}}\n    @keyframes iconSpin {from{transform:rotate(0deg);}to{transform:rotate(360deg);}}\n    @keyframes iconBounce {0%,20%,50%,80%,100%{transform:translateY(0);}40%{transform:translateY(-10px);}60%{transform:translateY(-5px);}}\n    @keyframes iconFlash {0%,50%,100%{opacity:1;}25%,75%{opacity:0.3;}}\n    @keyframes iconShake {0%,100%{transform:translateX(0);}10%,30%,50%,70%,90%{transform:translateX(-2px);}20%,40%,60%,80%{transform:translateX(2px);}}\n    @keyframes iconVibrate {0%,100%{transform:translate(0);}10%{transform:translate(-1px,-1px);}20%{transform:translate(1px,-1px);}30%{transform:translate(-1px,1px);}40%{transform:translate(1px,1px);}50%{transform:translate(-1px,-1px);}60%{transform:translate(1px,-1px);}70%{transform:translate(-1px,1px);}80%{transform:translate(1px,1px);}90%{transform:translate(-1px,-1px);}}\n    @keyframes iconRotateLeft {from{transform:rotate(0deg);}to{transform:rotate(-360deg);}}\n    @keyframes iconRotateRight {from{transform:rotate(0deg);}to{transform:rotate(360deg);}}\n    @keyframes iconFade {0%,100%{opacity:1;}50%{opacity:0.3;}}\n    @keyframes iconScale {0%,100%{transform:scale(1);}50%{transform:scale(1.2);}}\n    @keyframes iconTada {0%{transform:scale(1);}10%,20%{transform:scale(0.9) rotate(-3deg);}30%,50%,70%,90%{transform:scale(1.1) rotate(3deg);}40%,60%,80%{transform:scale(1.1) rotate(-3deg);}100%{transform:scale(1) rotate(0);}}\n  ";class Qt{static getInstance(){return Qt.instance||(Qt.instance=new Qt),Qt.instance}setHass(t){this.hass=t}async executeAction(t){if(this.hass&&t.action_type&&"none"!==t.action_type)try{if(t.confirmation&&!confirm(t.confirmation.text||"Are you sure?"))return;switch(t.action_type){case"toggle":t.entity&&await this.hass.callService("homeassistant","toggle",{entity_id:t.entity});break;case"show_more_info":if(t.entity){const e=new CustomEvent("hass-more-info",{detail:{entityId:t.entity},bubbles:!0,composed:!0});document.dispatchEvent(e)}break;case"navigate":if(t.navigation_path){history.pushState(null,"",t.navigation_path);const e=new CustomEvent("location-changed",{detail:{replace:!1},bubbles:!0,composed:!0});window.dispatchEvent(e)}break;case"url":if(t.url||t.url_path){const e=t.url||t.url_path||"";window.open(e,"_blank")}break;case"call_service":if(t.service){const[e,i]=t.service.split(".");e&&i&&await this.hass.callService(e,i,t.service_data,t.target)}break;case"perform_action":if(t.custom_action){const e=new CustomEvent("action",{detail:{action:"tap",config:t.custom_action},bubbles:!0,composed:!0});document.dispatchEvent(e)}break;case"show_map":if(t.latitude&&t.longitude){const e=`/map?latitude=${t.latitude}&longitude=${t.longitude}`;history.pushState(null,"",e);const i=new CustomEvent("location-changed",{detail:{replace:!1},bubbles:!0,composed:!0});window.dispatchEvent(i)}break;case"voice_assistant":if(!1!==t.start_listening){const t=new CustomEvent("hass-start-voice-conversation",{bubbles:!0,composed:!0});document.dispatchEvent(t)}break;case"trigger":t.entity&&await this.hass.callService("automation","trigger",{entity_id:t.entity});break;default:console.warn("Unknown action type:",t.action_type)}}catch(t){console.error("Error executing action:",t)}}getActionTypeOptions(){return[{value:"none",label:"No Action"},{value:"toggle",label:"Toggle"},{value:"show_more_info",label:"Show More Info"},{value:"navigate",label:"Navigate to Path"},{value:"url",label:"Open URL"},{value:"call_service",label:"Call Service"},{value:"perform_action",label:"Perform Action"},{value:"show_map",label:"Show Map"},{value:"voice_assistant",label:"Voice Assistant"},{value:"trigger",label:"Trigger"}]}validateAction(t){const e=[];if(!t.action_type||"none"===t.action_type)return{valid:!0,errors:[]};switch(t.action_type){case"toggle":case"show_more_info":case"trigger":t.entity||e.push("Entity is required for this action type");break;case"navigate":t.navigation_path||e.push("Navigation path is required");break;case"url":t.url||t.url_path||e.push("URL is required");break;case"call_service":t.service?t.service.includes(".")||e.push("Service must be in domain.service format"):e.push("Service is required");break;case"show_map":void 0!==t.latitude&&void 0!==t.longitude||e.push("Latitude and longitude are required for map action")}return{valid:0===e.length,errors:e}}renderActionForm(t,e,i){return{action:e,actionTypes:this.getActionTypeOptions(),onUpdate:i,validate:()=>this.validateAction(e)}}}const te=Qt.getInstance();class ee extends xt{constructor(){super(...arguments),this.metadata={type:"button",title:"Button",description:"Interactive buttons with actions",author:"WJD Designs",version:"1.0.0",icon:"mdi:gesture-tap-button",category:"interactive",tags:["button","action","click","interactive"]}}createDefault(t,e){return{id:t||this.generateId("button"),type:"button",label:"",action:{action_type:"none"},style:"flat",icon:"",icon_position:"before",show_icon:!1,background_color:"var(--primary-color)",text_color:"white",tap_action:{action:"nothing"},hold_action:{action:"nothing"},double_tap_action:{action:"nothing"},enable_hover_effect:!0,hover_background_color:"var(--divider-color)"}}getButtonStyles(){return[{value:"flat",label:"Flat (Default)"},{value:"glossy",label:"Glossy"},{value:"embossed",label:"Embossed"},{value:"inset",label:"Inset"},{value:"gradient-overlay",label:"Gradient Overlay"},{value:"neon-glow",label:"Neon Glow"},{value:"outline",label:"Outline"},{value:"glass",label:"Glass"},{value:"metallic",label:"Metallic"}]}getAlignmentOptions(){return[{value:"left",label:"Left"},{value:"center",label:"Center"},{value:"right",label:"Right"},{value:"justify",label:"Justify (Full Width)"}]}getIconPositionOptions(){return[{value:"before",label:"Before Text"},{value:"after",label:"After Text"}]}getHoverEffectOptions(){return[{value:"none",label:"None"},{value:"color",label:"Color Change"},{value:"scale",label:"Scale"},{value:"glow",label:"Glow"},{value:"lift",label:"Lift (translate Y)"}]}renderGeneralTab(t,e,i,o){var n;const a=t;return q`
      ${this.injectUcFormStyles()}
      <div class="general-tab">
        <!-- Basic Settings -->
        ${this.renderSettingsSection("Basic Settings","Configure the button appearance and text content.",[{title:"Button Text",description:"Text to display on the button (leave blank for icon-only).",hass:e,data:{label:null!==(n=a.label)&&void 0!==n?n:""},schema:[this.textField("label")],onChange:t=>o(t.detail.value)},{title:"Button Style",description:"Visual style of the button",hass:e,data:{style:a.style||"flat"},schema:[this.selectField("style",this.getButtonStyles())],onChange:t=>o(t.detail.value)},{title:"Alignment",description:"How the button is aligned within its container",hass:e,data:{alignment:a.alignment||"center"},schema:[this.selectField("alignment",this.getAlignmentOptions())],onChange:t=>o(t.detail.value)}])}

        <!-- Icon Settings (all fields contained within the same section) -->
        ${(()=>{const t=[{title:"Show Icon",description:"Display an icon on the button",hass:e,data:{show_icon:a.show_icon||!1},schema:[this.booleanField("show_icon")],onChange:t=>o(t.detail.value)}];return a.show_icon&&t.push({title:"Icon",description:"Icon to display (e.g., mdi:home)",hass:e,data:{icon:a.icon||""},schema:[this.iconField("icon")],onChange:t=>o(t.detail.value)},{title:"Icon Position",description:"Position of the icon relative to text",hass:e,data:{icon_position:a.icon_position||"before"},schema:[this.selectField("icon_position",this.getIconPositionOptions())],onChange:t=>o(t.detail.value)}),this.renderSettingsSection("Icon Settings","Configure icon display and positioning for the button.",t)})()}

        <!-- Colors -->
        <div class="settings-section">
          <div class="section-title">Colors</div>

          <div class="color-controls">
            <ultra-color-picker
              .label=${"Background Color"}
              .value=${a.background_color||"var(--primary-color)"}
              .defaultValue=${"var(--primary-color)"}
              .hass=${e}
              @value-changed=${t=>o({background_color:t.detail.value})}
            ></ultra-color-picker>

            <ultra-color-picker
              .label=${"Text Color"}
              .value=${a.text_color||"white"}
              .defaultValue=${"white"}
              .hass=${e}
              @value-changed=${t=>o({text_color:t.detail.value})}
            ></ultra-color-picker>
          </div>
        </div>

        <!-- Hover Effects (replicated pattern from image-module) -->
        <div class="settings-section">
          <div
            style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 16px; padding-bottom: 0; border-bottom: none;"
          >
            <div
              class="section-title"
              style="font-size: 18px; font-weight: 700; text-transform: uppercase; color: var(--primary-color); letter-spacing: 0.5px;"
            >
              Hover Effects
            </div>
            <ha-switch
              .checked=${a.enable_hover_effect||!1}
              @change=${t=>{const e=t.target;o({enable_hover_effect:e.checked})}}
            ></ha-switch>
          </div>

          ${a.enable_hover_effect?q`
                <div class="field-group" style="margin-bottom: 16px;">
                  ${this.renderFieldSection("Effect Type","Choose the hover effect for this button.",e,{hover_effect:a.hover_effect||"color"},[this.selectField("hover_effect",this.getHoverEffectOptions())],(t=>o(t.detail.value)))}
                </div>

                ${"color"===(a.hover_effect||"color")?q`
                      <div class="field-group" style="margin-bottom: 16px;">
                        <ultra-color-picker
                          .label=${"Hover Color"}
                          .value=${a.hover_background_color||"var(--primary-color)"}
                          .defaultValue=${"var(--primary-color)"}
                          .hass=${e}
                          @value-changed=${t=>o({hover_background_color:t.detail.value})}
                        ></ultra-color-picker>
                      </div>
                    `:""}
                ${"glow"===(a.hover_effect||"color")?q`
                      <div class="field-group" style="margin-bottom: 16px;">
                        <ultra-color-picker
                          .label=${"Glow Color"}
                          .value=${a.hover_glow_color||"var(--primary-color)"}
                          .defaultValue=${"var(--primary-color)"}
                          .hass=${e}
                          @value-changed=${t=>o({hover_glow_color:t.detail.value})}
                        ></ultra-color-picker>
                      </div>
                    `:""}
              `:q`
                <div
                  style="text-align: center; padding: 20px; color: var(--secondary-text-color); font-style: italic;"
                >
                  Enable the toggle above to configure hover effects
                </div>
              `}
        </div>

        <!-- Link Action removed: use global Tap/Hold/Double-Tap actions instead -->
      </div>
    `}renderLinkActionForm(t,e,i){const o=te.getActionTypeOptions();return q`
      <div class="link-action-form">
        <!-- Action Type -->
        <div class="field-group" style="margin-bottom: 16px;">
          ${this.renderFieldSection("Action Type","Choose what happens when the button is clicked",e,{action_type:t.action_type||"none"},[this.selectField("action_type",o)],(e=>i(Object.assign(Object.assign({},t),{action_type:e.detail.value.action_type}))))}
        </div>

        ${this.renderActionTypeSpecificFields(t,e,i)}
      </div>
    `}renderActionTypeSpecificFields(t,e,i){switch(t.action_type){case"toggle":case"show_more_info":case"trigger":return this.renderFieldSection("Entity","Select the entity to interact with",e,{entity:t.entity||""},[this.entityField("entity")],(e=>i(Object.assign(Object.assign({},t),{entity:e.detail.value.entity}))));case"navigate":return this.renderFieldSection("Navigation Path","Path to navigate to (e.g., /dashboard/energy)",e,{navigation_path:t.navigation_path||""},[this.textField("navigation_path")],(e=>i(Object.assign(Object.assign({},t),{navigation_path:e.detail.value.navigation_path}))));case"url":return this.renderFieldSection("URL","URL to open (e.g., https://example.com)",e,{url:t.url||""},[this.textField("url")],(e=>i(Object.assign(Object.assign({},t),{url:e.detail.value.url}))));case"call_service":return q`
          <div class="field-group" style="margin-bottom: 16px;">
            ${this.renderFieldSection("Service","Service to call (e.g., light.turn_on)",e,{service:t.service||""},[this.textField("service")],(e=>i(Object.assign(Object.assign({},t),{service:e.detail.value.service}))))}
          </div>

          <div class="field-group">
            ${this.renderFieldSection("Service Data (JSON)","Optional data to pass to the service (JSON format)",e,{service_data:JSON.stringify(t.service_data||{})},[this.textField("service_data")],(e=>{try{const o=JSON.parse(e.detail.value.service_data||"{}");i(Object.assign(Object.assign({},t),{service_data:o}))}catch(t){console.warn("Invalid JSON in service data")}}))}
          </div>
        `;default:return q``}}renderActionsTab(t,e,i,o){const n=t;return $t.render(n,e,i,o,(()=>this.injectUcFormStyles()))}renderButtonActionConfig(t,e,i){return q`
      <div style="margin-bottom: 16px;">
        ${this.renderSingleActionConfig("Tap Action","Action to perform when button is tapped",t.tap_action||{action:"nothing"},e,(t=>i({tap_action:t})))}
      </div>

      <div style="margin-bottom: 16px;">
        ${this.renderSingleActionConfig("Hold Action","Action to perform when button is held down",t.hold_action||{action:"nothing"},e,(t=>i({hold_action:t})))}
      </div>

      <div style="margin-bottom: 16px;">
        ${this.renderSingleActionConfig("Double Tap Action","Action to perform when button is double-tapped",t.double_tap_action||{action:"nothing"},e,(t=>i({double_tap_action:t})))}
      </div>
    `}renderSingleActionConfig(t,e,i,o,n){return q`
      <div style="margin-bottom: 16px;">
        <div
          class="field-title"
          style="font-size: 16px !important; font-weight: 600 !important; margin-bottom: 12px;"
        >
          ${t}
        </div>
        <div style="margin-bottom: 12px;">
          <ha-form
            .hass=${o}
            .data=${{action_config:"nothing"===(null==i?void 0:i.action)?Object.assign(Object.assign({},i),{action:"default"}):i}}
            .schema=${[{name:"action_config",label:"",selector:{ui_action:{actions:["default","more-info","toggle","navigate","url","perform-action","assist"]}}}]}
            .computeLabel=${t=>t.label||""}
            .computeDescription=${t=>t.description||""}
            @value-changed=${t=>{var e;const i=null===(e=t.detail.value)||void 0===e?void 0:e.action_config;i&&n(i)}}
          ></ha-form>
        </div>
      </div>
    `}renderPreview(t,e){var i;const o=t,n=o,a=o.design||{},r=a.color||o.text_color||"white",s=a.font_size||"14px",l=a.background_color||o.background_color||"var(--primary-color)",d=o.style||"flat",c={flat:`background: ${l}; border: none; box-shadow: none;`,glossy:`background: linear-gradient(180deg, rgba(255,255,255,0.25), rgba(255,255,255,0)) , ${l}; border: none;`,embossed:`background: ${l}; border: 1px solid rgba(0,0,0,0.15); box-shadow: inset 0 2px 2px rgba(255,255,255,0.2), inset 0 -2px 2px rgba(0,0,0,0.15);`,inset:`background: ${l}; border: none; box-shadow: inset 0 2px 6px rgba(0,0,0,0.35);`,"gradient-overlay":`background: linear-gradient(135deg, rgba(255,255,255,0.15), rgba(0,0,0,0.15)), ${l}; border: none;`,"neon-glow":`background: ${l}; border: none; box-shadow: 0 0 10px ${l}, 0 0 20px ${l};`,outline:`background: transparent; border: 2px solid ${l}; color: ${l};`,glass:`background: ${l}; backdrop-filter: blur(6px); border: 1px solid rgba(255,255,255,0.25);`,metallic:"background: linear-gradient(90deg, #d7d7d7, #f0f0f0 50%, #d7d7d7); color: #333; border: 1px solid #bbb;"},p=`\n      color: ${r};\n      padding: 12px 24px;\n      font-size: ${s};\n      font-weight: 500;\n      border-radius: 8px;\n      cursor: pointer;\n      transition: all 0.2s ease;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      gap: 8px;\n      min-height: 40px;\n     ${c[d]||c.flat}`,u=`\n      display: flex;\n      justify-content: ${"left"===o.alignment?"flex-start":"right"===o.alignment?"flex-end":"center"};\n    `,m={width:"100%",padding:a.padding_top||a.padding_bottom||a.padding_left||a.padding_right?`${a.padding_top||"8px"} ${a.padding_right||"8px"} ${a.padding_bottom||"8px"} ${a.padding_left||"8px"}`:"8px",margin:a.margin_top||a.margin_bottom||a.margin_left||a.margin_right?`${a.margin_top||"0"} ${a.margin_right||"0"} ${a.margin_bottom||"0"} ${a.margin_left||"0"}`:"0",background:a.background_color||"transparent",backgroundImage:this.getBackgroundImageCSS(Object.assign(Object.assign({},n),a),e),"background-size":"cover","background-position":"center","background-repeat":"no-repeat","border-radius":a.border_radius||"8px",border:a.border_style&&"none"!==a.border_style?`${a.border_width||"1px"} ${a.border_style} ${a.border_color||"var(--divider-color)"}`:"none","box-shadow":a.box_shadow_h||a.box_shadow_v||a.box_shadow_blur||a.box_shadow_spread?`${a.box_shadow_h||"0px"} ${a.box_shadow_v||"0px"} ${a.box_shadow_blur||"0px"} ${a.box_shadow_spread||"0px"} ${a.box_shadow_color||"rgba(0,0,0,.2)"}`:"none","box-sizing":"border-box"};let g=null,h=null,b=!1,v=0,_=0;const f=Boolean(o.enable_hover_effect),y=o.hover_effect||"color",x=o.hover_background_color||l,w=o.hover_glow_color||l;return q`
      <div class="button-module-container" style=${this.styleObjectToCss(m)}>
        <div class="button-module-preview" style="${u}">
          <button
            class="ultra-button ${d} ${"justify"===o.alignment?"justify":""}"
            style="${p} ${"justify"===o.alignment?"width: 100%;":""} ${a.text_align?`text-align:${a.text_align};`:""} ${a.text_shadow_h||a.text_shadow_v||a.text_shadow_blur||a.text_shadow_color?`text-shadow:${a.text_shadow_h||"0px"} ${a.text_shadow_v||"0px"} ${a.text_shadow_blur||"0px"} ${a.text_shadow_color||"rgba(0,0,0,.2)"};`:""} ${o.enable_hover_effect||o.hover_effect?"will-change: transform, box-shadow, background-color;":""}"
            @pointerdown=${t=>{t.preventDefault(),t.stopPropagation(),b=!1,h=setTimeout((()=>{b=!0,o.hold_action&&"nothing"!==o.hold_action.action&&wt.handleAction(o.hold_action,e,t.target)}),500)}}
            @pointerup=${t=>{if(t.preventDefault(),t.stopPropagation(),h&&(clearTimeout(h),h=null),b)return void(b=!1);const i=Date.now();i-_<300&&1===v?(g&&(clearTimeout(g),g=null),v=0,o.double_tap_action&&"nothing"!==o.double_tap_action.action&&wt.handleAction(o.double_tap_action,e,t.target)):(v=1,_=i,g=setTimeout((()=>{v=0,o.tap_action&&"nothing"!==o.tap_action.action?wt.handleAction(o.tap_action,e,t.target):o.action&&(te.setHass(e),te.executeAction(o.action))}),300))}}
            @mouseover=${t=>{if(!f)return;const e=t.currentTarget;switch(e.dataset.origBg||(e.dataset.origBg=e.style.background||""),e.dataset.origShadow||(e.dataset.origShadow=e.style.boxShadow||""),e.dataset.origTransform||(e.dataset.origTransform=e.style.transform||""),y){case"color":e.style.background=x;break;case"scale":e.style.transform="scale(1.05)";break;case"glow":e.style.boxShadow=`0 0 12px ${w}, 0 0 24px ${w}`;break;case"lift":e.style.transform="translateY(-3px)",e.style.boxShadow="0 6px 14px rgba(0,0,0,0.2)"}}}
            @mouseout=${t=>{if(!f)return;const e=t.currentTarget;void 0!==e.dataset.origBg&&(e.style.background=e.dataset.origBg),void 0!==e.dataset.origShadow&&(e.style.boxShadow=e.dataset.origShadow),void 0!==e.dataset.origTransform&&(e.style.transform=e.dataset.origTransform)}}
          >
            ${o.show_icon&&o.icon&&"before"===o.icon_position?q`<ha-icon icon="${o.icon}"></ha-icon>`:""}
            ${null!==(i=o.label)&&void 0!==i?i:""}
            ${o.show_icon&&o.icon&&"after"===o.icon_position?q`<ha-icon icon="${o.icon}"></ha-icon>`:""}
          </button>
        </div>
      </div>
    `}styleObjectToCss(t){return Object.entries(t).map((([t,e])=>`${t.replace(/([A-Z])/g,"-$1").toLowerCase()}: ${e}`)).join("; ")}getBackgroundImageCSS(t,e){var i,o;const n=t.background_image_type,a=t.background_image,r=t.background_image_entity;if(!n||"none"===n)return"none";switch(n){case"upload":if(a)return`url("${Kt(e,a)}")`;break;case"url":if(a)return`url("${a}")`;break;case"entity":if(r&&e){const t=e.states[r];if(t){const n=(null===(i=t.attributes)||void 0===i?void 0:i.entity_picture)||(null===(o=t.attributes)||void 0===o?void 0:o.image)||("string"==typeof t.state?t.state:"");if(n&&"unknown"!==n&&"unavailable"!==n)return`url("${Kt(e,n)}")`}}}return"none"}}class ie extends xt{constructor(){super(...arguments),this.metadata={type:"markdown",title:"Markdown Module",description:"Display rich markdown content",author:"WJD Designs",version:"1.0.0",icon:"mdi:language-markdown",category:"content",tags:["markdown","content","rich-text","formatting","template"]}}createDefault(t,e){return{id:t||this.generateId("markdown"),type:"markdown",markdown_content:"# Welcome to Markdown\n\nThis is a **markdown** module that supports:\n\n- *Italic* and **bold** text\n- [Links](https://example.com)\n- `inline code`\n- Lists and more!\n\n## Features\n1. Headers (H1-H6)\n2. Tables\n3. Code blocks\n4. And much more...\n\n> This is a blockquote example",link:"",hide_if_no_link:!1,template_mode:!1,template:"",enable_html:!1,enable_tables:!0,enable_code_highlighting:!0,max_height:"none",overflow_behavior:"visible",tap_action:{action:"nothing"},hold_action:{action:"nothing"},double_tap_action:{action:"nothing"},enable_hover_effect:!0,hover_background_color:"var(--divider-color)"}}renderGeneralTab(t,e,i,o){const n=t;return q`
      ${this.injectUcFormStyles()}
      <div class="module-general-settings">
        <!-- Content Section -->
        <div class="wpbakery-section">
          <h4>Markdown Content</h4>
          <div class="ha-form-field">
            <ha-form
              .hass=${e}
              .data=${{markdown_content:n.markdown_content||""}}
              .schema=${[{name:"markdown_content",label:"Content",description:"Enter your markdown content with full formatting support",selector:{text:{multiline:!0}}}]}
              .computeLabel=${t=>t.label||t.name}
              .computeDescription=${t=>t.description||""}
              @value-changed=${t=>o({markdown_content:t.detail.value.markdown_content})}
            ></ha-form>
          </div>
        </div>

        <!-- Link & Behavior Section -->
        <div class="wpbakery-section">
          <h4>Link & Behavior</h4>
          <div class="two-column-grid">
            <div class="ha-form-field">
              <ha-form
                .hass=${e}
                .data=${{link:n.link||""}}
                .schema=${[{name:"link",label:"Link URL",description:"Optional URL to make the markdown clickable",selector:{text:{}}}]}
                .computeLabel=${t=>t.label||t.name}
                .computeDescription=${t=>t.description||""}
                @value-changed=${t=>o({link:t.detail.value.link})}
              ></ha-form>
            </div>
            <div class="ha-form-field">
              <ha-form
                .hass=${e}
                .data=${{hide_if_no_link:n.hide_if_no_link||!1}}
                .schema=${[{name:"hide_if_no_link",label:"Hide if No Link",description:"Hide module when no link is provided",selector:{boolean:{}}}]}
                .computeLabel=${t=>t.label||t.name}
                .computeDescription=${t=>t.description||""}
                @value-changed=${t=>o({hide_if_no_link:t.detail.value.hide_if_no_link})}
              ></ha-form>
            </div>
          </div>
        </div>

        <!-- Display Options Section -->
        <div class="wpbakery-section">
          <h4>Display Options</h4>
          <div class="two-column-grid">
            <div class="ha-form-field">
              <ha-form
                .hass=${e}
                .data=${{max_height:n.max_height||"none"}}
                .schema=${[{name:"max_height",label:"Max Height",description:"Maximum height (e.g., 300px, 50vh, none)",selector:{text:{}}}]}
                .computeLabel=${t=>t.label||t.name}
                .computeDescription=${t=>t.description||""}
                @value-changed=${t=>o({max_height:t.detail.value.max_height})}
              ></ha-form>
            </div>
            <div class="ha-form-field">
              <ha-form
                .hass=${e}
                .data=${{overflow_behavior:n.overflow_behavior||"visible"}}
                .schema=${[{name:"overflow_behavior",label:"Overflow Behavior",selector:{select:{options:[{value:"visible",label:"Visible"},{value:"scroll",label:"Scroll"},{value:"hidden",label:"Hidden"}],mode:"dropdown"}}}]}
                .computeLabel=${t=>t.label||t.name}
                @value-changed=${t=>o({overflow_behavior:t.detail.value.overflow_behavior})}
              ></ha-form>
            </div>
          </div>

          <!-- Feature Toggles -->
          <div class="three-column-grid">
            <ha-form
              .hass=${e}
              .data=${{enable_html:n.enable_html||!1}}
              .schema=${[{name:"enable_html",label:"Enable HTML",description:"Allow HTML tags in markdown",selector:{boolean:{}}}]}
              .computeLabel=${t=>t.label||t.name}
              .computeDescription=${t=>t.description||""}
              @value-changed=${t=>o({enable_html:t.detail.value.enable_html})}
            ></ha-form>

            <ha-form
              .hass=${e}
              .data=${{enable_tables:!1!==n.enable_tables}}
              .schema=${[{name:"enable_tables",label:"Enable Tables",description:"Support for markdown tables",selector:{boolean:{}}}]}
              .computeLabel=${t=>t.label||t.name}
              .computeDescription=${t=>t.description||""}
              @value-changed=${t=>o({enable_tables:t.detail.value.enable_tables})}
            ></ha-form>

            <ha-form
              .hass=${e}
              .data=${{enable_code_highlighting:!1!==n.enable_code_highlighting}}
              .schema=${[{name:"enable_code_highlighting",label:"Code Highlighting",description:"Syntax highlighting for code blocks",selector:{boolean:{}}}]}
              .computeLabel=${t=>t.label||t.name}
              .computeDescription=${t=>t.description||""}
              @value-changed=${t=>o({enable_code_highlighting:t.detail.value.enable_code_highlighting})}
            ></ha-form>
          </div>
        </div>

        <!-- Template Mode Section (standardized) -->
        <div
          class="settings-section"
          style="background: var(--secondary-background-color); border-radius: 8px; padding: 16px; margin-top: 24px;"
        >
          <div
            class="section-title"
            style="font-size: 18px; font-weight: 700; text-transform: uppercase; color: var(--primary-color); margin-bottom: 16px; border-bottom: 2px solid var(--primary-color); padding-bottom: 8px;"
          >
            Template Mode
          </div>

          <div class="field-group" style="margin-bottom: 16px;">
            <ha-form
              .hass=${e}
              .data=${{template_mode:n.template_mode||!1}}
              .schema=${[{name:"template_mode",label:"Template Mode",description:"Use Home Assistant templating syntax to render content",selector:{boolean:{}}}]}
              .computeLabel=${t=>t.label||t.name}
              .computeDescription=${t=>t.description||""}
              @value-changed=${t=>o({template_mode:t.detail.value.template_mode})}
            ></ha-form>
          </div>

          ${n.template_mode?q`
                <div class="field-group" style="margin-bottom: 16px;">
                  <ha-form
                    .hass=${e}
                    .data=${{template:n.template||""}}
                    .schema=${[{name:"template",label:"Value Template",description:"Template to render using Jinja2 syntax",selector:{text:{multiline:!0}}}]}
                    .computeLabel=${t=>t.label||t.name}
                    .computeDescription=${t=>t.description||""}
                    @value-changed=${t=>o({template:t.detail.value.template})}
                  ></ha-form>
                </div>
              `:""}
        </div>
      </div>
    `}renderActionsTab(t,e,i,o){return $t.render(t,e,i,o,(()=>q``))}renderPreview(t,e){const i=t;if(i.hide_if_no_link&&(!i.link||""===i.link.trim()))return q`<div class="markdown-module-hidden">Hidden (no link)</div>`;const o=i,n=i.design||{},a={padding:n.padding_top||n.padding_bottom||n.padding_left||n.padding_right||o.padding_top||o.padding_bottom||o.padding_left||o.padding_right?`${this.addPixelUnit(n.padding_top||o.padding_top)||"8px"} ${this.addPixelUnit(n.padding_right||o.padding_right)||"0px"} ${this.addPixelUnit(n.padding_bottom||o.padding_bottom)||"8px"} ${this.addPixelUnit(n.padding_left||o.padding_left)||"0px"}`:"8px 0",margin:n.margin_top||n.margin_bottom||n.margin_left||n.margin_right||o.margin_top||o.margin_bottom||o.margin_left||o.margin_right?`${this.addPixelUnit(n.margin_top||o.margin_top)||"0px"} ${this.addPixelUnit(n.margin_right||o.margin_right)||"0px"} ${this.addPixelUnit(n.margin_bottom||o.margin_bottom)||"0px"} ${this.addPixelUnit(n.margin_left||o.margin_left)||"0px"}`:"0",background:n.background_color&&"transparent"!==n.background_color?n.background_color:o.background_color&&"transparent"!==o.background_color?o.background_color:"transparent",backgroundImage:this.getBackgroundImageCSS(Object.assign(Object.assign({},o),n),e),backgroundSize:"cover",backgroundPosition:"center",backgroundRepeat:"no-repeat",border:(n.border_style||o.border_style)&&"none"!==(n.border_style||o.border_style)?`${this.addPixelUnit(n.border_width||o.border_width)||"1px"} ${n.border_style||o.border_style} ${n.border_color||o.border_color||"var(--divider-color)"}`:"none",borderRadius:this.addPixelUnit(n.border_radius||o.border_radius)||"0",position:n.position||o.position||"static",top:n.top||o.top||"auto",bottom:n.bottom||o.bottom||"auto",left:n.left||o.left||"auto",right:n.right||o.right||"auto",zIndex:n.z_index||o.z_index||"auto",width:n.width||o.width||"100%",height:n.height||o.height||"auto",maxWidth:n.max_width||o.max_width||"100%",maxHeight:n.max_height||o.max_height||"none",minWidth:n.min_width||o.min_width||"none",minHeight:n.min_height||o.min_height||"auto",overflow:n.overflow||o.overflow||"visible",clipPath:n.clip_path||o.clip_path||"none",backdropFilter:n.backdrop_filter||o.backdrop_filter||"none",boxShadow:n.box_shadow_h&&n.box_shadow_v?`${n.box_shadow_h||"0"} ${n.box_shadow_v||"0"} ${n.box_shadow_blur||"0"} ${n.box_shadow_spread||"0"} ${n.box_shadow_color||"rgba(0,0,0,0.1)"}`:o.box_shadow_h&&o.box_shadow_v?`${o.box_shadow_h||"0"} ${o.box_shadow_v||"0"} ${o.box_shadow_blur||"0"} ${o.box_shadow_spread||"0"} ${o.box_shadow_color||"rgba(0,0,0,0.1)"}`:"none",boxSizing:"border-box"},r={fontSize:n.font_size&&n.font_size||(o.font_size?`${o.font_size}px`:`${i.font_size||14}px`),fontFamily:n.font_family||o.font_family||i.font_family||"Roboto",color:n&&n.color||o.color||i.color||"var(--primary-text-color)",textAlign:(n.text_align&&"inherit"!==n.text_align?n.text_align:void 0)||o.text_align||i.alignment||"left",lineHeight:n.line_height||o.line_height||i.line_height||1.6,letterSpacing:n.letter_spacing||o.letter_spacing||i.letter_spacing||"normal",padding:n.padding_top||n.padding_bottom||n.padding_left||n.padding_right||o.padding_top||o.padding_bottom||o.padding_left||o.padding_right?`${this.addPixelUnit(n.padding_top||o.padding_top)||"8px"} ${this.addPixelUnit(n.padding_right||o.padding_right)||"0px"} ${this.addPixelUnit(n.padding_bottom||o.padding_bottom)||"8px"} ${this.addPixelUnit(n.padding_left||o.padding_left)||"0px"}`:"8px 0",maxHeight:(n.max_height&&"none"!==n.max_height?n.max_height:void 0)||(i.max_height&&"none"!==i.max_height?i.max_height:"none"),overflow:(n.max_height&&"none"!==n.max_height?n.overflow||"visible":void 0)||i.max_height&&"none"!==i.max_height&&i.overflow_behavior||"visible",textShadow:n.text_shadow_h&&n.text_shadow_v?`${n.text_shadow_h||"0"} ${n.text_shadow_v||"0"} ${n.text_shadow_blur||"0"} ${n.text_shadow_color||"rgba(0,0,0,0.5)"}`:o.text_shadow_h&&o.text_shadow_v?`${o.text_shadow_h||"0"} ${o.text_shadow_v||"0"} ${o.text_shadow_blur||"0"} ${o.text_shadow_color||"rgba(0,0,0,0.5)"}`:"none",boxShadow:n.box_shadow_h&&n.box_shadow_v?`${n.box_shadow_h||"0"} ${n.box_shadow_v||"0"} ${n.box_shadow_blur||"0"} ${n.box_shadow_spread||"0"} ${n.box_shadow_color||"rgba(0,0,0,0.1)"}`:o.box_shadow_h&&o.box_shadow_v?`${o.box_shadow_h||"0"} ${o.box_shadow_v||"0"} ${o.box_shadow_blur||"0"} ${o.box_shadow_spread||"0"} ${o.box_shadow_color||"rgba(0,0,0,0.1)"}`:"none"},s=i.template_mode&&i.template?`Template: ${i.template}`:(t=>{if(!t)return"";let e=t.replace(/^#{6} (.*$)/gim,"<h6>$1</h6>").replace(/^#{5} (.*$)/gim,"<h5>$1</h5>").replace(/^#{4} (.*$)/gim,"<h4>$1</h4>").replace(/^#{3} (.*$)/gim,"<h3>$1</h3>").replace(/^#{2} (.*$)/gim,"<h2>$1</h2>").replace(/^#{1} (.*$)/gim,"<h1>$1</h1>").replace(/\*\*\*(.*?)\*\*\*/g,"<strong><em>$1</em></strong>").replace(/\*\*(.*?)\*\*/g,"<strong>$1</strong>").replace(/\*(.*?)\*/g,"<em>$1</em>").replace(/`(.*?)`/g,"<code>$1</code>").replace(/\[([^\]]+)\]\(([^)]+)\)/g,'<a href="$2" target="_blank" rel="noopener noreferrer">$1</a>').replace(/^> (.*$)/gim,"<blockquote>$1</blockquote>").replace(/^---$/gim,"<hr>").replace(/^\*\*\*$/gim,"<hr>").replace(/\n\n/g,"</p><p>").replace(/\n/g,"<br/>");return e="<p>"+e+"</p>",e=e.replace(/<p><\/p>/g,""),e=e.replace(/<p>(<h[1-6]>.*?<\/h[1-6]>)<\/p>/g,"$1"),e=e.replace(/<p>(<blockquote>.*?<\/blockquote>)<\/p>/g,"$1"),e=e.replace(/<p>(<hr>)<\/p>/g,"$1"),e=e.replace(/^[-*+] (.*$)/gim,"<li>$1</li>"),e=e.replace(/^(\d+)\. (.*$)/gim,"<li>$2</li>"),e=e.replace(/(<li>[\s\S]*?<\/li>(?:\s*<li>[\s\S]*?<\/li>)*)/g,"<ul>$1</ul>"),e})(i.markdown_content||"");let l=null,d=null,c=!1,p=0,u=0;const m=i.link&&""!==i.link.trim()?q`<a href="${i.link}" style="color: inherit; text-decoration: inherit;">
            <div class="markdown-content" .innerHTML=${s}></div>
          </a>`:q`<div class="markdown-content" .innerHTML=${s}></div>`;return q`
      <div
        class="markdown-module-container"
        style="${this.styleObjectToCss(a)}; cursor: ${i.tap_action&&"nothing"!==i.tap_action.action||i.hold_action&&"nothing"!==i.hold_action.action||i.double_tap_action&&"nothing"!==i.double_tap_action.action?"pointer":"default"};"
        @pointerdown=${t=>{t.preventDefault(),t.stopPropagation(),c=!1,d=setTimeout((()=>{c=!0,i.hold_action&&"nothing"!==i.hold_action.action&&wt.handleAction(i.hold_action,e,t.target)}),500)}}
        @pointerup=${t=>{if(t.preventDefault(),t.stopPropagation(),d&&(clearTimeout(d),d=null),c)return void(c=!1);const o=Date.now();o-u<300&&1===p?(l&&(clearTimeout(l),l=null),p=0,i.double_tap_action&&"nothing"!==i.double_tap_action.action&&wt.handleAction(i.double_tap_action,e,t.target)):(p=1,u=o,l=setTimeout((()=>{p=0,i.tap_action&&"nothing"!==i.tap_action.action&&wt.handleAction(i.tap_action,e,t.target)}),300))}}
      >
        <div class="markdown-module-preview" style=${this.styleObjectToCss(r)}>
          ${m}
        </div>
      </div>
    `}validate(t){const e=t,i=[...super.validate(t).errors];if(e.markdown_content&&""!==e.markdown_content.trim()||i.push("Markdown content is required"),e.font_size&&(e.font_size<1||e.font_size>200)&&i.push("Font size must be between 1 and 200 pixels"),e.link&&""!==e.link.trim())try{new URL(e.link)}catch(t){e.link.startsWith("/")||e.link.startsWith("#")||i.push('Link must be a valid URL or start with "/" for relative paths')}return{valid:0===i.length,errors:i}}getStyles(){return"\n      .markdown-module-preview {\n        min-height: 20px;\n        word-wrap: break-word;\n      }\n      \n      .markdown-module-hidden {\n        color: var(--secondary-text-color);\n        font-style: italic;\n        text-align: center;\n        padding: 12px;\n        background: var(--secondary-background-color);\n        border-radius: 4px;\n      }\n\n      .markdown-content {\n        width: 100%;\n      }\n      \n             /* Module-specific grid layouts */\n       .two-column-grid {\n         display: grid;\n         grid-template-columns: 1fr 1fr;\n         gap: 20px;\n         margin-bottom: 20px;\n       }\n\n       .three-column-grid {\n         display: grid;\n         grid-template-columns: 1fr 1fr 1fr;\n         gap: 16px;\n         margin-bottom: 20px;\n       }\n       \n       @media (max-width: 768px) {\n         .two-column-grid,\n         .three-column-grid {\n           grid-template-columns: 1fr;\n           gap: 16px;\n         }\n       }\n\n      .markdown-content h1,\n      .markdown-content h2,\n      .markdown-content h3,\n      .markdown-content h4,\n      .markdown-content h5,\n      .markdown-content h6 {\n        margin: 16px 0 8px 0;\n        font-weight: 600;\n        line-height: 1.2;\n      }\n\n      .markdown-content h1 { font-size: 2em; }\n      .markdown-content h2 { font-size: 1.5em; }\n      .markdown-content h3 { font-size: 1.25em; }\n      .markdown-content h4 { font-size: 1.1em; }\n      .markdown-content h5 { font-size: 1em; font-weight: 700; }\n      .markdown-content h6 { font-size: 0.9em; font-weight: 700; }\n\n      .markdown-content p {\n        margin: 8px 0;\n        line-height: inherit;\n      }\n\n      .markdown-content ul,\n      .markdown-content ol {\n        margin: 8px 0;\n        padding-left: 20px;\n      }\n\n      .markdown-content li {\n        margin: 4px 0;\n        line-height: inherit;\n      }\n\n      .markdown-content code {\n        background: var(--secondary-background-color);\n        padding: 2px 4px;\n        border-radius: 3px;\n        font-family: 'Courier New', monospace;\n        font-size: 0.9em;\n      }\n\n      .markdown-content blockquote {\n        border-left: 4px solid var(--primary-color);\n        margin: 16px 0;\n        padding: 8px 16px;\n        background: var(--secondary-background-color);\n        font-style: italic;\n      }\n\n      .markdown-content a {\n        color: var(--primary-color);\n        text-decoration: none;\n      }\n\n      .markdown-content a:hover {\n        text-decoration: underline;\n      }\n\n      .markdown-content strong {\n        font-weight: 600;\n      }\n\n      .markdown-content em {\n        font-style: italic;\n      }\n\n      .markdown-content br {\n        line-height: inherit;\n      }\n      \n      .markdown-content hr {\n        border: none;\n        border-top: 1px solid var(--divider-color);\n        margin: 16px 0;\n      }\n      \n      .markdown-content table {\n        border-collapse: collapse;\n        width: 100%;\n        margin: 16px 0;\n      }\n      \n      .markdown-content th,\n      .markdown-content td {\n        border: 1px solid var(--divider-color);\n        padding: 8px 12px;\n        text-align: left;\n      }\n      \n      .markdown-content th {\n        background: var(--secondary-background-color);\n        font-weight: 600;\n      }\n    "}styleObjectToCss(t){return Object.entries(t).map((([t,e])=>`${this.camelToKebab(t)}: ${e}`)).join("; ")}camelToKebab(t){return t.replace(/([a-z0-9]|(?=[A-Z]))([A-Z])/g,"$1-$2").toLowerCase()}getBackgroundImageCSS(t,e){var i,o;const n=t.background_image_type,a=t.background_image,r=t.background_image_entity;if(!n||"none"===n)return"none";switch(n){case"upload":if(a)return`url("${Kt(e,a)}")`;break;case"url":if(a)return`url("${a}")`;break;case"entity":if(r&&e){const t=e.states[r];if(t){const n=(null===(i=t.attributes)||void 0===i?void 0:i.entity_picture)||(null===(o=t.attributes)||void 0===o?void 0:o.image)||("string"==typeof t.state?t.state:"");if(n&&"unknown"!==n&&"unavailable"!==n)return`url("${Kt(e,n)}")`}}}return"none"}addPixelUnit(t){return t?/^\d+$/.test(t)?`${t}px`:/^[\d\s]+$/.test(t)?t.split(" ").map((t=>t.trim()?`${t}px`:t)).join(" "):t:t}}class oe extends xt{constructor(){super(...arguments),this.metadata={type:"horizontal",title:"Horizontal Layout",description:"Arrange modules in rows with flexible horizontal and vertical alignment and spacing",author:"WJD Designs",version:"1.0.0",icon:"mdi:view-sequential",category:"layout",tags:["layout","horizontal","vertical","alignment","container","flexbox"]}}createDefault(t,e){return{id:t||this.generateId("horizontal"),type:"horizontal",gap:.7,wrap:!1,modules:[],tap_action:{action:"nothing"},hold_action:{action:"nothing"},double_tap_action:{action:"nothing"}}}renderGeneralTab(t,e,i,o){const n=t;return q`
      ${this.injectUcFormStyles()}

      <div class="module-general-settings">
        <!-- Layout Configuration Section -->
        ${this.renderSettingsSection("Layout Configuration","Configure how items are arranged horizontally within the container.",[{title:"Horizontal Alignment",description:"Choose how items are aligned horizontally within the container.",hass:e,data:{alignment:n.alignment||"left"},schema:[this.selectField("alignment",[{value:"left",label:"Left"},{value:"center",label:"Center"},{value:"right",label:"Right"},{value:"space-between",label:"Space Between"},{value:"space-around",label:"Space Around"},{value:"justify",label:"Justify"}])],onChange:t=>o(t.detail.value)},{title:"Vertical Alignment",description:"Choose how items are aligned vertically within the container.",hass:e,data:{vertical_alignment:n.vertical_alignment||"top"},schema:[this.selectField("vertical_alignment",[{value:"top",label:"Top"},{value:"center",label:"Center"},{value:"bottom",label:"Bottom"},{value:"stretch",label:"Stretch"},{value:"baseline",label:"Baseline"}])],onChange:t=>o(t.detail.value)},{title:"Allow Wrapping",description:"Allow items to wrap to the next line when they exceed the container width.",hass:e,data:{wrap:n.wrap||!1},schema:[this.booleanField("wrap")],onChange:t=>o(t.detail.value)}])}

        <!-- Gap Between Items Field with Custom Slider -->
        <div
          class="settings-section"
          style="background: var(--secondary-background-color); border-radius: 8px; padding: 16px; margin-bottom: 32px;"
        >
          <div
            class="section-title"
            style="font-size: 18px; font-weight: 700; text-transform: uppercase; color: var(--primary-color); margin-bottom: 16px; letter-spacing: 0.5px;"
          >
            Gap Configuration
          </div>

          <div style="margin-bottom: 24px;">
            <div
              class="field-title"
              style="font-size: 16px; font-weight: 600; color: var(--primary-text-color); margin-bottom: 4px;"
            >
              Gap Between Items
            </div>
            <div
              class="field-description"
              style="font-size: 13px; color: var(--secondary-text-color); margin-bottom: 12px; opacity: 0.8; line-height: 1.4;"
            >
              Set the spacing between horizontal items (in rem units). Use negative values to
              overlap items.
            </div>
            <div
              class="gap-control-container"
              style="display: flex; align-items: center; gap: 12px;"
            >
              <input
                type="range"
                class="gap-slider"
                min="-5"
                max="10"
                step="0.1"
                .value="${n.gap||.7}"
                @input=${t=>{const e=t.target,i=parseFloat(e.value);o({gap:i})}}
              />
              <input
                type="number"
                class="gap-input"
                style="width: 50px !important; max-width: 50px !important; min-width: 50px !important; padding: 4px 6px !important; font-size: 13px !important;"
                min="-5"
                max="10"
                step="0.1"
                .value="${n.gap||.7}"
                @input=${t=>{const e=t.target,i=parseFloat(e.value);isNaN(i)||o({gap:i})}}
                @keydown=${t=>{if("ArrowUp"===t.key||"ArrowDown"===t.key){t.preventDefault();const e=t.target,i=parseFloat(e.value)||.7,n="ArrowUp"===t.key?.1:-.1,a=Math.max(-5,Math.min(10,i+n)),r=Math.round(10*a)/10;o({gap:r})}}}
              />
              <button
                class="reset-btn"
                @click=${()=>o({gap:.7})}
                title="Reset to default (0.7)"
              >
                <ha-icon icon="mdi:refresh"></ha-icon>
              </button>
            </div>
          </div>
        </div>
      </div>
    `}renderPreview(t,e){const i=t,o=i,n=i.modules&&i.modules.length>0,a=i.gap||.7,r={padding:this.getPaddingCSS(o),margin:this.getMarginCSS(o),background:this.getBackgroundCSS(o),backgroundImage:this.getBackgroundImageCSS(o,e),border:o.border_width?this.getBorderCSS(o):"none",borderRadius:this.addPixelUnit(o.border_radius)||"0",display:"flex",flexDirection:"row",justifyContent:this.getJustifyContent(i.alignment),gap:a>=0?`${a}rem`:"0",flexWrap:i.wrap?"wrap":"nowrap",alignItems:this.getAlignItems(i.vertical_alignment||"top"),width:"100%",minHeight:"60px",overflowX:i.wrap?"visible":"auto",overflowY:"visible",boxSizing:"border-box"};let s=null,l=null,d=!1,c=0,p=0;return q`
      <div class="horizontal-module-preview">
        <div
          class="horizontal-preview-content"
          style="${this.styleObjectToCss(r)}; cursor: ${i.tap_action&&"nothing"!==i.tap_action.action||i.hold_action&&"nothing"!==i.hold_action.action||i.double_tap_action&&"nothing"!==i.double_tap_action.action?"pointer":"default"};"
          data-wrap=${i.wrap?"true":"false"}
          @pointerdown=${t=>{t.preventDefault(),t.stopPropagation(),d=!1,l=setTimeout((()=>{d=!0,i.hold_action&&"nothing"!==i.hold_action.action&&wt.handleAction(i.hold_action,e,t.target)}),500)}}
          @pointerup=${t=>{if(t.preventDefault(),t.stopPropagation(),l&&(clearTimeout(l),l=null),d)return void(d=!1);const o=Date.now();o-p<300&&1===c?(s&&(clearTimeout(s),s=null),c=0,i.double_tap_action&&"nothing"!==i.double_tap_action.action&&wt.handleAction(i.double_tap_action,e,t.target)):(c=1,p=o,s=setTimeout((()=>{c=0,i.tap_action&&"nothing"!==i.tap_action.action&&wt.handleAction(i.tap_action,e,t.target)}),300))}}
        >
          ${n?i.modules.map(((t,n)=>{const r=a<0&&n>0?`0 0 0 ${a}rem`:"0",s=a<0;return q`
                  <div
                    class="child-module-preview ${s?"negative-gap":""}"
                    style="
                          max-width: ${i.wrap?"100%":"none"}; 
                          overflow: hidden; 
                          flex-shrink: 0; 
                          flex-grow: ${"justify"===i.alignment?"1":"0"};
                          min-width: ${i.wrap?"auto":"max-content"};
                          box-sizing: border-box;
                          margin: ${r};
                          ${s?"padding: 0; border: none; background: transparent;":""}
                        "
                  >
                    ${this._renderChildModulePreview(t,e,o)}
                  </div>
                `})):q`
                <div class="empty-layout-message">
                  <span>No modules added yet</span>
                  <small>Add modules in the layout builder to see them here</small>
                </div>
              `}
        </div>
      </div>
    `}_renderChildModulePreview(t,e,i){let o=t;i&&(o=this.applyLayoutDesignToChild(t,i));const n=i;if(n&&n.alignment){const t=o;t.alignment||(t.alignment=n.alignment)}const a=pe().getModule(o.type);return a?a.renderPreview(o,e):q`
      <div class="unknown-child-module">
        <ha-icon icon="mdi:help-circle"></ha-icon>
        <span>Unknown Module: ${o.type}</span>
      </div>
    `}applyLayoutDesignToChild(t,e){const i=Object.assign({},t);return e.color&&(i.color=e.color),e.font_size&&(i.font_size=e.font_size),e.font_family&&(i.font_family=e.font_family),e.font_weight&&(i.font_weight=e.font_weight),e.text_align&&(i.text_align=e.text_align),e.line_height&&(i.line_height=e.line_height),e.letter_spacing&&(i.letter_spacing=e.letter_spacing),e.text_transform&&(i.text_transform=e.text_transform),e.font_style&&(i.font_style=e.font_style),e.background_color&&(i.background_color=e.background_color),e.background_image&&(i.background_image=e.background_image),e.backdrop_filter&&(i.backdrop_filter=e.backdrop_filter),e.width&&(i.width=e.width),e.height&&(i.height=e.height),e.max_width&&(i.max_width=e.max_width),e.max_height&&(i.max_height=e.max_height),e.min_width&&(i.min_width=e.min_width),e.min_height&&(i.min_height=e.min_height),e.margin_top&&(i.margin_top=e.margin_top),e.margin_bottom&&(i.margin_bottom=e.margin_bottom),e.margin_left&&(i.margin_left=e.margin_left),e.margin_right&&(i.margin_right=e.margin_right),e.padding_top&&(i.padding_top=e.padding_top),e.padding_bottom&&(i.padding_bottom=e.padding_bottom),e.padding_left&&(i.padding_left=e.padding_left),e.padding_right&&(i.padding_right=e.padding_right),e.border_radius&&(i.border_radius=e.border_radius),e.border_style&&(i.border_style=e.border_style),e.border_width&&(i.border_width=e.border_width),e.border_color&&(i.border_color=e.border_color),e.text_shadow_h&&(i.text_shadow_h=e.text_shadow_h),e.text_shadow_v&&(i.text_shadow_v=e.text_shadow_v),e.text_shadow_blur&&(i.text_shadow_blur=e.text_shadow_blur),e.text_shadow_color&&(i.text_shadow_color=e.text_shadow_color),e.box_shadow_h&&(i.box_shadow_h=e.box_shadow_h),e.box_shadow_v&&(i.box_shadow_v=e.box_shadow_v),e.box_shadow_blur&&(i.box_shadow_blur=e.box_shadow_blur),e.box_shadow_spread&&(i.box_shadow_spread=e.box_shadow_spread),e.box_shadow_color&&(i.box_shadow_color=e.box_shadow_color),e.position&&(i.position=e.position),e.top&&(i.top=e.top),e.bottom&&(i.bottom=e.bottom),e.left&&(i.left=e.left),e.right&&(i.right=e.right),e.z_index&&(i.z_index=e.z_index),e.overflow&&(i.overflow=e.overflow),e.clip_path&&(i.clip_path=e.clip_path),e.animation_type&&(i.animation_type=e.animation_type),e.animation_entity&&(i.animation_entity=e.animation_entity),e.animation_trigger_type&&(i.animation_trigger_type=e.animation_trigger_type),e.animation_attribute&&(i.animation_attribute=e.animation_attribute),e.animation_state&&(i.animation_state=e.animation_state),e.intro_animation&&(i.intro_animation=e.intro_animation),e.outro_animation&&(i.outro_animation=e.outro_animation),e.animation_duration&&(i.animation_duration=e.animation_duration),e.animation_delay&&(i.animation_delay=e.animation_delay),e.animation_timing&&(i.animation_timing=e.animation_timing),e.alignment&&(i.alignment=e.alignment),i}validate(t){const e=t,i=[...super.validate(t).errors];if(e.gap&&(e.gap<-5||e.gap>10)&&i.push("Gap must be between -5 and 10 rem"),e.vertical_alignment&&!["top","center","bottom","stretch","baseline"].includes(e.vertical_alignment)&&i.push("Vertical alignment must be one of: top, center, bottom, stretch, baseline"),e.modules&&e.modules.length>0)for(const t of e.modules)"vertical"===t.type&&i.push("Vertical layout modules cannot be placed inside horizontal layout modules"),"horizontal"===t.type&&i.push("Horizontal layout modules cannot be nested inside other horizontal layout modules");return{valid:0===i.length,errors:i}}styleObjectToCss(t){return Object.entries(t).map((([t,e])=>`${this.camelToKebab(t)}: ${e}`)).join("; ")}camelToKebab(t){return t.replace(/([a-z0-9]|(?=[A-Z]))([A-Z])/g,"$1-$2").toLowerCase()}addPixelUnit(t){return t?/^\d+$/.test(t)?`${t}px`:/^[\d\s]+$/.test(t)?t.split(" ").map((t=>t.trim()?`${t}px`:t)).join(" "):t:t}getPaddingCSS(t){return t.padding_top||t.padding_bottom||t.padding_left||t.padding_right?`${this.addPixelUnit(t.padding_top)||"8px"} ${this.addPixelUnit(t.padding_right)||"8px"} ${this.addPixelUnit(t.padding_bottom)||"8px"} ${this.addPixelUnit(t.padding_left)||"8px"}`:"8px"}getMarginCSS(t){return t.margin_top||t.margin_bottom||t.margin_left||t.margin_right?`${this.addPixelUnit(t.margin_top)||"0"} ${this.addPixelUnit(t.margin_right)||"0"} ${this.addPixelUnit(t.margin_bottom)||"0"} ${this.addPixelUnit(t.margin_left)||"0"}`:"0"}getBackgroundCSS(t){return t.background_color||"transparent"}getBackgroundImageCSS(t,e){return t.background_image?`url(${t.background_image})`:"none"}getBorderCSS(t){return`${this.addPixelUnit(t.border_width)||"0"} ${t.border_style||"solid"} ${t.border_color||"transparent"}`}getJustifyContent(t){switch(t){case"left":default:return"flex-start";case"center":return"center";case"right":return"flex-end";case"space-between":case"justify":return"space-between";case"space-around":return"space-around"}}getAlignItems(t){switch(t){case"top":default:return"flex-start";case"center":return"center";case"bottom":return"flex-end";case"stretch":return"stretch";case"baseline":return"baseline"}}getStyles(){return'\n      /* Horizontal Module Styles */\n      .horizontal-module-preview {\n        width: 100%;\n        min-height: 60px;\n      }\n\n      .horizontal-preview-content {\n        background: transparent;\n        border-radius: 6px;\n        border: none;\n        transition: all 0.2s ease;\n      }\n\n      .child-module-preview {\n        background: transparent;\n        border: none;\n        border-radius: 4px;\n        padding: 2px;\n        transition: all 0.2s ease;\n        /* Ensure modules maintain readable size */\n        min-width: max-content;\n        min-height: 20px;\n        overflow: visible;\n        box-sizing: border-box;\n      }\n\n      .child-module-preview.negative-gap {\n        background: transparent !important;\n        border: none !important;\n        border-radius: 0 !important;\n        padding: 0 !important;\n      }\n\n      .child-module-preview.negative-gap:hover {\n        border: none !important;\n        box-shadow: none !important;\n      }\n\n      .child-module-preview:hover {\n        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);\n        transform: translateY(-1px);\n      }\n\n      .empty-layout-message {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: center;\n        gap: 4px;\n        color: var(--secondary-text-color);\n        font-style: italic;\n        text-align: center;\n        width: 100%;\n        padding: 20px;\n      }\n\n      .empty-layout-message span {\n        font-size: 14px;\n        font-weight: 500;\n      }\n\n      .empty-layout-message small {\n        font-size: 12px;\n        opacity: 0.8;\n      }\n\n      .unknown-child-module {\n        display: flex;\n        align-items: center;\n        gap: 8px;\n        padding: 8px;\n        color: var(--secondary-text-color);\n        font-style: italic;\n      }\n\n      /* Special handling for compressed layouts */\n      .horizontal-preview-content:not([data-wrap="true"]) .child-module-preview {\n        flex-basis: 0;\n        flex-grow: 1;\n        max-width: none;\n      }\n\n      /* Ensure icons and text compress nicely */\n      .horizontal-preview-content:not([data-wrap="true"]) .child-module-preview * {\n        max-width: 100% !important;\n        overflow: hidden !important;\n        text-overflow: ellipsis !important;\n        white-space: nowrap !important;\n      }\n\n      /* Standard field styling */\n      .field-title {\n        font-size: 16px !important;\n        font-weight: 600 !important;\n        \n        margin-bottom: 4px !important;\n      }\n\n      .field-description {\n        font-size: 13px !important;\n        color: var(--secondary-text-color) !important;\n        margin-bottom: 12px !important;\n        opacity: 0.8 !important;\n        line-height: 1.4 !important;\n      }\n\n      .section-title {\n        font-size: 18px !important;\n        font-weight: 700 !important;\n        color: var(--primary-color) !important;\n        text-transform: uppercase !important;\n        letter-spacing: 0.5px !important;\n      }\n\n      /* Custom Range Slider Styling */\n      input[type="range"] {\n        -webkit-appearance: none;\n        appearance: none;\n        height: 6px;\n        border-radius: 3px;\n        background: var(--disabled-color);\n        outline: none;\n        opacity: 0.7;\n        transition: opacity 0.2s;\n      }\n\n      input[type="range"]:hover {\n        opacity: 1;\n      }\n\n      input[type="range"]::-webkit-slider-thumb {\n        -webkit-appearance: none;\n        appearance: none;\n        width: 20px;\n        height: 20px;\n        border-radius: 50%;\n        background: var(--primary-color);\n        cursor: pointer;\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n        transition: all 0.2s ease;\n      }\n\n      input[type="range"]::-webkit-slider-thumb:hover {\n        transform: scale(1.1);\n        box-shadow: 0 3px 6px rgba(0, 0, 0, 0.3);\n      }\n\n      input[type="range"]::-moz-range-thumb {\n        width: 20px;\n        height: 20px;\n        border-radius: 50%;\n        background: var(--primary-color);\n        cursor: pointer;\n        border: none;\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n        transition: all 0.2s ease;\n      }\n\n      input[type="range"]::-moz-range-thumb:hover {\n        transform: scale(1.1);\n        box-shadow: 0 3px 6px rgba(0, 0, 0, 0.3);\n      }\n\n      input[type="range"]::-moz-range-track {\n        height: 6px;\n        border-radius: 3px;\n        background: var(--disabled-color);\n        border: none;\n      }\n\n      /* Gap control styles */\n      .gap-control-container {\n        display: flex;\n        align-items: center;\n        gap: 12px;\n      }\n\n      .gap-slider {\n        flex: 1;\n        height: 6px;\n        background: var(--divider-color);\n        border-radius: 3px;\n        outline: none;\n        appearance: none;\n        -webkit-appearance: none;\n        cursor: pointer;\n        transition: all 0.2s ease;\n      }\n\n      .gap-slider::-webkit-slider-thumb {\n        appearance: none;\n        -webkit-appearance: none;\n        width: 20px;\n        height: 20px;\n        background: var(--primary-color);\n        border-radius: 50%;\n        cursor: pointer;\n        transition: all 0.2s ease;\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n      }\n\n      .gap-slider::-moz-range-thumb {\n        width: 20px;\n        height: 20px;\n        background: var(--primary-color);\n        border-radius: 50%;\n        cursor: pointer;\n        border: none;\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n      }\n\n      .gap-slider:hover {\n        background: var(--primary-color);\n        opacity: 0.7;\n      }\n\n      .gap-slider:hover::-webkit-slider-thumb {\n        transform: scale(1.1);\n      }\n\n      .gap-slider:hover::-moz-range-thumb {\n        transform: scale(1.1);\n      }\n\n      .gap-input {\n        width: 48px !important;\n        max-width: 48px !important;\n        min-width: 48px !important;\n        padding: 4px 6px !important;\n        border: 1px solid var(--divider-color);\n        border-radius: 4px;\n        background: var(--secondary-background-color);\n        color: var(--primary-text-color);\n        font-size: 13px;\n        text-align: center;\n        transition: all 0.2s ease;\n        flex-shrink: 0;\n        box-sizing: border-box;\n      }\n\n      .gap-input:focus {\n        outline: none;\n        border-color: var(--primary-color);\n        box-shadow: 0 0 0 2px rgba(var(--rgb-primary-color), 0.2);\n      }\n\n      .reset-btn {\n        width: 36px;\n        height: 36px;\n        padding: 0;\n        border: 1px solid var(--divider-color);\n        border-radius: 4px;\n        background: var(--secondary-background-color);\n        color: var(--primary-text-color);\n        cursor: pointer;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        transition: all 0.2s ease;\n        flex-shrink: 0;\n      }\n\n      .reset-btn:hover {\n        background: var(--primary-color);\n        color: var(--text-primary-color);\n        border-color: var(--primary-color);\n      }\n\n      .reset-btn ha-icon {\n        font-size: 16px;\n      }\n    '}}class ne extends xt{constructor(){super(...arguments),this.metadata={type:"vertical",title:"Vertical Layout",description:"Arrange modules in columns with flexible alignment and spacing",author:"WJD Designs",version:"1.0.0",icon:"mdi:view-agenda",category:"layout",tags:["layout","vertical","alignment","container","flexbox"]}}createDefault(t,e){return{id:t||this.generateId("vertical"),type:"vertical",alignment:"top",gap:1.2,modules:[],tap_action:{action:"nothing"},hold_action:{action:"nothing"},double_tap_action:{action:"nothing"}}}renderGeneralTab(t,e,i,o){const n=t;return q`
      ${this.injectUcFormStyles()}

      <div class="module-general-settings">
        <!-- Layout Configuration Section -->
        ${this.renderSettingsSection("Layout Configuration","Configure how items are arranged vertically within the container.",[{title:"Vertical Alignment",description:"Choose how items are aligned vertically within the container.",hass:e,data:{alignment:n.alignment||"top"},schema:[this.selectField("alignment",[{value:"top",label:"Top"},{value:"center",label:"Center"},{value:"bottom",label:"Bottom"},{value:"space-between",label:"Space Between"},{value:"space-around",label:"Space Around"}])],onChange:t=>o(t.detail.value)}])}

        <!-- Gap Between Items Field with Custom Slider -->
        <div
          class="settings-section"
          style="background: var(--secondary-background-color); border-radius: 8px; padding: 16px; margin-bottom: 32px;"
        >
          <div
            class="section-title"
            style="font-size: 18px; font-weight: 700; text-transform: uppercase; color: var(--primary-color); margin-bottom: 16px; letter-spacing: 0.5px;"
          >
            Gap Configuration
          </div>

          <div style="margin-bottom: 8px;">
            <div
              class="field-title"
              style="font-size: 16px; font-weight: 600; color: var(--primary-text-color); margin-bottom: 4px;"
            >
              Gap Between Items
            </div>
            <div
              class="field-description"
              style="font-size: 13px; color: var(--secondary-text-color); margin-bottom: 12px; opacity: 0.8; line-height: 1.4;"
            >
              Set the spacing between vertical items (in rem units). Use negative values to overlap
              items.
            </div>
            <div
              class="gap-control-container"
              style="display: flex; align-items: center; gap: 12px;"
            >
              <input
                type="range"
                class="gap-slider"
                min="-5"
                max="10"
                step="0.1"
                .value="${n.gap||1.2}"
                @input=${t=>{const e=t.target,i=parseFloat(e.value);o({gap:i})}}
              />
              <input
                type="number"
                class="gap-input"
                style="width: 50px !important; max-width: 50px !important; min-width: 50px !important; padding: 4px 6px !important; font-size: 13px !important;"
                min="-5"
                max="10"
                step="0.1"
                .value="${n.gap||1.2}"
                @input=${t=>{const e=t.target,i=parseFloat(e.value);isNaN(i)||o({gap:i})}}
                @keydown=${t=>{if("ArrowUp"===t.key||"ArrowDown"===t.key){t.preventDefault();const e=t.target,i=parseFloat(e.value)||1.2,n="ArrowUp"===t.key?.1:-.1,a=Math.max(-5,Math.min(10,i+n)),r=Math.round(10*a)/10;o({gap:r})}}}
              />
              <button
                class="reset-btn"
                @click=${()=>o({gap:1.2})}
                title="Reset to default (1.2)"
              >
                <ha-icon icon="mdi:refresh"></ha-icon>
              </button>
            </div>
          </div>
        </div>
      </div>
    `}renderPreview(t,e){const i=t,o=i,n=i.modules&&i.modules.length>0,a=i.gap||1.2,r={padding:this.getPaddingCSS(o),margin:this.getMarginCSS(o),background:this.getBackgroundCSS(o),backgroundImage:this.getBackgroundImageCSS(o,e),border:o.border_width?this.getBorderCSS(o):"none",borderRadius:this.addPixelUnit(o.border_radius)||"0",display:"flex",flexDirection:"column",justifyContent:this.getJustifyContent(i.alignment),gap:a>=0?`${a}rem`:"0",alignItems:"flex-start",width:"100%",minHeight:"60px"};let s=null,l=null,d=!1,c=0,p=0;return q`
      <div class="vertical-module-preview">
        <div
          class="vertical-preview-content"
          style="${this.styleObjectToCss(r)}; cursor: ${i.tap_action&&"nothing"!==i.tap_action.action||i.hold_action&&"nothing"!==i.hold_action.action||i.double_tap_action&&"nothing"!==i.double_tap_action.action?"pointer":"default"};"
          @pointerdown=${t=>{t.preventDefault(),t.stopPropagation(),d=!1,l=setTimeout((()=>{d=!0,i.hold_action&&"nothing"!==i.hold_action.action&&wt.handleAction(i.hold_action,e,t.target)}),500)}}
          @pointerup=${t=>{if(t.preventDefault(),t.stopPropagation(),l&&(clearTimeout(l),l=null),d)return void(d=!1);const o=Date.now();o-p<300&&1===c?(s&&(clearTimeout(s),s=null),c=0,i.double_tap_action&&"nothing"!==i.double_tap_action.action&&wt.handleAction(i.double_tap_action,e,t.target)):(c=1,p=o,s=setTimeout((()=>{c=0,i.tap_action&&"nothing"!==i.tap_action.action&&wt.handleAction(i.tap_action,e,t.target)}),300))}}
        >
          ${n?i.modules.map(((t,i)=>{const n=a<0;return q`
                  <div
                    class="child-module-preview ${n?"negative-gap":""}"
                    style="max-width: 100%; overflow: hidden; width: 100%; box-sizing: border-box; margin: ${a<0&&i>0?`${a}rem 0 0 0`:"0"}; ${n?"padding: 0; border: none; background: transparent;":""}"
                  >
                    ${this._renderChildModulePreview(t,e,o)}
                  </div>
                `})):q`
                <div class="empty-layout-message">
                  <span>No modules added yet</span>
                  <small>Add modules in the layout builder to see them here</small>
                </div>
              `}
        </div>
      </div>
    `}_renderChildModulePreview(t,e,i){let o=t;i&&(o=this.applyLayoutDesignToChild(t,i));const n=i;if(n&&n.alignment){const t=o;t.alignment||(t.alignment=n.alignment)}const a=pe().getModule(o.type);return a?a.renderPreview(o,e):q`
      <div class="unknown-child-module">
        <ha-icon icon="mdi:help-circle"></ha-icon>
        <span>Unknown Module: ${o.type}</span>
      </div>
    `}applyLayoutDesignToChild(t,e){const i=Object.assign({},t);return e.color&&(i.color=e.color),e.font_size&&(i.font_size=e.font_size),e.font_family&&(i.font_family=e.font_family),e.font_weight&&(i.font_weight=e.font_weight),e.text_align&&(i.text_align=e.text_align),e.line_height&&(i.line_height=e.line_height),e.letter_spacing&&(i.letter_spacing=e.letter_spacing),e.text_transform&&(i.text_transform=e.text_transform),e.font_style&&(i.font_style=e.font_style),e.background_color&&(i.background_color=e.background_color),e.background_image&&(i.background_image=e.background_image),e.backdrop_filter&&(i.backdrop_filter=e.backdrop_filter),e.width&&(i.width=e.width),e.height&&(i.height=e.height),e.max_width&&(i.max_width=e.max_width),e.max_height&&(i.max_height=e.max_height),e.min_width&&(i.min_width=e.min_width),e.min_height&&(i.min_height=e.min_height),e.margin_top&&(i.margin_top=e.margin_top),e.margin_bottom&&(i.margin_bottom=e.margin_bottom),e.margin_left&&(i.margin_left=e.margin_left),e.margin_right&&(i.margin_right=e.margin_right),e.padding_top&&(i.padding_top=e.padding_top),e.padding_bottom&&(i.padding_bottom=e.padding_bottom),e.padding_left&&(i.padding_left=e.padding_left),e.padding_right&&(i.padding_right=e.padding_right),e.border_radius&&(i.border_radius=e.border_radius),e.border_style&&(i.border_style=e.border_style),e.border_width&&(i.border_width=e.border_width),e.border_color&&(i.border_color=e.border_color),e.text_shadow_h&&(i.text_shadow_h=e.text_shadow_h),e.text_shadow_v&&(i.text_shadow_v=e.text_shadow_v),e.text_shadow_blur&&(i.text_shadow_blur=e.text_shadow_blur),e.text_shadow_color&&(i.text_shadow_color=e.text_shadow_color),e.box_shadow_h&&(i.box_shadow_h=e.box_shadow_h),e.box_shadow_v&&(i.box_shadow_v=e.box_shadow_v),e.box_shadow_blur&&(i.box_shadow_blur=e.box_shadow_blur),e.box_shadow_spread&&(i.box_shadow_spread=e.box_shadow_spread),e.box_shadow_color&&(i.box_shadow_color=e.box_shadow_color),e.position&&(i.position=e.position),e.top&&(i.top=e.top),e.bottom&&(i.bottom=e.bottom),e.left&&(i.left=e.left),e.right&&(i.right=e.right),e.z_index&&(i.z_index=e.z_index),e.overflow&&(i.overflow=e.overflow),e.clip_path&&(i.clip_path=e.clip_path),e.animation_type&&(i.animation_type=e.animation_type),e.animation_entity&&(i.animation_entity=e.animation_entity),e.animation_trigger_type&&(i.animation_trigger_type=e.animation_trigger_type),e.animation_attribute&&(i.animation_attribute=e.animation_attribute),e.animation_state&&(i.animation_state=e.animation_state),e.intro_animation&&(i.intro_animation=e.intro_animation),e.outro_animation&&(i.outro_animation=e.outro_animation),e.animation_duration&&(i.animation_duration=e.animation_duration),e.animation_delay&&(i.animation_delay=e.animation_delay),e.animation_timing&&(i.animation_timing=e.animation_timing),e.alignment&&(i.alignment=e.alignment),i}validate(t){const e=t,i=[...super.validate(t).errors];if(e.gap&&(e.gap<-5||e.gap>10)&&i.push("Gap must be between -5 and 10 rem"),e.modules&&e.modules.length>0)for(const t of e.modules)"horizontal"===t.type&&i.push("Horizontal layout modules cannot be placed inside vertical layout modules"),"vertical"===t.type&&i.push("Vertical layout modules cannot be nested inside other vertical layout modules");return{valid:0===i.length,errors:i}}styleObjectToCss(t){return Object.entries(t).map((([t,e])=>`${this.camelToKebab(t)}: ${e}`)).join("; ")}camelToKebab(t){return t.replace(/([a-z0-9]|(?=[A-Z]))([A-Z])/g,"$1-$2").toLowerCase()}addPixelUnit(t){return t?/^\d+$/.test(t)?`${t}px`:/^[\d\s]+$/.test(t)?t.split(" ").map((t=>t.trim()?`${t}px`:t)).join(" "):t:t}getPaddingCSS(t){return t.padding_top||t.padding_bottom||t.padding_left||t.padding_right?`${this.addPixelUnit(t.padding_top)||"8px"} ${this.addPixelUnit(t.padding_right)||"8px"} ${this.addPixelUnit(t.padding_bottom)||"8px"} ${this.addPixelUnit(t.padding_left)||"8px"}`:"8px"}getMarginCSS(t){return t.margin_top||t.margin_bottom||t.margin_left||t.margin_right?`${this.addPixelUnit(t.margin_top)||"0"} ${this.addPixelUnit(t.margin_right)||"0"} ${this.addPixelUnit(t.margin_bottom)||"0"} ${this.addPixelUnit(t.margin_left)||"0"}`:"0"}getBackgroundCSS(t){return t.background_color||"transparent"}getBackgroundImageCSS(t,e){return t.background_image?`url(${t.background_image})`:"none"}getBorderCSS(t){return`${this.addPixelUnit(t.border_width)||"0"} ${t.border_style||"solid"} ${t.border_color||"transparent"}`}getJustifyContent(t){switch(t){case"top":default:return"flex-start";case"center":return"center";case"bottom":return"flex-end";case"space-between":return"space-between";case"space-around":return"space-around"}}getStyles(){return'\n      /* Vertical Module Styles */\n      .vertical-module-preview {\n        width: 100%;\n        min-height: 60px;\n      }\n\n      .vertical-preview-content {\n        background: transparent;\n        border-radius: 6px;\n        border: none;\n        transition: all 0.2s ease;\n      }\n\n      .child-module-preview {\n        background: transparent;\n        border: none;\n        border-radius: 4px;\n        padding: 2px;\n        transition: all 0.2s ease;\n        width: 100%;\n      }\n\n      .child-module-preview.negative-gap {\n        background: transparent !important;\n        border: none !important;\n        border-radius: 0 !important;\n        padding: 0 !important;\n      }\n\n      .child-module-preview.negative-gap:hover {\n        border: none !important;\n        box-shadow: none !important;\n      }\n\n      .child-module-preview:hover {\n        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);\n        transform: translateY(-1px);\n      }\n\n      .empty-layout-message {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: center;\n        gap: 4px;\n        color: var(--secondary-text-color);\n        font-style: italic;\n        text-align: center;\n        width: 100%;\n        padding: 20px;\n      }\n\n      .empty-layout-message span {\n        font-size: 14px;\n        font-weight: 500;\n      }\n\n      .empty-layout-message small {\n        font-size: 12px;\n        opacity: 0.8;\n      }\n\n      .unknown-child-module {\n        display: flex;\n        align-items: center;\n        gap: 8px;\n        padding: 8px;\n        color: var(--secondary-text-color);\n        font-style: italic;\n      }\n\n      /* Standard field styling */\n      .field-title {\n        font-size: 16px !important;\n        font-weight: 600 !important;\n      \n        margin-bottom: 4px !important;\n      }\n\n      .field-description {\n        font-size: 13px !important;\n        color: var(--secondary-text-color) !important;\n        margin-bottom: 12px !important;\n        opacity: 0.8 !important;\n        line-height: 1.4 !important;\n      }\n\n      .section-title {\n        font-size: 18px !important;\n        font-weight: 700 !important;\n        color: var(--primary-color) !important;\n        text-transform: uppercase !important;\n        letter-spacing: 0.5px !important;\n      }\n\n      /* Custom Range Slider Styling */\n      input[type="range"] {\n        -webkit-appearance: none;\n        appearance: none;\n        height: 6px;\n        border-radius: 3px;\n        background: var(--disabled-color);\n        outline: none;\n        opacity: 0.7;\n        transition: opacity 0.2s;\n      }\n\n      input[type="range"]:hover {\n        opacity: 1;\n      }\n\n      input[type="range"]::-webkit-slider-thumb {\n        -webkit-appearance: none;\n        appearance: none;\n        width: 20px;\n        height: 20px;\n        border-radius: 50%;\n        background: var(--primary-color);\n        cursor: pointer;\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n        transition: all 0.2s ease;\n      }\n\n      input[type="range"]::-webkit-slider-thumb:hover {\n        transform: scale(1.1);\n        box-shadow: 0 3px 6px rgba(0, 0, 0, 0.3);\n      }\n\n      input[type="range"]::-moz-range-thumb {\n        width: 20px;\n        height: 20px;\n        border-radius: 50%;\n        background: var(--primary-color);\n        cursor: pointer;\n        border: none;\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n        transition: all 0.2s ease;\n      }\n\n      input[type="range"]::-moz-range-thumb:hover {\n        transform: scale(1.1);\n        box-shadow: 0 3px 6px rgba(0, 0, 0, 0.3);\n      }\n\n      input[type="range"]::-moz-range-track {\n        height: 6px;\n        border-radius: 3px;\n        background: var(--disabled-color);\n        border: none;\n      }\n\n      /* Gap control styles */\n      .gap-control-container {\n        display: flex;\n        align-items: center;\n        gap: 12px;\n      }\n\n      .gap-slider {\n        flex: 1;\n        height: 6px;\n        background: var(--divider-color);\n        border-radius: 3px;\n        outline: none;\n        appearance: none;\n        -webkit-appearance: none;\n        cursor: pointer;\n        transition: all 0.2s ease;\n      }\n\n      .gap-slider::-webkit-slider-thumb {\n        appearance: none;\n        -webkit-appearance: none;\n        width: 20px;\n        height: 20px;\n        background: var(--primary-color);\n        border-radius: 50%;\n        cursor: pointer;\n        transition: all 0.2s ease;\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n      }\n\n      .gap-slider::-moz-range-thumb {\n        width: 20px;\n        height: 20px;\n        background: var(--primary-color);\n        border-radius: 50%;\n        cursor: pointer;\n        border: none;\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n      }\n\n      .gap-slider:hover {\n        background: var(--primary-color);\n        opacity: 0.7;\n      }\n\n      .gap-slider:hover::-webkit-slider-thumb {\n        transform: scale(1.1);\n      }\n\n      .gap-slider:hover::-moz-range-thumb {\n        transform: scale(1.1);\n      }\n\n      .gap-input {\n        width: 48px !important;\n        max-width: 48px !important;\n        min-width: 48px !important;\n        padding: 4px 6px !important;\n        border: 1px solid var(--divider-color);\n        border-radius: 4px;\n        background: var(--secondary-background-color);\n        color: var(--primary-text-color);\n        font-size: 13px;\n        text-align: center;\n        transition: all 0.2s ease;\n        flex-shrink: 0;\n        box-sizing: border-box;\n      }\n\n      .gap-input:focus {\n        outline: none;\n        border-color: var(--primary-color);\n        box-shadow: 0 0 0 2px rgba(var(--rgb-primary-color), 0.2);\n      }\n\n      .reset-btn {\n        width: 36px;\n        height: 36px;\n        padding: 0;\n        border: 1px solid var(--divider-color);\n        border-radius: 4px;\n        background: var(--secondary-background-color);\n        color: var(--primary-text-color);\n        cursor: pointer;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        transition: all 0.2s ease;\n        flex-shrink: 0;\n      }\n\n      .reset-btn:hover {\n        background: var(--primary-color);\n        color: var(--text-primary-color);\n        border-color: var(--primary-color);\n      }\n\n      .reset-btn ha-icon {\n        font-size: 16px;\n      }\n    '}}class ae extends xt{constructor(){super(...arguments),this.metadata={type:"camera",title:"Camera Module",description:"Display live camera feeds with comprehensive control options",author:"WJD Designs",version:"1.0.0",icon:"mdi:camera",category:"content",tags:["camera","live","feed","security","surveillance"]},this.clickTimeout=null,this.holdTimeout=null,this.isHolding=!1}createDefault(t,e){return{id:t||this.generateId("camera"),type:"camera",entity:"",camera_name:"",show_name:!0,name_position:"top-left",aspect_ratio_linked:!0,aspect_ratio_value:1.778,image_fit:"cover",crop_left:0,crop_top:0,crop_right:0,crop_bottom:0,show_controls:!1,live_view:!0,auto_refresh:!0,refresh_interval:30,image_quality:"high",show_unavailable:!0,fallback_image:"",tap_action:{action:"nothing"},hold_action:{action:"nothing"},double_tap_action:{action:"nothing"},template_mode:!1,template:"",enable_hover_effect:!0,hover_background_color:"var(--divider-color)",design:{border_radius:"20px"}}}renderGeneralTab(t,e,i,o){const n=t;return q`
      ${this.injectUcFormStyles()}
      <div class="camera-module-settings">
        <!-- Camera Configuration Section -->
        ${this.renderSettingsSection("Camera Configuration","Configure the camera entity and display settings.",[{title:"Camera Entity",description:"Select the camera entity to display. This should be a camera or mjpeg entity from Home Assistant.",hass:e,data:{entity:n.entity||""},schema:[this.entityField("entity",["camera"])],onChange:t=>o(t.detail.value)},{title:"Camera Name",description:"Custom name for the camera. Leave empty to use entity name.",hass:e,data:{camera_name:n.camera_name||""},schema:[this.textField("camera_name")],onChange:t=>o(t.detail.value)},{title:"Show Camera Name",description:"Display the camera name on the feed",hass:e,data:{show_name:!1!==n.show_name},schema:[this.booleanField("show_name")],onChange:t=>o(t.detail.value)}])}

          ${!1!==n.show_name?q`
                  <div style="margin-top: 16px;">
                    ${this.renderConditionalFieldsGroup("Camera Name Position",q`
                        ${this.renderFieldSection("Name Position","Choose where the camera name appears as an overlay on the camera image.",e,{name_position:n.name_position||"top-left"},[this.selectField("name_position",[{value:"top-left",label:"Top Left"},{value:"top-right",label:"Top Right"},{value:"center",label:"Center"},{value:"bottom-left",label:"Bottom Left"},{value:"bottom-right",label:"Bottom Right"}])],(t=>o(t.detail.value)))}
                      `)}
                  </div>
                `:""}
        </div>

        <!-- Display Settings Section -->
        <div
          class="settings-section"
          style="background: var(--secondary-background-color); border-radius: 8px; padding: 16px; margin-top: 32px; margin-bottom: 24px;"
        >
          <div
            class="section-title"
            style="font-size: 18px; font-weight: 700; text-transform: uppercase; color: var(--primary-color); margin-bottom: 16px; letter-spacing: 0.5px;"
          >
            Display Settings
          </div>

          <div style="margin-bottom: 16px;">
            ${this.renderFieldSection("Live View","Enable to show live camera stream (requires stream integration). When disabled, shows still image snapshots.",e,{live_view:!1!==n.live_view},[this.booleanField("live_view")],(t=>o(t.detail.value)))}
          </div>

          ${!1===n.live_view?q`
                  <div style="margin-top: 24px;">
                    ${this.renderConditionalFieldsGroup("Auto Refresh Settings",q`
                        <div style="margin-bottom: 16px;">
                          ${Ct.renderField("Auto Refresh","Automatically refresh the camera image at regular intervals",e,{auto_refresh:!1!==n.auto_refresh},[Ct.createSchemaItem("auto_refresh",{boolean:{}})],(t=>o({auto_refresh:t.detail.value.auto_refresh})))}
                        </div>

                        ${!1!==n.auto_refresh?q`
                              ${Ct.renderField("Refresh Interval (seconds)","How often to refresh the camera image automatically.",e,{refresh_interval:n.refresh_interval||30},[Ct.createSchemaItem("refresh_interval",{number:{min:5,max:300,mode:"box"}})],(t=>o({refresh_interval:t.detail.value.refresh_interval})))}
                            `:""}
                      `)}
                  </div>
                `:""}

          <!-- Dimensions Section -->
          <div style="margin-bottom: 32px;">
            <div
              class="field-title"
              style="font-size: 18px; font-weight: 700; margin-bottom: 16px; color: var(--primary-color);"
            >
              Dimensions
            </div>

            <style>
              .number-range-control {
                display: flex;
                gap: 8px;
                align-items: center;
              }

              .range-slider {
                flex: 0 0 65%;
                height: 6px;
                background: var(--divider-color);
                border-radius: 3px;
                outline: none;
                appearance: none;
                -webkit-appearance: none;
                cursor: pointer;
                transition: all 0.2s ease;
                min-width: 0;
              }

              .range-slider::-webkit-slider-thumb {
                appearance: none;
                -webkit-appearance: none;
                width: 18px;
                height: 18px;
                background: var(--primary-color);
                border-radius: 50%;
                cursor: pointer;
                transition: all 0.2s ease;
                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
              }

              .range-slider::-moz-range-thumb {
                width: 18px;
                height: 18px;
                background: var(--primary-color);
                border-radius: 50%;
                cursor: pointer;
                border: none;
                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
              }

              .range-slider:hover {
                background: var(--primary-color);
                opacity: 0.7;
              }

              .range-slider:hover::-webkit-slider-thumb {
                transform: scale(1.1);
              }

              .range-slider:hover::-moz-range-thumb {
                transform: scale(1.1);
              }

              .range-input {
                flex: 0 0 20%;
                padding: 6px 8px !important;
                border: 1px solid var(--divider-color);
                border-radius: 4px;
                background: var(--secondary-background-color);
                color: var(--primary-text-color);
                font-size: 13px;
                text-align: center;
                transition: all 0.2s ease;
                box-sizing: border-box;
              }

              .range-input:focus {
                outline: none;
                border-color: var(--primary-color);
                box-shadow: 0 0 0 2px rgba(var(--rgb-primary-color), 0.2);
              }

              .range-reset-btn {
                width: 32px;
                height: 32px;
                padding: 0;
                border: 1px solid var(--divider-color);
                border-radius: 4px;
                background: var(--secondary-background-color);
                color: var(--primary-text-color);
                cursor: pointer;
                display: flex;
                align-items: center;
                justify-content: center;
                transition: all 0.2s ease;
                flex-shrink: 0;
              }

              .range-reset-btn:hover {
                background: var(--primary-color);
                color: var(--text-primary-color);
                border-color: var(--primary-color);
              }

              .range-reset-btn ha-icon {
                font-size: 14px;
              }

              .aspect-ratio-link-btn {
                width: 40px;
                height: 40px;
                padding: 0;
                border: 2px solid var(--divider-color);
                border-radius: 50%;
                background: var(--secondary-background-color);
                color: var(--primary-text-color);
                cursor: pointer;
                display: flex;
                align-items: center;
                justify-content: center;
                transition: all 0.3s ease;
                flex-shrink: 0;
                margin: 0 auto;
                position: relative;
              }

              .aspect-ratio-link-btn.linked {
                border-color: var(--primary-color);
                background: var(--primary-color);
                color: white;
                transform: scale(1.05);
              }

              .aspect-ratio-link-btn:hover {
                transform: scale(1.1);
                border-color: var(--primary-color);
              }

              .aspect-ratio-link-btn.linked:hover {
                background: var(--primary-color);
                opacity: 0.9;
              }

              .aspect-ratio-link-btn ha-icon {
                font-size: 20px;
                transition: transform 0.2s ease;
              }

              .dimensions-container {
                display: flex;
                flex-direction: column;
                gap: 16px;
              }

              .dimension-group {
                display: flex;
                flex-direction: column;
                gap: 8px;
              }
            </style>

            <div class="dimensions-container">
              <div class="dimension-group">
                <div class="field-title">Width (px)</div>
                <div class="field-description">
                  Set the width of the camera display. Range: 100-1000px
                </div>
                <div class="number-range-control">
                  <input
                    type="range"
                    class="range-slider"
                    min="100"
                    max="1000"
                    step="1"
                    .value="${n.width||320}"
                    @input=${t=>{const e=t.target,i=parseInt(e.value);this._handleDimensionChange(n,"width",i,o)}}
                  />
                  <input
                    type="number"
                    class="range-input"
                    min="100"
                    max="1000"
                    step="1"
                    .value="${n.width||320}"
                    @input=${t=>{const e=t.target,i=parseInt(e.value);isNaN(i)||this._handleDimensionChange(n,"width",i,o)}}
                    @keydown=${t=>{if("ArrowUp"===t.key||"ArrowDown"===t.key){t.preventDefault();const e=t.target,i=parseInt(e.value)||320,a="ArrowUp"===t.key?1:-1,r=Math.max(100,Math.min(1e3,i+a));this._handleDimensionChange(n,"width",r,o)}}}
                  />
                  <button
                    class="range-reset-btn"
                    @click=${()=>this._handleDimensionChange(n,"width",320,o)}
                    title="Reset to default (320)"
                  >
                    <ha-icon icon="mdi:refresh"></ha-icon>
                  </button>
                </div>
              </div>

              <!-- Link/Unlink Button -->
              <div style="display: flex; justify-content: center; margin: 8px 0;">
                <button
                  class="aspect-ratio-link-btn ${!1!==n.aspect_ratio_linked?"linked":""}"
                  @click=${()=>{const t=!n.aspect_ratio_linked,e={aspect_ratio_linked:t};if(t){const t=n.width||320,i=n.height||180;e.aspect_ratio_value=t/i}o(e)}}
                  title="${!1!==n.aspect_ratio_linked?"Unlink aspect ratio":"Link aspect ratio"}"
                >
                  <ha-icon
                    icon="${!1!==n.aspect_ratio_linked?"mdi:link-variant":"mdi:link-variant-off"}"
                  ></ha-icon>
                </button>
              </div>

              <div class="dimension-group">
                <div class="field-title">Height (px)</div>
                <div class="field-description">
                  Set the height of the camera display. Range: 100-1000px
                </div>
                <div class="number-range-control">
                  <input
                    type="range"
                    class="range-slider"
                    min="100"
                    max="1000"
                    step="1"
                    .value="${n.height||180}"
                    @input=${t=>{const e=t.target,i=parseInt(e.value);this._handleDimensionChange(n,"height",i,o)}}
                  />
                  <input
                    type="number"
                    class="range-input"
                    min="100"
                    max="1000"
                    step="1"
                    .value="${n.height||180}"
                    @input=${t=>{const e=t.target,i=parseInt(e.value);isNaN(i)||this._handleDimensionChange(n,"height",i,o)}}
                    @keydown=${t=>{if("ArrowUp"===t.key||"ArrowDown"===t.key){t.preventDefault();const e=t.target,i=parseInt(e.value)||180,a="ArrowUp"===t.key?1:-1,r=Math.max(100,Math.min(1e3,i+a));this._handleDimensionChange(n,"height",r,o)}}}
                  />
                  <button
                    class="range-reset-btn"
                    @click=${()=>this._handleDimensionChange(n,"height",180,o)}
                    title="Reset to default (180)"
                  >
                    <ha-icon icon="mdi:refresh"></ha-icon>
                  </button>
                </div>
              </div>
            </div>

            ${!1!==n.aspect_ratio_linked?q`
                    <div
                      style="margin-top: 12px; padding: 12px; background: rgba(var(--rgb-primary-color), 0.1); border-radius: 8px; border-left: 4px solid var(--primary-color);"
                    >
                      <div
                        style="font-size: 13px; color: var(--primary-color); font-weight: 500; margin-bottom: 4px;"
                      >
                        <ha-icon
                          icon="mdi:link-variant"
                          style="font-size: 14px; margin-right: 6px;"
                        ></ha-icon>
                        Aspect Ratio Linked
                      </div>
                      <div
                        style="font-size: 12px; color: var(--secondary-text-color); line-height: 1.4;"
                      >
                        Dimensions maintain
                        ${(1*(n.aspect_ratio_value||1.778)).toFixed(2)}:1 ratio.
                        Adjusting one dimension automatically updates the other to maintain
                        proportions.
                      </div>
                    </div>
                  `:q`
                    <div
                      style="margin-top: 12px; padding: 12px; background: rgba(var(--rgb-secondary-text-color), 0.1); border-radius: 8px; border-left: 4px solid var(--secondary-text-color);"
                    >
                      <div
                        style="font-size: 13px; color: var(--secondary-text-color); font-weight: 500; margin-bottom: 4px;"
                      >
                        <ha-icon
                          icon="mdi:link-variant-off"
                          style="font-size: 14px; margin-right: 6px;"
                        ></ha-icon>
                        Independent Dimensions
                      </div>
                      <div
                        style="font-size: 12px; color: var(--secondary-text-color); line-height: 1.4;"
                      >
                        Width and height can be adjusted independently. Click the link button above
                        to maintain aspect ratio.
                      </div>
                    </div>
                  `}
          </div>


        </div>

        <!-- Crop & Position Section -->
        <div
          class="settings-section"
          style="background: var(--secondary-background-color); border-radius: 8px; padding: 16px; margin-bottom: 24px;"
        >
          <div
            class="section-title"
            style="font-size: 18px; font-weight: 700; text-transform: uppercase; color: var(--primary-color); margin-bottom: 16px; letter-spacing: 0.5px;"
          >
            Crop & Position
          </div>
          <div
            class="field-description"
            style="margin-bottom: 20px; color: var(--secondary-text-color); font-style: italic;"
          >
            Adjust the crop and position of the camera view. Useful for focusing on specific areas
            or removing unwanted edges.
          </div>

          <div style="display: flex; flex-direction: column; gap: 20px;">
            <!-- Left Crop -->
            <div class="field-container">
              <div class="field-title">Left Crop (%)</div>
              <div class="field-description">
                Crop from the left edge. Higher values show less of the left side.
              </div>
              <div class="number-range-control">
                <input
                  type="range"
                  class="range-slider"
                  min="0"
                  max="50"
                  step="1"
                  .value="${n.crop_left||0}"
                  @input=${t=>{const e=t.target,i=parseInt(e.value);o({crop_left:i})}}
                />
                <input
                  type="number"
                  class="range-input"
                  min="0"
                  max="50"
                  step="1"
                  .value="${n.crop_left||0}"
                  @input=${t=>{const e=t.target,i=parseInt(e.value);isNaN(i)||o({crop_left:i})}}
                />
                <button
                  class="range-reset-btn"
                  @click=${()=>o({crop_left:0})}
                  title="Reset to default (0)"
                >
                  <ha-icon icon="mdi:refresh"></ha-icon>
                </button>
              </div>
            </div>

            <!-- Right Crop -->
            <div class="field-container">
              <div class="field-title">Right Crop (%)</div>
              <div class="field-description">
                Crop from the right edge. Higher values show less of the right side.
              </div>
              <div class="number-range-control">
                <input
                  type="range"
                  class="range-slider"
                  min="0"
                  max="50"
                  step="1"
                  .value="${n.crop_right||0}"
                  @input=${t=>{const e=t.target,i=parseInt(e.value);o({crop_right:i})}}
                />
                <input
                  type="number"
                  class="range-input"
                  min="0"
                  max="50"
                  step="1"
                  .value="${n.crop_right||0}"
                  @input=${t=>{const e=t.target,i=parseInt(e.value);isNaN(i)||o({crop_right:i})}}
                />
                <button
                  class="range-reset-btn"
                  @click=${()=>o({crop_right:0})}
                  title="Reset to default (0)"
                >
                  <ha-icon icon="mdi:refresh"></ha-icon>
                </button>
              </div>
            </div>

            <!-- Top Crop -->
            <div class="field-container">
              <div class="field-title">Top Crop (%)</div>
              <div class="field-description">
                Crop from the top edge. Higher values show less of the top area.
              </div>
              <div class="number-range-control">
                <input
                  type="range"
                  class="range-slider"
                  min="0"
                  max="50"
                  step="1"
                  .value="${n.crop_top||0}"
                  @input=${t=>{const e=t.target,i=parseInt(e.value);o({crop_top:i})}}
                />
                <input
                  type="number"
                  class="range-input"
                  min="0"
                  max="50"
                  step="1"
                  .value="${n.crop_top||0}"
                  @input=${t=>{const e=t.target,i=parseInt(e.value);isNaN(i)||o({crop_top:i})}}
                />
                <button
                  class="range-reset-btn"
                  @click=${()=>o({crop_top:0})}
                  title="Reset to default (0)"
                >
                  <ha-icon icon="mdi:refresh"></ha-icon>
                </button>
              </div>
            </div>

            <!-- Bottom Crop -->
            <div class="field-container">
              <div class="field-title">Bottom Crop (%)</div>
              <div class="field-description">
                Crop from the bottom edge. Higher values show less of the bottom area.
              </div>
              <div class="number-range-control">
                <input
                  type="range"
                  class="range-slider"
                  min="0"
                  max="50"
                  step="1"
                  .value="${n.crop_bottom||0}"
                  @input=${t=>{const e=t.target,i=parseInt(e.value);o({crop_bottom:i})}}
                />
                <input
                  type="number"
                  class="range-input"
                  min="0"
                  max="50"
                  step="1"
                  .value="${n.crop_bottom||0}"
                  @input=${t=>{const e=t.target,i=parseInt(e.value);isNaN(i)||o({crop_bottom:i})}}
                />
                <button
                  class="range-reset-btn"
                  @click=${()=>o({crop_bottom:0})}
                  title="Reset to default (0)"
                >
                  <ha-icon icon="mdi:refresh"></ha-icon>
                </button>
              </div>
            </div>
          </div>

          <!-- Crop Status -->
          ${(n.crop_left||0)+(n.crop_top||0)+(n.crop_right||0)+(n.crop_bottom||0)>0?q`
                  <div
                    style="margin-top: 16px; padding: 12px; background: rgba(var(--rgb-primary-color), 0.1); border-radius: 8px; border-left: 4px solid var(--primary-color);"
                  >
                    <div
                      style="font-size: 13px; color: var(--primary-color); font-weight: 500; margin-bottom: 4px;"
                    >
                      <ha-icon
                        icon="mdi:crop"
                        style="font-size: 14px; margin-right: 6px;"
                      ></ha-icon>
                      Active Crops Applied
                    </div>
                    <div
                      style="font-size: 12px; color: var(--secondary-text-color); line-height: 1.4;"
                    >
                      L: ${n.crop_left||0}% | T: ${n.crop_top||0}% | R:
                      ${n.crop_right||0}% | B: ${n.crop_bottom||0}%
                    </div>
                  </div>
                `:""}

          <!-- Reset All Crops Button -->
          <div style="margin-top: 20px; text-align: center;">
            <button
              style="
                padding: 8px 16px;
                border: 1px solid var(--primary-color);
                border-radius: 6px;
                background: transparent;
                color: var(--primary-color);
                cursor: pointer;
                font-size: 13px;
                font-weight: 500;
                transition: all 0.2s ease;
              "
              @click=${()=>o({crop_left:0,crop_top:0,crop_right:0,crop_bottom:0})}
              @mouseover=${t=>{const e=t.target;e.style.background="var(--primary-color)",e.style.color="white"}}
              @mouseout=${t=>{const e=t.target;e.style.background="transparent",e.style.color="var(--primary-color)"}}
            >
              <ha-icon icon="mdi:crop-free" style="margin-right: 6px; font-size: 14px;"></ha-icon>
              Reset All Crops
            </button>
          </div>
        </div>



        <!-- Link configuration intentionally omitted for Camera module per design guidelines -->

        <!-- Template Mode Section -->
        <div
          class="settings-section template-mode-section"
          style="background: var(--secondary-background-color); border-radius: 8px; padding: 16px; margin-top: 24px;"
        >
          <div
            class="section-title"
            style="font-size: 18px !important; font-weight: 700 !important; text-transform: uppercase !important; color: var(--primary-color); margin-bottom: 16px; border-bottom: 2px solid var(--primary-color); padding-bottom: 8px;"
          >
            Template Mode
          </div>
          <div
            class="field-description"
            style="font-size: 13px !important; font-weight: 400 !important; margin-bottom: 16px;"
          >
            Use a template to dynamically set the camera entity. Templates allow you to use Home Assistant
            templating syntax for conditional camera selection.
          </div>

          <div class="field-group" style="margin-bottom: 16px;">
            <ha-form
              .hass=${e}
              .data=${{template_mode:n.template_mode||!1}}
              .schema=${[{name:"template_mode",label:"Template Mode",description:"Use Home Assistant templating syntax to dynamically select camera entity",selector:{boolean:{}}}]}
              .computeLabel=${t=>t.label||t.name}
              .computeDescription=${t=>t.description||""}
              @value-changed=${t=>o({template_mode:t.detail.value.template_mode})}
            ></ha-form>
          </div>

          ${n.template_mode?q`
                  <div class="field-group" style="margin-bottom: 16px;">
                    <ha-form
                      .hass=${e}
                      .data=${{template:n.template||""}}
                      .schema=${[{name:"template",label:"Camera Template",description:"Template to dynamically set the camera entity using Jinja2 syntax",selector:{text:{multiline:!0}}}]}
                      .computeLabel=${t=>t.label||t.name}
                      .computeDescription=${t=>t.description||""}
                      @value-changed=${t=>o({template:t.detail.value.template})}
                    ></ha-form>
                  </div>

                  <div class="template-examples">
                    <div
                      class="field-title"
                      style="font-size: 16px !important; font-weight: 600 !important; margin-bottom: 12px;"
                    >
                      Common Examples:
                    </div>

                    <div class="example-item" style="margin-bottom: 16px;">
                      <div
                        class="example-code"
                        style="background: var(--code-editor-background-color, #1e1e1e); padding: 12px; border-radius: 4px; font-family: 'Courier New', monospace; font-size: 12px; color: #d4d4d4; margin-bottom: 8px;"
                      >
                        'camera.outdoor' if is_state('weather.home', 'sunny') else ''
                      </div>
                      <div
                        class="example-description"
                        style="font-size: 12px; color: var(--secondary-text-color);"
                      >
                        Show camera when weather is sunny
                      </div>
                    </div>

                    <div class="example-item" style="margin-bottom: 16px;">
                      <div
                        class="example-code"
                        style="background: var(--code-editor-background-color, #1e1e1e); padding: 12px; border-radius: 4px; font-family: 'Courier New', monospace; font-size: 12px; color: #d4d4d4; margin-bottom: 8px;"
                      >
                        'camera.front_door' if is_state('input_boolean.show_front', 'on') else
                        'camera.back_yard'
                      </div>
                      <div
                        class="example-description"
                        style="font-size: 12px; color: var(--secondary-text-color);"
                      >
                        Switch between cameras based on input boolean
                      </div>
                    </div>

                    <div class="example-item" style="margin-bottom: 16px;">
                      <div
                        class="example-code"
                        style="background: var(--code-editor-background-color, #1e1e1e); padding: 12px; border-radius: 4px; font-family: 'Courier New', monospace; font-size: 12px; color: #d4d4d4; margin-bottom: 8px;"
                      >
                        states('input_select.active_camera')
                      </div>
                      <div
                        class="example-description"
                        style="font-size: 12px; color: var(--secondary-text-color);"
                      >
                        Use input select to choose camera entity
                      </div>
                    </div>
                  </div>
                `:""}
        </div>
      </div>
    `}renderActionsTab(t,e,i,o){return $t.render(t,e,i,o,(()=>q``))}renderPreview(t,e){const i=t,o=i,n=o.design||{};let a=i.entity;if(i.template_mode&&i.template)try{let t=i.template;const o=t.match(/states\(['"]([^'"]+)['"]\)/g);o&&o.forEach((i=>{const o=i.match(/states\(['"]([^'"]+)['"]\)/)[1],n=null==e?void 0:e.states[o],a=n?n.state:"unknown";t=t.replace(i,`'${a}'`)}));const n=t.match(/is_state\(['"]([^'"]+)['"],\s*['"]([^'"]+)['"]\)/g);n&&n.forEach((i=>{const[,o,n]=i.match(/is_state\(['"]([^'"]+)['"],\s*['"]([^'"]+)['"]\)/),a=null==e?void 0:e.states[o],r=a&&a.state===n;t=t.replace(i,r?"True":"False")}));const r=t.match(/['"]([^'"]+)['"] if (.+?) else ['"]([^'"]+)['"]/);if(r){const[,t,e,i]=r;a=e.includes("True")?t:i}else{const e=t.match(/['"]([^'"]+)['"]/);e&&(a=e[1])}}catch(t){console.error("Template evaluation error:",t),a=i.entity}const r=a?e.states[a]:null,s=!r||"unavailable"===r.state,l=i.camera_name||(r?r.attributes.friendly_name||r.entity_id:"Camera"),d={width:"100%",maxWidth:"100%",boxSizing:"border-box",display:"flex",flexDirection:"column",alignItems:"left"===n.alignment?"flex-start":"right"===n.alignment?"flex-end":"center",justifyContent:"center",color:n.color||this.getTextColor(o),fontFamily:n.font_family||this.getTextFont(o),fontSize:n.font_size?"number"==typeof n.font_size?`${n.font_size}px`:n.font_size:this.getTextSize(o),fontWeight:n.font_weight||this.getTextWeight(o),textTransform:n.text_transform||void 0,letterSpacing:n.letter_spacing||void 0,lineHeight:n.line_height||void 0,textShadow:n.text_shadow||void 0},c=i.crop_left||0,p=i.crop_right||0,u=i.crop_top||0,m=i.crop_bottom||0,g=i.width||320,h=i.height||180,b=g*(100-c-p)/100,v=h*(100-u-m)/100,_={objectFit:"cover",width:`${g}px`,height:`${h}px`,display:"block",position:"absolute",left:-g*c/100+"px",top:-h*u/100+"px",transition:"all 0.3s ease",borderRadius:n.border_radius||"0px"},f={width:n.width||`${Math.max(50,b)}px`,height:n.height||`${Math.max(50,v)}px`,maxWidth:n.max_width||void 0,minWidth:n.min_width||void 0,maxHeight:n.max_height||void 0,minHeight:n.min_height||void 0,position:"relative",overflow:n.overflow||"hidden",borderRadius:n.border_radius||"0px",background:n.background_color||"transparent",backgroundImage:this.getBackgroundImageWithDesign(n,o,e)||void 0,border:this.getBorderWithDesign(n,o)||void 0,padding:"0",margin:this.getMarginWithDesign(n,o),boxShadow:n.box_shadow||void 0,backdropFilter:n.backdrop_filter||void 0,clipPath:n.clip_path||void 0},y=i.name_position||"top-left",x=this.getCameraNamePositionStyles(y,o,n),w=q`
      <div class="camera-module-container" style=${this.styleObjectToCss(d)}>
        <div class="camera-image-container" style=${this.styleObjectToCss(f)}>
          ${a?s?q`
                  <div
                    class="camera-unavailable"
                    style=${this.styleObjectToCss(Object.assign(Object.assign({},_),{display:"flex",alignItems:"center",justifyContent:"center",flexDirection:"column",backgroundColor:"var(--error-color, #f44336)",color:n.color||this.getTextColor(o),position:"static",left:"auto",top:"auto",fontFamily:n.font_family||this.getTextFont(o)}))}
                  >
                    ${i.fallback_image?q`
                          <img
                            src=${i.fallback_image}
                            alt="Fallback"
                            style="max-width: 100%; max-height: 100%; object-fit: cover;"
                          />
                        `:q`
                          <ha-icon
                            icon="mdi:camera-off"
                            style="font-size: 48px; margin-bottom: 8px;"
                          ></ha-icon>
                          <span
                            style="font-weight: ${n.font_weight||this.getTextWeight(o)}; font-size: ${n.font_size?"number"==typeof n.font_size?`${n.font_size}px`:n.font_size:this.getTextSize(o)};"
                            >Camera Unavailable</span
                          >
                          <span
                            style="font-size: ${n.font_size&&"number"==typeof n.font_size?`${Math.max(10,n.font_size-2)}px`:this.getSmallTextSize(o)}; margin-top: 4px; opacity: 0.9;"
                            >Entity: ${a}</span
                          >
                        `}
                  </div>
                  ${!1!==i.show_name?q`
                        <div
                          class="camera-name-overlay"
                          style=${this.styleObjectToCss(x)}
                        >
                          ${l}
                        </div>
                      `:""}
                `:q`
                  <!-- Use HA's native camera image component - same as picture-glance card -->
                  <hui-image
                    .hass=${e}
                    .cameraImage=${a}
                    .cameraView=${i.live_view?"live":"auto"}
                    style=${this.styleObjectToCss(_)}
                    class="camera-image"
                    @error=${()=>{}}
                    @load=${()=>{}}
                  ></hui-image>
                  ${!1!==i.show_name?q`
                        <div
                          class="camera-name-overlay"
                          style=${this.styleObjectToCss(x)}
                        >
                          ${l}
                        </div>
                      `:""}
                `:q`
                <div
                  class="camera-unavailable"
                  style=${this.styleObjectToCss(Object.assign(Object.assign({},_),{display:"flex",alignItems:"center",justifyContent:"center",flexDirection:"column",backgroundColor:"var(--warning-color, #ff9800)",color:n.color||this.getTextColor(o),position:"static",left:"auto",top:"auto",fontFamily:n.font_family||this.getTextFont(o)}))}
                >
                  <ha-icon
                    icon="mdi:camera-plus"
                    style="font-size: 48px; margin-bottom: 8px;"
                  ></ha-icon>
                  <span
                    style="font-weight: ${n.font_weight||this.getTextWeight(o)}; font-size: ${n.font_size?"number"==typeof n.font_size?`${n.font_size}px`:n.font_size:this.getTextSize(o)};"
                    >No Camera Selected</span
                  >
                  <span
                    style="font-size: ${n.font_size&&"number"==typeof n.font_size?`${Math.max(10,n.font_size-2)}px`:this.getSmallTextSize(o)}; margin-top: 4px; opacity: 0.9;"
                    >Choose a camera entity below</span
                  >
                </div>
                ${!1!==i.show_name?q`
                      <div
                        class="camera-name-overlay"
                        style=${this.styleObjectToCss(x)}
                      >
                        ${l}
                      </div>
                    `:""}
              `}
        </div>
      </div>
    `;return this.hasActiveLink(i)?q`<div
          class="camera-module-clickable"
          @click=${t=>this.handleClick(t,i,e)}
          @dblclick=${t=>this.handleDoubleClick(t,i,e)}
          @mousedown=${t=>this.handleMouseDown(t,i,e)}
          @mouseup=${t=>this.handleMouseUp(t,i,e)}
          @mouseleave=${t=>this.handleMouseLeave(t,i,e)}
          @touchstart=${t=>this.handleTouchStart(t,i,e)}
          @touchend=${t=>this.handleTouchEnd(t,i,e)}
        >
          ${w}
        </div>`:w}validate(t){const e=t,i=[...super.validate(t).errors];return e.template_mode||e.entity&&""!==e.entity.trim()||i.push("Camera entity is required when not using template mode"),!e.template_mode||e.template&&""!==e.template.trim()||i.push("Template code is required when template mode is enabled"),!1!==e.auto_refresh&&e.refresh_interval&&(e.refresh_interval<5||e.refresh_interval>300)&&i.push("Refresh interval must be between 5 and 300 seconds"),e.border_radius&&isNaN(Number(e.border_radius))&&i.push("Border radius must be a number"),e.tap_action&&e.tap_action.action&&i.push(...this.validateAction(e.tap_action)),e.hold_action&&e.hold_action.action&&i.push(...this.validateAction(e.hold_action)),e.double_tap_action&&e.double_tap_action.action&&i.push(...this.validateAction(e.double_tap_action)),{valid:0===i.length,errors:i}}handleClick(t,e,i){t.preventDefault(),this.clickTimeout&&clearTimeout(this.clickTimeout),this.clickTimeout=setTimeout((()=>{this.handleTapAction(t,e,i)}),300)}handleDoubleClick(t,e,i){t.preventDefault(),this.clickTimeout&&(clearTimeout(this.clickTimeout),this.clickTimeout=null),this.handleDoubleAction(t,e,i)}handleMouseDown(t,e,i){this.isHolding=!1,this.holdTimeout=setTimeout((()=>{this.isHolding=!0,this.handleHoldAction(t,e,i)}),500)}handleMouseUp(t,e,i){this.holdTimeout&&(clearTimeout(this.holdTimeout),this.holdTimeout=null)}handleMouseLeave(t,e,i){this.holdTimeout&&(clearTimeout(this.holdTimeout),this.holdTimeout=null),this.isHolding=!1}handleTouchStart(t,e,i){this.handleMouseDown(t,e,i)}handleTouchEnd(t,e,i){this.handleMouseUp(t,e,i)}handleTapAction(t,e,i){if(!this.isHolding)if(e.tap_action){const o="default"===e.tap_action.action?{action:"more-info",entity:e.entity}:e.tap_action;wt.handleAction(o,i,t.target)}else e.entity&&wt.handleAction({action:"more-info",entity:e.entity},i,t.target)}handleHoldAction(t,e,i){e.hold_action&&"nothing"!==e.hold_action.action&&wt.handleAction(e.hold_action,i,t.target)}handleDoubleAction(t,e,i){e.double_tap_action&&"nothing"!==e.double_tap_action.action&&wt.handleAction(e.double_tap_action,i,t.target)}_handleDimensionChange(t,e,i,o){const n={};if(!1!==t.aspect_ratio_linked){const o=t.aspect_ratio_value||1.778;"width"===e?(n.width=i,n.height=Math.round(i/o)):(n.height=i,n.width=Math.round(i*o)),n.width&&(n.width<100||n.width>1e3)&&(n.width=Math.max(100,Math.min(1e3,n.width)),n.height=Math.round(n.width/o)),n.height&&(n.height<100||n.height>1e3)&&(n.height=Math.max(100,Math.min(1e3,n.height)),n.width=Math.round(n.height*o))}else n[e]=i;o(n)}getCameraNamePositionStyles(t,e,i={}){const o={position:"absolute",padding:"6px 12px",background:"rgba(0, 0, 0, 0.7)",color:i.color||this.getTextColor(e),fontSize:i.font_size?"number"==typeof i.font_size?`${i.font_size}px`:i.font_size:this.getTextSize(e),fontWeight:i.font_weight||this.getTextWeight(e),fontFamily:i.font_family||this.getTextFont(e),borderRadius:"4px",textTransform:i.text_transform||void 0,letterSpacing:i.letter_spacing||void 0,lineHeight:i.line_height||void 0,zIndex:"10",pointerEvents:"none",backdropFilter:"blur(4px)",maxWidth:"calc(100% - 20px)",overflow:"hidden",textOverflow:"ellipsis",whiteSpace:"nowrap",textShadow:i.text_shadow||"0 1px 2px rgba(0, 0, 0, 0.8)",transition:"all 0.2s ease"};switch(t){case"top-left":default:return Object.assign(Object.assign({},o),{top:"8px",left:"8px"});case"top-right":return Object.assign(Object.assign({},o),{top:"8px",right:"8px"});case"center":return Object.assign(Object.assign({},o),{top:"50%",left:"50%",transform:"translate(-50%, -50%)",textAlign:"center"});case"bottom-left":return Object.assign(Object.assign({},o),{bottom:"8px",left:"8px"});case"bottom-right":return Object.assign(Object.assign({},o),{bottom:"8px",right:"8px"})}}hasActiveLink(t){const e=t.tap_action&&"nothing"!==t.tap_action.action,i=t.hold_action&&"nothing"!==t.hold_action.action,o=t.double_tap_action&&"nothing"!==t.double_tap_action.action;return e||i||o||!!t.entity}refreshCamera(t,e){document.querySelectorAll('hui-image[class*="camera-image"]').forEach((i=>{i.cameraImage===t&&i.hass===e&&(console.log("🎥 Refreshing hui-image component"),i.hass=Object.assign({},e),i.requestUpdate())}))}getCameraImageUrl(t,e,i){if(!t||!e)return console.log("🎥 Camera URL: Missing entity or hass",{entity:t,hasHass:!!e}),"";let o;try{o=e.hassUrl?`${e.hassUrl()}/api/camera_proxy/${t}`:`/api/camera_proxy/${t}`;const i=o.includes("?")?"&":"?";o+=`${i}token=${Date.now()}`}catch(e){o=`/api/camera_proxy/${t}?token=${Date.now()}`}return o}async getCameraImageBlob(t,e,i){try{const i=`/api/camera_proxy/${t}?t=${Date.now()}`,o=await fetch(i,{method:"GET",credentials:"include",headers:{Accept:"image/*","Cache-Control":"no-cache",Pragma:"no-cache"}});if(!o.ok)return await this.getCameraImageViaWebSocket(t,e);const n=await o.blob();return URL.createObjectURL(n)}catch(i){return await this.getCameraImageViaWebSocket(t,e)}}async getCameraImageViaWebSocket(t,e){try{const i=e.connection;if(!i)throw new Error("No WebSocket connection available");const o=await i.sendMessagePromise({type:"camera_thumbnail",entity_id:t});if(o&&o.content){const t=atob(o.content),e=new Array(t.length);for(let i=0;i<t.length;i++)e[i]=t.charCodeAt(i);const i=new Uint8Array(e),n=new Blob([i],{type:"image/jpeg"});return URL.createObjectURL(n)}throw new Error("No image content received from WebSocket")}catch(t){return""}}async handleImageError(t,e){var i,o,n,a,r,s,l,d,c,p;const u=t.target;if(!u.dataset.triedBlob&&e.entity){u.dataset.triedBlob="true";try{const t=(null===(i=document.querySelector("home-assistant"))||void 0===i?void 0:i.hass)||(null===(o=document.querySelector("ha-panel-lovelace"))||void 0===o?void 0:o.hass)||(null===(n=window.hassConnection)||void 0===n?void 0:n.hass);if(t){const i=await this.getCameraImageBlob(e.entity,t,e.image_quality);if(i)return void(u.src=i)}}catch(t){}}if(e.fallback_image)u.src=e.fallback_image;else{u.style.display="none";const t=u.closest(".camera-image-container");if(t){const i=e.entity?null===(s=null===(r=null===(a=document.querySelector("home-assistant"))||void 0===a?void 0:a.hass)||void 0===r?void 0:r.states)||void 0===s?void 0:s[e.entity]:null,o=(null===(l=null==i?void 0:i.attributes)||void 0===l?void 0:l.brand)||(null===(d=null==i?void 0:i.attributes)||void 0===d?void 0:d.model)||"Unknown",n=(null===(c=document.querySelector("home-assistant"))||void 0===c||c.hass,e);if(t.innerHTML=`\n          <div style="\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            flex-direction: column;\n            background-color: var(--warning-color, #ff9800);\n            color: ${this.getTextColor(n)};\n            padding: 20px;\n            border-radius: 8px;\n            text-align: center;\n            min-height: 150px;\n            border: 1px solid rgba(255,255,255,0.2);\n            font-family: ${this.getTextFont(n)};\n          ">\n            <ha-icon icon="mdi:camera-off" style="font-size: 48px; margin-bottom: 12px; opacity: 0.9;"></ha-icon>\n            <span style="font-weight: ${this.getTextWeight(n)}; font-size: ${this.getTextSize(n)}; margin-bottom: 8px;">Camera Load Failed</span>\n            <span style="font-size: ${this.getSmallTextSize(n)}; margin-bottom: 8px; opacity: 0.9;">Entity: ${e.entity}</span>\n            <span style="font-size: ${this.getSmallTextSize(n)}; margin-bottom: 12px; opacity: 0.8;">Camera Type: ${o}</span>\n            <div style="font-size: ${this.getSmallTextSize(n)}; opacity: 0.8; line-height: 1.4; margin-bottom: 12px;">\n              <div style="margin-bottom: 6px;">• Check camera entity is working in HA</div>\n              <div style="margin-bottom: 6px;">• Verify RTSP credentials in HA config</div>\n              <div>• Try refreshing the browser</div>\n            </div>\n            <button \n              onclick="window.retryCamera_${null===(p=e.entity)||void 0===p?void 0:p.replace(/\./g,"_")}"\n              style="\n                background: rgba(255,255,255,0.2);\n                border: 1px solid rgba(255,255,255,0.3);\n                color: white;\n                padding: 8px 16px;\n                border-radius: 4px;\n                cursor: pointer;\n                font-size: ${this.getSmallTextSize(n)};\n                font-family: ${this.getTextFont(n)};\n                transition: all 0.2s ease;\n              "\n              onmouseover="this.style.background='rgba(255,255,255,0.3)'"\n              onmouseout="this.style.background='rgba(255,255,255,0.2)'"\n            >\n              🔄 Retry Camera Load\n            </button>\n          </div>\n        `,e.entity){const i=`retryCamera_${e.entity.replace(/\./g,"_")}`;window[i]=async()=>{var i;if(null===(i=document.querySelector("home-assistant"))||void 0===i?void 0:i.hass)try{const i=Date.now(),o=`/api/camera_proxy/${e.entity}?t=${i}`,a=document.createElement("img");a.className="camera-image",a.style.cssText=`\n                  position: absolute;\n                  top: 0;\n                  left: 0;\n                  width: 100%;\n                  height: 100%;\n                  object-fit: ${e.image_fit||"cover"};\n                  border-radius: inherit;\n                `,a.onerror=t=>{"string"!=typeof t&&this.handleImageError(t,e)},a.onload=()=>{t&&(t.innerHTML="",t.appendChild(a))},a.src=o,t&&(t.innerHTML=`\n                    <div style="\n                      display: flex;\n                      align-items: center;\n                      justify-content: center;\n                      flex-direction: column;\n                      background-color: var(--primary-color);\n                      color: ${this.getTextColor(n)};\n                      padding: 20px;\n                      border-radius: 8px;\n                      text-align: center;\n                      min-height: 150px;\n                      font-family: ${this.getTextFont(n)};\n                    ">\n                      <div style="\n                        width: 32px;\n                        height: 32px;\n                        border: 3px solid rgba(255,255,255,0.3);\n                        border-top: 3px solid white;\n                        border-radius: 50%;\n                        animation: spin 1s linear infinite;\n                        margin-bottom: 12px;\n                      "></div>\n                      <span style="font-weight: ${this.getTextWeight(n)}; font-size: ${this.getTextSize(n)};">Retrying Camera Load...</span>\n                      <style>\n                        @keyframes spin {\n                          0% { transform: rotate(0deg); }\n                          100% { transform: rotate(360deg); }\n                        }\n                      </style>\n                    </div>\n                  `)}catch(t){console.error("🎥 Retry failed:",t)}}}}}}renderConditionalFieldsGroup(t,e){return q`
      <div
        class="conditional-fields-group"
        style="margin-top: 16px; padding: 16px; border-left: 4px solid var(--primary-color); background: rgba(var(--rgb-primary-color), 0.08); border-radius: 0 8px 8px 0;"
      >
        <div
          style="font-weight: 600; color: var(--primary-color); margin-bottom: 12px; font-size: 14px;"
        >
          ${t}
        </div>
        ${e}
      </div>
    `}getTextColor(t){return t.text_color||"white"}getTextSize(t){const e=t.text_size||14;return"number"==typeof e?`${e}px`:e}getSmallTextSize(t){const e=t.text_size||14;return`${"number"==typeof e?Math.max(10,e-2):12}px`}getTextWeight(t){return t.text_weight||"500"}getTextFont(t){return t.text_font||'-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif'}styleObjectToCss(t){return Object.entries(t).filter((([t,e])=>null!=e&&""!==e)).map((([t,e])=>`${this.camelToKebab(t)}: ${e}`)).join("; ")}camelToKebab(t){return t.replace(/([a-z0-9]|(?=[A-Z]))([A-Z])/g,"$1-$2").toLowerCase()}addPixelUnit(t){return t&&/^\d+$/.test(t)?`${t}px`:t}getPaddingWithDesign(t,e){return t.padding_top||t.padding_bottom||t.padding_left||t.padding_right?`${t.padding_top||"8px"} ${t.padding_right||"12px"} ${t.padding_bottom||"8px"} ${t.padding_left||"12px"}`:this.getPaddingCSS(e)}getMarginWithDesign(t,e){return t.margin_top||t.margin_bottom||t.margin_left||t.margin_right?`${t.margin_top||"0px"} ${t.margin_right||"0px"} ${t.margin_bottom||"0px"} ${t.margin_left||"0px"}`:this.getMarginCSS(e)}getBorderWithDesign(t,e){return t.border_width&&t.border_style&&t.border_color?`${t.border_width} ${t.border_style} ${t.border_color}`:this.getBorderCSS(e)}getBackgroundImageWithDesign(t,e,i){return"url"===t.background_image_type&&t.background_image?`url('${t.background_image}')`:"entity"===t.background_image_type&&t.background_image_entity&&i.states[t.background_image_entity]?`url('/api/camera_proxy/${t.background_image_entity}')`:this.getBackgroundImageCSS(e,i)}getPaddingCSS(t){return t.padding_top||t.padding_bottom||t.padding_left||t.padding_right?`${this.addPixelUnit(t.padding_top)||"8px"} ${this.addPixelUnit(t.padding_right)||"12px"} ${this.addPixelUnit(t.padding_bottom)||"8px"} ${this.addPixelUnit(t.padding_left)||"12px"}`:"8px 12px"}getMarginCSS(t){return t.margin_top||t.margin_bottom||t.margin_left||t.margin_right?`${this.addPixelUnit(t.margin_top)||"0px"} ${this.addPixelUnit(t.margin_right)||"0px"} ${this.addPixelUnit(t.margin_bottom)||"0px"} ${this.addPixelUnit(t.margin_left)||"0px"}`:"0px"}getBackgroundCSS(t){return t.background_color||"transparent"}getBackgroundImageCSS(t,e){return"url"===t.background_image_type&&t.background_image?`url('${t.background_image}')`:"entity"===t.background_image_type&&t.background_image_entity&&e.states[t.background_image_entity]?`url('/api/camera_proxy/${t.background_image_entity}')`:""}getBorderCSS(t){return t.border_width&&t.border_style&&t.border_color?`${t.border_width} ${t.border_style} ${t.border_color}`:""}validateAction(t){const e=[];return"navigate"!==t.action||t.navigation_path||e.push("Navigation path is required for navigate action"),"call-service"!==t.action||t.service&&t.service_data||e.push("Service and service data are required for call-service action"),e}getStyles(){return"\n      .camera-module-container {\n        width: 100%;\n        box-sizing: border-box;\n        transition: all 0.3s ease;\n      }\n      \n      .camera-name-overlay {\n        text-shadow: 0 1px 2px rgba(0, 0, 0, 0.8);\n        backdrop-filter: blur(4px);\n        -webkit-backdrop-filter: blur(4px);\n        transition: all 0.2s ease;\n      }\n      \n      .camera-image-container {\n        position: relative;\n        overflow: hidden;\n        margin: 0 auto;\n        flex-shrink: 0;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        transition: all 0.3s ease;\n      }\n      \n      .camera-image {\n        width: 100%;\n        height: 100%;\n        transition: all 0.3s ease;\n      }\n      \n      .camera-unavailable {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        flex-direction: column;\n        background-color: var(--disabled-color, #f5f5f5);\n        color: var(--secondary-text-color);\n        min-height: 150px;\n        transition: all 0.3s ease;\n      }\n      \n      .camera-module-clickable {\n        cursor: pointer;\n        transition: transform 0.2s ease;\n      }\n      \n      .camera-module-clickable:hover {\n        transform: scale(1.02);\n      }\n      \n      .camera-module-clickable:active {\n        transform: scale(0.98);\n      }\n\n      /* Standard field styling */\n      .field-title {\n        font-size: 16px !important;\n        font-weight: 600 !important;\n     \n        margin-bottom: 4px !important;\n      }\n\n      .field-description {\n        font-size: 13px !important;\n        color: var(--secondary-text-color) !important;\n        margin-bottom: 12px !important;\n        opacity: 0.8 !important;\n        line-height: 1.4 !important;\n      }\n\n      .section-title {\n        font-size: 18px !important;\n        font-weight: 700 !important;\n        color: var(--primary-color) !important;\n        text-transform: uppercase !important;\n        letter-spacing: 0.5px !important;\n      }\n\n      /* Conditional fields grouping */\n      .conditional-fields-group {\n        margin-top: 16px;\n        border-left: 4px solid var(--primary-color);\n        background: rgba(var(--rgb-primary-color), 0.08);\n        border-radius: 0 8px 8px 0;\n        overflow: hidden;\n        transition: all 0.2s ease;\n        animation: slideInFromLeft 0.3s ease-out;\n      }\n\n      @keyframes slideInFromLeft {\n        from {\n          opacity: 0;\n          transform: translateX(-10px);\n        }\n        to {\n          opacity: 1;\n          transform: translateX(0);\n        }\n      }\n\n      /* Global design responsive text */\n      .camera-module-container * {\n        transition: font-size 0.3s ease, color 0.3s ease, font-weight 0.3s ease;\n      }\n\n      /* Enhanced animations for global design changes */\n      @keyframes textSizeChange {\n        0% { transform: scale(1); }\n        50% { transform: scale(1.02); }\n        100% { transform: scale(1); }\n      }\n\n      .camera-module-container.design-updating {\n        animation: textSizeChange 0.3s ease;\n      }\n    "}}var re=i(340),se=function(t,e,i,o){var n,a=arguments.length,r=a<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,i):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(t,e,i,o);else for(var s=t.length-1;s>=0;s--)(n=t[s])&&(r=(a<3?n(r):a>3?n(e,i,r):n(e,i))||r);return a>3&&r&&Object.defineProperty(e,i,r),r};let le=class extends ut{static get styles(){return l`
      ha-entity-picker {
        width: 100%;
        display: block;
      }
    `}render(){return q`
      <ha-entity-picker
        .hass=${this.hass}
        .label=${this.label}
        .value=${this.value||""}
        .entityFilter=${this.entityFilter}
        @value-changed=${this._valueChanged}
        allow-custom-entity
      ></ha-entity-picker>
    `}_valueChanged(t){t.stopPropagation();const e=t.detail.value;e!==this.value&&(this.value=e,(0,re.rC)(this,"value-changed",{value:e}))}};se([vt({attribute:!1})],le.prototype,"hass",void 0),se([vt()],le.prototype,"label",void 0),se([vt()],le.prototype,"value",void 0),se([vt()],le.prototype,"entityFilter",void 0),le=se([gt("ultra-card-entity-picker")],le);class de extends xt{constructor(){super(...arguments),this.metadata={type:"graphs",title:"Graphs",description:"Display interactive charts and graphs with Home Assistant data",author:"WJD Designs",version:"1.0.0",icon:"mdi:chart-line",category:"data",tags:["charts","graphs","data","visualization","statistics","analytics"]},this._updateInterval=null,this._historyData={},this._historyError={},this._historyLoading={},this._deferredHistoryScheduled={},this.clickTimeout=null,this.holdTimeout=null,this.isHolding=!1,this.expandedEntities=new Set}_getCacheStore(){const t=window;if(!t.__ultraGraphsCache)try{const e=localStorage.getItem("__ultraGraphsCache");t.__ultraGraphsCache=e?JSON.parse(e):{}}catch(e){t.__ultraGraphsCache={}}return t.__ultraGraphsCache}_persistCacheStore(t){try{localStorage.setItem("__ultraGraphsCache",JSON.stringify(t))}catch(t){}}_makeCacheKey(t){return`${(t.entities||[]).filter((t=>t.entity)).map((t=>`${t.entity}|${t.attribute||"state"}`)).join(";")}::${t.time_period}`}_tryReadCache(t){const e=this._getCacheStore(),i=this._makeCacheKey(t),o=e[i];if(!o)return null;const n=Date.now();return o.expiresAt&&o.expiresAt>n&&o.data?o.data:(delete e[i],this._persistCacheStore(e),null)}_writeCache(t,e){const i=this._getCacheStore();i[this._makeCacheKey(t)]={expiresAt:Date.now()+3e5,data:e},this._persistCacheStore(i)}createDefault(t,e){return{id:t||this.generateId("graphs"),type:"graphs",name:"New Graph",chart_type:"line",entities:[],time_period:"24h",title:"Chart",chart_width:"100%",chart_height:345,background_color:"transparent",info_position:"top_left",show_legend:!0,legend_position:"bottom_left",show_grid:!0,smooth_curves:!0,show_tooltips:!0,tap_action:{action:"default"},hold_action:{action:"default"},double_tap_action:{action:"default"},template_mode:!1,template:"",enable_hover_effect:!1}}getChartTypeOptions(){return[{value:"line",label:"Line Chart"},{value:"bar",label:"Bar Chart"},{value:"pie",label:"Pie Chart"},{value:"donut",label:"Donut Chart"}]}getTimePeriodOptions(){return[{value:"1h",label:"Last Hour"},{value:"3h",label:"Last 3 Hours"},{value:"6h",label:"Last 6 Hours"},{value:"12h",label:"Last 12 Hours"},{value:"24h",label:"Last 24 Hours"},{value:"2d",label:"Last 2 Days"},{value:"7d",label:"Last Week"},{value:"30d",label:"Last Month"},{value:"90d",label:"Last 3 Months"},{value:"365d",label:"Last Year"}]}getAggregationOptions(){return[{value:"mean",label:"Average"},{value:"sum",label:"Sum"},{value:"min",label:"Minimum"},{value:"max",label:"Maximum"},{value:"median",label:"Median"},{value:"first",label:"First Value"},{value:"last",label:"Last Value"},{value:"count",label:"Count"},{value:"delta",label:"Change"}]}getLegendPositionOptions(){return[{value:"top",label:"Top"},{value:"bottom",label:"Bottom"},{value:"left",label:"Left"},{value:"right",label:"Right"},{value:"none",label:"Hidden"}]}renderGeneralTab(t,e,i,o){var n,a,r,s;const l=t;return q`
      <div class="uc-graphs-general-tab">
        ${this.injectUcFormStyles()}

        <!-- Chart Type Section -->
        <div
          class="settings-section"
          style="background: var(--secondary-background-color); border-radius: 12px; padding: 20px; margin-bottom: 20px; border: 1px solid rgba(var(--rgb-primary-color), 0.12);"
        >
          <div
            class="section-title"
            style="font-size: 16px; font-weight: 600; color: var(--primary-text-color); margin-bottom: 16px; display: flex; align-items: center; gap: 8px;"
          >
            <ha-icon icon="mdi:chart-line" style="color: var(--primary-color);"></ha-icon>
            Chart Type
          </div>

          ${Ct.renderField("Type","Select the visualization style for your data.",e,{chart_type:l.chart_type},[Ct.createSchemaItem("chart_type",{select:{options:this.getChartTypeOptions(),mode:"dropdown"}})],(t=>o({chart_type:t.detail.value.chart_type})))}
        </div>

        <!-- Data Sources Section -->
        <div
          class="settings-section"
          style="background: var(--secondary-background-color); border-radius: 12px; padding: 20px; margin-bottom: 20px; border: 1px solid rgba(var(--rgb-primary-color), 0.12);"
        >
          <div
            class="section-title"
            style="font-size: 16px; font-weight: 600; color: var(--primary-text-color); margin-bottom: 16px; display: flex; align-items: center; gap: 8px;"
          >
            <ha-icon icon="mdi:database" style="color: var(--primary-color);"></ha-icon>
            Data Sources
          </div>

          <div class="entities-grid" style="display: grid; gap: 12px;">
            ${(null===(n=l.entities)||void 0===n?void 0:n.map(((t,i)=>{var n,a,r;return q`
                <div
                  class="entity-card"
                  style="
                    background: var(--primary-background-color); 
                    border-radius: 8px; 
                    padding: 16px; 
                    border-left: 4px solid ${t.color||this._getDefaultColor(i)};
                    position: relative;
                    transition: all 0.2s ease;
                  "
                >
                  ${((null===(n=l.entities)||void 0===n?void 0:n.length)||0)>1?q`
                        <ha-icon-button
                          @click=${()=>this._removeEntity(l,i,o)}
                          style="
                        position: absolute;
                        top: 8px;
                        right: 8px;
                        --mdc-icon-button-size: 32px;
                        --mdc-icon-size: 16px;
                        color: var(--error-color);
                      "
                        >
                          <ha-icon icon="mdi:close"></ha-icon>
                        </ha-icon-button>
                      `:""}

                  <div
                    style="display: grid; gap: 12px; margin-top: ${((null===(a=l.entities)||void 0===a?void 0:a.length)||0)>1?"20px":"0"};"
                  >
                    <!-- Entity Header -->
                    <div style="display: flex; align-items: center; gap: 12px; margin-bottom: 8px;">
                      <div style="flex: 1; display: flex; align-items: center; gap: 8px;">
                        <div
                          style="
                             width: 12px;
                             height: 12px;
                             background: ${t.color||this._getDefaultColor(i)};
                             border-radius: 2px;
                             flex-shrink: 0;
                           "
                        ></div>
                        <span
                          style="font-size: 14px; font-weight: 500; color: var(--primary-text-color);"
                        >
                          ${t.name||(t.entity?(null===(r=e.states[t.entity])||void 0===r?void 0:r.attributes.friendly_name)||t.entity.split(".")[1]:`Entity ${i+1}`)}
                        </span>
                      </div>
                    </div>

                    <!-- Basic Settings (Always Visible) -->
                    <div style="display: grid; gap: 12px;">
                      <!-- Entity Picker -->
                      ${Ct.renderField("Entity","Select an entity to plot.",e,{entity:t.entity||""},[Ct.createSchemaItem("entity",{entity:{}})],(t=>{var e,n;this._updateEntity(l,i,{entity:(null===(e=t.detail.value)||void 0===e?void 0:e.entity)||(null===(n=t.detail.value)||void 0===n?void 0:n.entity)||t.detail.value},o)}))}

                      <!-- Display Name -->
                      <input
                        type="text"
                        .value=${t.name||""}
                        placeholder="Display name (optional)"
                        @input=${t=>{const e=t.target;this._updateEntity(l,i,{name:e.value},o)}}
                        style="
                          padding: 10px 12px;
                          border: 1px solid var(--divider-color);
                          border-radius: 6px;
                          background: var(--secondary-background-color);
                          color: var(--primary-text-color);
                          font-size: 14px;
                          transition: border-color 0.2s ease;
                        "
                      />

                      <!-- Series Color (below name) -->
                      <div style="margin-top: 4px;">
                        <ultra-color-picker
                          .value=${t.color||this._getDefaultColor(i)}
                          @value-changed=${t=>{this._updateEntity(l,i,{color:t.detail.value},o)}}
                          style="width: 100%; height: 40px;"
                        ></ultra-color-picker>
                      </div>

                      <!-- Primary entity toggle -->
                      <label
                        style="display:flex; align-items:center; gap:8px; cursor:pointer; padding:8px; border-radius:6px; background: var(--primary-background-color);"
                      >
                        <ha-switch
                          .checked=${!0===t.is_primary||0===i&&!(l.entities||[]).some((t=>t.is_primary))}
                          @change=${t=>{const e=t.target,n=l.entities||[];let a;if(e.checked)a=n.map(((t,e)=>Object.assign(Object.assign({},t),{is_primary:e===i})));else{const t=n.some(((t,e)=>e!==i&&t.is_primary));a=t?n.map(((t,e)=>e===i?Object.assign(Object.assign({},t),{is_primary:!1}):t)):n.map(((t,e)=>Object.assign(Object.assign({},t),{is_primary:e===i})))}o({entities:a})}}
                        ></ha-switch>
                        <span style="font-size:13px; color: var(--primary-text-color);"
                          >Use as card info</span
                        >
                      </label>
                    </div>

                    <!-- Advanced Options (Collapsible) -->
                    <div
                      class="entity-advanced-options"
                      style="
                        max-height: 0;
                        overflow: hidden;
                        transition: max-height 0.3s ease, opacity 0.2s ease;
                        opacity: 0;
                        border-top: none;
                        margin-top: 0;
                      "
                    >
                      <div style="padding-top: 16px; display: grid; gap: 16px;">
                        <!-- Attribute Selection -->
                        ${Ct.renderField("Attribute","Use entity state or select a specific attribute to track.",e,{attribute:t.attribute||""},[Ct.createSchemaItem("attribute",{select:{options:[{value:"",label:"State (default)"},...this._getEntityAttributes(t.entity,e)],mode:"dropdown"}})],(t=>{this._updateEntity(l,i,{attribute:t.detail.value.attribute},o)}))}

                        <!-- Line Chart Specific Options -->
                        ${["line","area"].includes(l.chart_type)?q`
                              <div
                                style="display: grid; grid-template-columns: 1fr 1fr; gap: 16px;"
                              >
                                <label
                                  style="display: flex; align-items: center; gap: 8px; cursor: pointer; padding: 8px; border-radius: 6px; background: var(--secondary-background-color);"
                                >
                                  <ha-switch
                                    .checked=${!1!==t.show_points}
                                    @change=${t=>{const e=t.target;this._updateEntity(l,i,{show_points:e.checked},o)}}
                                  ></ha-switch>
                                  <span style="font-size: 13px; color: var(--primary-text-color);"
                                    >Show Points</span
                                  >
                                </label>

                                <label
                                  style="display: flex; align-items: center; gap: 8px; cursor: pointer; padding: 8px; border-radius: 6px; background: var(--secondary-background-color);"
                                >
                                  <ha-switch
                                    .checked=${!0===t.fill_area}
                                    @change=${t=>{const e=t.target;this._updateEntity(l,i,{fill_area:e.checked},o)}}
                                  ></ha-switch>
                                  <span style="font-size: 13px; color: var(--primary-text-color);"
                                    >Fill Area</span
                                  >
                                </label>
                              </div>

                              <!-- Line Width and Style -->
                              <div
                                style="display: grid; grid-template-columns: 1fr 1fr; gap: 16px;"
                              >
                                <div>
                                  <label
                                    style="display: block; font-size: 13px; font-weight: 500; color: var(--primary-text-color); margin-bottom: 6px;"
                                  >
                                    Line Width: ${t.line_width||2}px
                                  </label>
                                  <input
                                    type="range"
                                    min="1"
                                    max="8"
                                    step="1"
                                    .value=${t.line_width||2}
                                    @input=${t=>{const e=t.target;this._updateEntity(l,i,{line_width:parseInt(e.value)},o)}}
                                    style="
                                      width: 100%;
                                      height: 4px;
                                      background: var(--divider-color);
                                      border-radius: 2px;
                                      outline: none;
                                      -webkit-appearance: none;
                                    "
                                  />
                                </div>

                                ${Ct.renderField("Line Style","",e,{line_style:t.line_style||"solid"},[Ct.createSchemaItem("line_style",{select:{options:[{value:"solid",label:"Solid"},{value:"dashed",label:"Dashed"},{value:"dotted",label:"Dotted"}],mode:"dropdown"}})],(t=>{this._updateEntity(l,i,{line_style:t.detail.value.line_style},o)}))}
                              </div>
                            `:""}
                      </div>
                    </div>

                    <!-- Expand/Collapse Button -->
                    <div style="display:flex; justify-content:center; margin-top: 12px;">
                      <ha-button
                        @click=${t=>this._toggleEntityOptions(t,i)}
                        style="--mdc-theme-primary: var(--secondary-text-color); background: transparent;"
                      >
                        <span style="display:inline-flex; align-items:center; gap:6px;">
                          <ha-icon
                            icon="mdi:chevron-down"
                            class="entity-toggle-btn"
                            style="--mdc-icon-size:20px;"
                          ></ha-icon>
                          <span>Expand Options</span>
                        </span>
                      </ha-button>
                    </div>
                  </div>
                </div>
              `})))||""}
            ${0===((null===(a=l.entities)||void 0===a?void 0:a.length)||0)?q`
                  <div
                    style="
                  text-align: center; 
                  padding: 40px 20px; 
                  color: var(--secondary-text-color); 
                  background: var(--primary-background-color); 
                  border-radius: 8px; 
                  border: 2px dashed var(--divider-color);
                "
                  >
                    <ha-icon
                      icon="mdi:chart-line"
                      style="font-size: 48px; margin-bottom: 12px; opacity: 0.5;"
                    ></ha-icon>
                    <div style="font-size: 16px; margin-bottom: 4px; font-weight: 500;">
                      No entities added
                    </div>
                    <div style="font-size: 14px; opacity: 0.7;">
                      Add your first entity to create a chart
                    </div>
                  </div>
                `:""}

            <ha-button
              @click=${()=>this._addEntity(l,o)}
              style="
                margin-top: 8px; 
                width: 100%;
                --mdc-theme-primary: var(--primary-color);
                --mdc-button-outline-color: var(--primary-color);
              "
            >
              <ha-icon icon="mdi:plus" slot="icon"></ha-icon>
              Add Entity
            </ha-button>
          </div>
        </div>

        <!-- Display Options Section -->
        <div
          class="settings-section"
          style="background: var(--secondary-background-color); border-radius: 12px; padding: 20px; margin-bottom: 20px; border: 1px solid rgba(var(--rgb-primary-color), 0.12);"
        >
          <div
            class="section-title"
            style="font-size: 16px; font-weight: 600; color: var(--primary-text-color); margin-bottom: 20px; display: flex; align-items: center; gap: 8px;"
          >
            <ha-icon icon="mdi:cog" style="color: var(--primary-color);"></ha-icon>
            Display Options
          </div>

          <div style="display: grid; gap: 16px;">
            <!-- Chart Title -->
            <div>
              <label
                style="display: block; font-size: 14px; font-weight: 500; color: var(--primary-text-color); margin-bottom: 6px;"
              >
                Chart Title
              </label>
              <input
                type="text"
                .value=${l.title||""}
                placeholder="Enter chart title"
                @input=${t=>{const e=t.target;o({title:e.value})}}
                style="
                  width: 100%;
                  padding: 10px 12px;
                  border: 1px solid var(--divider-color);
                  border-radius: 6px;
                  background: var(--secondary-background-color);
                  color: var(--primary-text-color);
                  font-size: 14px;
                  transition: border-color 0.2s ease;
                  box-sizing: border-box;
                "
              />
            </div>

            <!-- Time Period -->
            ${Ct.renderField("Time Period","How much historical data to show.",e,{time_period:l.time_period},[Ct.createSchemaItem("time_period",{select:{options:this.getTimePeriodOptions()}})],(t=>{const i=t.detail.value.time_period;o({time_period:i}),delete this._historyData[l.id],delete this._historyError[l.id],delete this._historyLoading[l.id],delete this._deferredHistoryScheduled[l.id];const n=Object.assign(Object.assign({},l),{time_period:i});this._loadHistoryData(n,e),this._triggerHistoryLoad(n,e),this.requestUpdate()}))}

            <!-- Normalize Values Toggle -->
            <div style="margin-bottom: 16px;">
              <label style="display: flex; align-items: center; gap: 8px; cursor: pointer;">
                <ha-switch
                  .checked=${l.normalize_values||!1}
                  @change=${t=>o({normalize_values:t.target.checked})}
                ></ha-switch>
                <span style="font-size: 14px;">Normalize values to same scale</span>
              </label>
              <div
                style="font-size: 12px; color: var(--secondary-text-color); margin-top: 4px; margin-left: 40px;"
              >
                Useful when comparing entities with different units (e.g., % vs miles)
              </div>
            </div>

            <!-- Chart Height -->
            <div>
              <label
                style="display: block; font-size: 14px; font-weight: 500; color: var(--primary-text-color); margin-bottom: 6px;"
              >
                Chart Height
              </label>
              <div
                style="display: grid; grid-template-columns: 1fr auto auto; gap: 8px; align-items: center;"
              >
                <input
                  type="range"
                  min="80"
                  max="400"
                  step="5"
                  .value=${null!==(r=l.chart_height)&&void 0!==r?r:345}
                  @input=${t=>{const e=t.target,i=parseInt(e.value);o({chart_height:i})}}
                  style="
                    width: 100%;
                    height: 4px;
                    background: var(--divider-color);
                    border-radius: 2px;
                    outline: none;
                    -webkit-appearance: none;
                  "
                />
                <span
                  style="font-size: 13px; color: var(--secondary-text-color); min-width: 56px; text-align: right;"
                  >${null!==(s=l.chart_height)&&void 0!==s?s:345}px</span
                >
                <button
                  @click=${()=>o({chart_height:345})}
                  title="Reset to default (345px)"
                  style="
                    width: 32px;
                    height: 32px;
                    padding: 0;
                    border: 1px solid var(--divider-color);
                    border-radius: 4px;
                    background: var(--secondary-background-color);
                    color: var(--primary-text-color);
                    cursor: pointer;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    transition: all 0.2s ease;
                    flex-shrink: 0;
                  "
                  @mouseenter=${t=>{const e=t.target;e.style.background="var(--primary-color)",e.style.color="var(--text-primary-color)",e.style.borderColor="var(--primary-color)"}}
                  @mouseleave=${t=>{const e=t.target;e.style.background="var(--secondary-background-color)",e.style.color="var(--primary-text-color)",e.style.borderColor="var(--divider-color)"}}
                >
                  <ha-icon icon="mdi:refresh" style="font-size: 18px;"></ha-icon>
                </button>
              </div>
            </div>

            <!-- Chart Width -->
            ${Ct.renderField("Chart Width","CSS width (e.g., 100%, 320px).",e,{chart_width:l.chart_width||"100%"},[Ct.createSchemaItem("chart_width",{text:{}})],(t=>o({chart_width:t.detail.value.chart_width})))}

            <!-- Info Display Position -->
            ${Ct.renderField("Info Display","Position of the title/value overlay.",e,{info_position:l.info_position||"top_left"},[Ct.createSchemaItem("info_position",{select:{options:[{value:"top_left",label:"Top Left"},{value:"top_right",label:"Top Right"},{value:"bottom_left",label:"Bottom Left"},{value:"bottom_right",label:"Bottom Right"},{value:"middle",label:"Middle"}],mode:"dropdown"}})],(t=>o({info_position:t.detail.value.info_position})))}

            <!-- Legend Position -->
            ${!1!==l.show_legend?Ct.renderField("Legend Position","Where to place the legend when enabled.",e,{legend_position:l.legend_position||"bottom_left"},[Ct.createSchemaItem("legend_position",{select:{options:[{value:"bottom_left",label:"Bottom Left"},{value:"bottom_right",label:"Bottom Right"},{value:"top_left",label:"Top Left"},{value:"top_right",label:"Top Right"}],mode:"dropdown"}})],(t=>o({legend_position:t.detail.value.legend_position}))):""}

            <!-- Background Color -->
            <div>
              <label
                style="display: block; font-size: 14px; font-weight: 500; color: var(--primary-text-color); margin-bottom: 6px;"
              >
                Background Color
              </label>
              <ultra-color-picker
                .value=${l.background_color||"transparent"}
                @value-changed=${t=>{o({background_color:t.detail.value})}}
                style="width: 100%; height: 40px;"
              ></ultra-color-picker>
            </div>

            <!-- Chart Options -->
            <label
              style="display: block; font-size: 14px; font-weight: 500; color: var(--primary-text-color); margin-bottom: 8px;"
              >Chart Options</label
            >
            <label
              style="display:flex; align-items:center; gap:8px; cursor:pointer; padding:8px; border-radius:6px;"
            >
              <ha-switch
                .checked=${!1!==l.show_legend}
                @change=${t=>{const e=t.target;o({show_legend:e.checked})}}
              ></ha-switch>
              <span>Show Legend</span>
            </label>
            <label
              style="display:flex; align-items:center; gap:8px; cursor:pointer; padding:8px; border-radius:6px;"
            >
              <ha-switch
                .checked=${!1!==l.show_grid}
                @change=${t=>{const e=t.target;o({show_grid:e.checked})}}
              ></ha-switch>
              <span>Show Grid</span>
            </label>
            <label
              style="display:flex; align-items:center; gap:8px; cursor:pointer; padding:8px; border-radius:6px;"
            >
              <ha-switch
                .checked=${!1!==l.smooth_curves}
                @change=${t=>{const e=t.target;o({smooth_curves:e.checked})}}
              ></ha-switch>
              <span>Smooth Lines</span>
            </label>
            <label
              style="display:flex; align-items:center; gap:8px; cursor:pointer; padding:8px; border-radius:6px;"
            >
              <ha-switch
                .checked=${!1!==l.show_tooltips}
                @change=${t=>{const e=t.target;o({show_tooltips:e.checked})}}
              ></ha-switch>
              <span>Show Tooltips</span>
            </label>
          </div>
        </div>
      </div>
    `}renderActionsTab(t,e,i,o){const n=t;return q`
      <div class="uc-graphs-actions-tab">
        ${this.injectUcFormStyles()}

        <!-- Link Configuration Section -->
        <div
          class="settings-section"
          style="background: var(--secondary-background-color); border-radius: 8px; padding: 16px; margin-bottom: 32px;"
        >
          ${wt.render(e,{tap_action:n.tap_action||{action:"default"},hold_action:n.hold_action||{action:"default"},double_tap_action:n.double_tap_action||{action:"default"}},(t=>{const e={};t.tap_action&&(e.tap_action=t.tap_action),t.hold_action&&(e.hold_action=t.hold_action),t.double_tap_action&&(e.double_tap_action=t.double_tap_action),o(e)}),"Link Configuration")}
        </div>
      </div>
    `}renderOtherTab(t,e,i,o){const n=t;return q`
      <div class="uc-graphs-other-tab">
        ${this.injectUcFormStyles()}

        <!-- Template Mode Section (standardized) -->
        <div
          class="settings-section"
          style="background: var(--secondary-background-color); border-radius: 8px; padding: 16px; margin-bottom: 32px;"
        >
          <div
            style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 16px; padding-bottom: 0; border-bottom: none;"
          >
            <div
              class="section-title"
              style="font-size: 18px; font-weight: 700; text-transform: uppercase; color: var(--primary-color); letter-spacing: 0.5px;"
            >
              Template Mode
            </div>
            ${Ct.renderField("","",e,{template_mode:n.template_mode||!1},[Ct.createSchemaItem("template_mode",{boolean:{}})],(t=>o({template_mode:t.detail.value.template_mode})))}
          </div>

          ${n.template_mode?q`
                <div style="margin-top: 24px;">
                  ${this.renderConditionalFieldsGroup("Template Settings",q`
                      ${Ct.renderField("Value Template","Template to render using Jinja2 for dynamic chart configuration. Example: {{ states('sensor.example') }}",e,{template:n.template||""},[Ct.createSchemaItem("template",{text:{multiline:!0}})],(t=>o({template:t.detail.value.template})))}
                    `)}
                </div>
              `:q`
                <div
                  style="text-align: center; padding: 20px; color: var(--secondary-text-color); font-style: italic;"
                >
                  Enable template mode to use dynamic content with Jinja2 templates
                </div>
              `}
        </div>

        <!-- Advanced Settings Section -->
        <div
          class="settings-section"
          style="background: var(--secondary-background-color); border-radius: 8px; padding: 16px; margin-bottom: 32px;"
        >
          <div
            class="section-title"
            style="font-size: 18px; font-weight: 700; text-transform: uppercase; color: var(--primary-color); margin-bottom: 16px; padding-bottom: 0; border-bottom: none; letter-spacing: 0.5px;"
          >
            ADVANCED SETTINGS
          </div>

          <div
            style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 16px;"
          >
            <div
              class="field-title"
              style="font-size: 16px; font-weight: 600; color: var(--primary-text-color);"
            >
              Enable Hover Effect
            </div>
            ${Ct.renderField("","",e,{enable_hover_effect:!0===n.enable_hover_effect},[Ct.createSchemaItem("enable_hover_effect",{boolean:{}})],(t=>{o({enable_hover_effect:t.detail.value.enable_hover_effect})}))}
          </div>
          <div
            class="field-description"
            style="font-size: 13px; color: var(--secondary-text-color); margin-bottom: 16px;"
          >
            Add visual feedback when hovering over the chart.
          </div>
        </div>
      </div>
    `}renderPreview(t,e){var i,o,n,a;const r=t,s=r,l=r.design||{};r.template_mode&&r.template&&(this._templateService||(this._templateService=new kt(e))),this._loadHistoryData(r,e);const d=l.color||s.color||"var(--primary-text-color)",c=l.font_size||s.font_size||void 0,p=l.font_family||s.font_family||void 0,u=l.font_weight||s.font_weight||void 0,m=l.text_transform||s.text_transform||void 0,g=l.font_style||s.font_style||void 0,h=l.letter_spacing||s.letter_spacing||void 0,b=l.line_height||s.line_height||void 0,v=(()=>{const t=l.text_shadow_h||s.text_shadow_h,e=l.text_shadow_v||s.text_shadow_v,i=l.text_shadow_blur||s.text_shadow_blur,o=l.text_shadow_color||s.text_shadow_color;if(t||e||i||o)return`${t||"0px"} ${e||"0px"} ${i||"0px"} ${o||"rgba(0,0,0,0.2)"}`})(),_=l.background_color||s.background_color,f=(t={})=>{const e=[],i=t.color||d;i&&e.push(`color: ${i}`);const o=t.fontSize||c;return o&&e.push(`font-size: ${o}`),p&&e.push(`font-family: ${p}`),u&&e.push(`font-weight: ${u}`),m&&e.push(`text-transform: ${m}`),g&&e.push(`font-style: ${g}`),h&&e.push(`letter-spacing: ${h}`),b&&e.push(`line-height: ${b}`),v&&e.push(`text-shadow: ${v}`),e.join("; ")},y={padding:l.padding_top||l.padding_bottom||l.padding_left||l.padding_right||s.padding_top||s.padding_bottom||s.padding_left||s.padding_right?`${this.addPixelUnit(l.padding_top||s.padding_top)||"0px"} ${this.addPixelUnit(l.padding_right||s.padding_right)||"0px"} ${this.addPixelUnit(l.padding_bottom||s.padding_bottom)||"0px"} ${this.addPixelUnit(l.padding_left||s.padding_left)||"0px"}`:"0",margin:l.margin_top||l.margin_bottom||l.margin_left||l.margin_right||s.margin_top||s.margin_bottom||s.margin_left||s.margin_right?`${this.addPixelUnit(l.margin_top||s.margin_top)||"0px"} ${this.addPixelUnit(l.margin_right||s.margin_right)||"0px"} ${this.addPixelUnit(l.margin_bottom||s.margin_bottom)||"0px"} ${this.addPixelUnit(l.margin_left||s.margin_left)||"0px"}`:"0",background:l.background_color&&"transparent"!==l.background_color?l.background_color:s.background_color&&"transparent"!==s.background_color?s.background_color:"transparent",backgroundImage:this.getBackgroundImageCSS(Object.assign(Object.assign({},s),l),e),backgroundSize:"cover",backgroundPosition:"center",backgroundRepeat:"no-repeat",backdropFilter:l.backdrop_filter||s.backdrop_filter||"",border:l.border_style?`${l.border_width||"1px"} ${l.border_style} ${l.border_color||"var(--divider-color)"}`:this.getBorderCSS(s),borderRadius:this.addPixelUnit(l.border_radius||s.border_radius)||"0",width:l.width||s.width||"100%",height:l.height||s.height||"",maxWidth:l.max_width||s.max_width||"",maxHeight:l.max_height||s.max_height||"",minWidth:l.min_width||s.min_width||"",minHeight:l.min_height||s.min_height||"",overflow:l.overflow||s.overflow||"",clipPath:l.clip_path||s.clip_path||"",position:l.position||s.position||"",top:l.top||s.top||"",right:l.right||s.right||"",bottom:l.bottom||s.bottom||"",left:l.left||s.left||"",zIndex:l.z_index||s.z_index||"",boxShadow:l.box_shadow_h||l.box_shadow_v||l.box_shadow_blur||l.box_shadow_spread||l.box_shadow_color?`${l.box_shadow_h||"0px"} ${l.box_shadow_v||"0px"} ${l.box_shadow_blur||"0px"} ${l.box_shadow_spread||"0px"} ${l.box_shadow_color||"rgba(0,0,0,0.2)"}`:"",boxSizing:"border-box",display:"block"};if(!(r.entities&&r.entities.length>0&&r.entities.some((t=>t.entity)))){const t=_;return q`
        <div class="uc-graphs-module" style="${this.styleObjectToCss(y)}">
          <div
            class="chart-placeholder"
            style="
              height: ${Math.min(200,r.chart_height||160)}px;
              background: ${this._formatColor(t)||"rgba(0, 0, 0, 0.2)"};
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            ${f({color:d})};
            font-size: 14px;
          "
          >
            <div style="text-align: center;">
              <ha-icon icon="mdi:chart-line" style="font-size: 48px; opacity: 0.5;"></ha-icon>
              <div style="margin-top: 8px;">No entities configured</div>
              <div style="font-size: 12px; opacity: 0.7;">Add entities to display chart</div>
            </div>
          </div>
        </div>
      `}const x=r.entities.find((t=>t.is_primary&&t.entity))||r.entities.find((t=>t.entity)),w=x?e.states[x.entity]:void 0,$=r.title||(null==x?void 0:x.name)||(null===(i=null==w?void 0:w.attributes)||void 0===i?void 0:i.friendly_name)||"Chart Title",k=((null==x?void 0:x.attribute)?null===(o=null==w?void 0:w.attributes)||void 0===o?void 0:o.unit_of_measurement:null===(n=null==w?void 0:w.attributes)||void 0===n?void 0:n.unit_of_measurement)||"",S=x?x.attribute?null===(a=null==w?void 0:w.attributes)||void 0===a?void 0:a[x.attribute]:null==w?void 0:w.state:void 0,C="number"==typeof S?S:parseFloat(S),z=this._prepareSimpleChartData(r,e),I=r.info_position||"top_left",T=(()=>{if(!x||!w)return"";try{const t=void 0!==S?String(S):w.state;return(0,Dt.formatEntityState)(e,x.entity,{state:t,includeUnit:!0})}catch(t){return`${isNaN(C)?"":C}${k?` ${k}`:""}`}})(),A=q`
      <div style="position:absolute; ${{top_left:"top:12px; left:16px; text-align:left;",top_right:"top:12px; right:16px; text-align:right;",bottom_left:"bottom:12px; left:16px; text-align:left;",bottom_right:"bottom:12px; right:16px; text-align:right;",middle:"top:50%; left:50%; transform: translate(-50%, -50%); text-align:center;"}[I]}; pointer-events:none; z-index:2;">
        <div
          style="${f({fontSize:c||"18px"})}; font-weight: 600; ${l.text_align?`text-align:${l.text_align};`:""}"
        >
          ${$}
        </div>
        <div
          style="${f({fontSize:c||"28px"})}; line-height: 1.1; font-weight: 600; margin-top: 6px; ${l.text_align?`text-align:${l.text_align};`:""}"
        >
          ${T}
        </div>
      </div>
    `,P=this._historyData[r.id],D=!0===this._historyLoading[r.id]&&!P,L=this.getBackgroundImageCSS(Object.assign(Object.assign({},s),l),e),M=q`
      <div class="uc-graphs-module" style="${this.styleObjectToCss(y)}">
        <div
          class="chart-container"
          style="
            width: 100%;
            height: ${Math.min(200,r.chart_height||160)}px;
            border-radius: 8px;
            position: relative;
            overflow: hidden;
            box-sizing: border-box;
            display: block;
            margin: 0;
            padding: 0;
            background: ${this._formatColor(_)||"transparent"};
            ${L?`background-image: ${L}; background-size: cover; background-position: center; background-repeat: no-repeat;`:""}
          "
        >
          ${this._renderSimpleChart(r,z,e,(()=>{const t=r,e=r.design||{},i=e.color||t.color||"var(--primary-text-color)",o=[];return i&&o.push(`color: ${i}`),(e.font_size||t.font_size)&&o.push(`font-size: ${e.font_size||t.font_size}`),(e.font_family||t.font_family)&&o.push(`font-family: ${e.font_family||t.font_family}`),(e.font_weight||t.font_weight)&&o.push(`font-weight: ${e.font_weight||t.font_weight}`),(e.text_transform||t.text_transform)&&o.push(`text-transform: ${e.text_transform||t.text_transform}`),(e.font_style||t.font_style)&&o.push(`font-style: ${e.font_style||t.font_style}`),(e.letter_spacing||t.letter_spacing)&&o.push(`letter-spacing: ${e.letter_spacing||t.letter_spacing}`),(e.line_height||t.line_height)&&o.push(`line-height: ${e.line_height||t.line_height}`),o.join("; ")})())}
          ${A}
          ${!1!==r.show_legend?this._renderLegend(z,r.legend_position||"bottom_left",f({})):""}
          ${D?q`<div
                style="
                  position: absolute;
                  inset: 0;
                  display: flex;
                  align-items: center;
                  justify-content: center;
                  pointer-events: none;
                  background: linear-gradient(
                    to bottom,
                    rgba(0,0,0,0.18),
                    rgba(0,0,0,0.12)
                  );
                "
              >
                <div
                  style="
                    background: rgba(0,0,0,0.35);
                    backdrop-filter: blur(2px);
                    border: 1px solid var(--divider-color);
                    border-radius: 10px;
                    padding: 10px 14px;
                    display: inline-flex;
                    align-items: center;
                    gap: 10px;
                    color: var(--secondary-text-color);
                    box-shadow: 0 2px 8px rgba(0,0,0,0.25);
                  "
                >
                  <ha-circular-progress active size="small"></ha-circular-progress>
                  <span style="font-size: 13px;">Loading history…</span>
                </div>
              </div>`:""}
        </div>
      </div>
    `;return this.hasActiveLink(r)?q`<div
          class="graphs-module-clickable ${!0===r.enable_hover_effect?"hover-enabled":""}"
          style="cursor: pointer; transition: all 0.2s ease; border-radius: 4px;"
          @click=${t=>this.handleClick(t,r,e)}
          @dblclick=${t=>this.handleDoubleClick(t,r,e)}
          @mousedown=${t=>this.handleMouseDown(t,r,e)}
          @mouseup=${t=>this.handleMouseUp(t,r,e)}
          @mouseleave=${t=>this.handleMouseLeave(t,r,e)}
          @touchstart=${t=>this.handleTouchStart(t,r,e)}
          @touchend=${t=>this.handleTouchEnd(t,r,e)}
        >
          ${M}
        </div>`:M}_prepareSimpleChartData(t,e){var i;const o=[];for(let n=0;n<t.entities.length;n++){const a=t.entities[n];if(!a.entity)continue;const r=e.states[a.entity];if(!r)continue;const s=a.attribute?r.attributes[a.attribute]:r.state,l=parseFloat(s);o.push({name:a.name||r.attributes.friendly_name||a.entity,value:isNaN(l)?0:l,color:this._formatColor(a.color)||this._getDefaultColor(n),unit:r.attributes.unit_of_measurement||"",lineWidth:null!==(i=a.line_width)&&void 0!==i?i:2,showPoints:!1!==a.show_points,fillArea:!0===a.fill_area,lineStyle:a.line_style||"solid",entityId:a.entity})}return o}_formatColor(t){if(!t)return this._getDefaultColor(0);if(Array.isArray(t)&&t.length>=3){const[e,i,o]=t;return isNaN(e)||isNaN(i)||isNaN(o)?this._getDefaultColor(0):`rgb(${Math.round(e)}, ${Math.round(i)}, ${Math.round(o)})`}return"string"==typeof t&&t.startsWith("#")||"string"==typeof t&&t.startsWith("rgb")?t:"string"!=typeof t||!t.startsWith("var(")&&"transparent"!==t?("string"==typeof t&&t.includes("NaN"),this._getDefaultColor(0)):t}_renderSimpleChart(t,e,i,o){if(0===e.length)return q` <div style="color: var(--secondary-text-color);">No data available</div> `;const n=(t.chart_height||345)-80;return["pie","donut"].includes(t.chart_type)?this._renderPieChart(t,e,n,o,i):["line","area"].includes(t.chart_type)?this._renderLineChart(t,e,n,i):this._renderBarChart(t,e,n,o,i)}_renderPieChart(t,e,i,o,n){const a=e.reduce(((t,e)=>t+e.value),0);return q`
      <div
        style="
            width: 200px;
            height: 200px;
            border-radius: 50%;
            background: conic-gradient(
              ${e.map(((t,i)=>{const o=e.slice(0,i).reduce(((t,e)=>t+e.value/a*360),0),n=o+t.value/a*360;return`${t.color} ${o}deg ${n}deg`})).join(", ")}
            );
          ${"donut"===t.chart_type?"position: relative;":""}
          "
      >
        ${"donut"===t.chart_type?q`
              <div
                style="
                position: absolute;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                width: 100px;
                height: 100px;
                border-radius: 50%;
                  background: ${this._formatColor(t.background_color)||"rgba(0, 0, 0, 0.2)"};
              "
              ></div>
            `:""}
      </div>
      <div style="margin-top: 10px; text-align: center;">
        ${e.map((t=>{let e=`${t.value}${t.unit||""}`;if(n&&t.entityId)try{e=(0,Dt.formatEntityState)(n,t.entityId,{state:t.value,includeUnit:!0})}catch(t){}return q`<div style="font-size: 14px; ${o||""}">
            ${t.name}: ${e}
          </div>`}))}
      </div>
    `}_renderLineChart(t,e,i,o){const n=this._historyData[t.id];let a,r;this._historyError[t.id],this._historyLoading[t.id],n?(a=n.timePoints,r=n.datasets):(a=this._generateTimePoints(t.time_period),r=e.map(((e,i)=>{t.entities[i];const o=e.value||0,n=new Array(a.length).fill(o);return{name:e.name,color:e.color,values:n,lineWidth:e.lineWidth,showPoints:e.showPoints,fillArea:e.fillArea,lineStyle:e.lineStyle,unit:e.unit||"",entityId:e.entityId}}))),r=r.map(((e,i)=>{var o,n,a;const r=null===(o=t.entities)||void 0===o?void 0:o[i];return Object.assign(Object.assign({},e),{color:this._formatColor(null==r?void 0:r.color)||e.color||this._getDefaultColor(i),lineWidth:null!==(a=null!==(n=null==r?void 0:r.line_width)&&void 0!==n?n:e.lineWidth)&&void 0!==a?a:2,showPoints:!1!==(null==r?void 0:r.show_points),fillArea:!0===(null==r?void 0:r.fill_area),lineStyle:(null==r?void 0:r.line_style)||e.lineStyle||"solid"})}));let s=r;t.normalize_values&&(s=r.map((t=>{const e=Math.max(...t.values),i=Math.min(...t.values),o=e-i||1;return Object.assign(Object.assign({},t),{originalValues:t.values,values:t.values.map((t=>(t-i)/o*100)),normalizedMin:i,normalizedMax:e})})));const l=Math.max(...s.flatMap((t=>t.values))),d=Math.min(...s.flatMap((t=>t.values))),c=l-d,p=!1!==t.show_grid,u=t;let m=(t.design||{}).background_color||u.background_color;return m="transparent"===m?"var(--card-background-color)":m?this._formatColor(m):"var(--card-background-color, transparent)",Boolean(n&&"history"===n.source),q`
      <div
        style="width: 100%; height: ${i}px; position: relative; box-sizing: border-box; margin: 0; padding: 0;"
      >
        <!-- Debug info badge with refresh button -->

        ${!1!==t.show_tooltips?q`
              <div
                id="graph-tooltip-${t.id}"
                style="
              position: absolute;
              display: none;
              background: var(--card-background-color);
              border: 1px solid var(--divider-color);
              border-radius: 4px;
              padding: 8px 12px;
              font-size: 14px;
              color: var(--primary-text-color);
              box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
              pointer-events: none;
              z-index: 1000;
              white-space: nowrap;
            "
              ></div>
            `:""}
        <svg
          width="100%"
          height="100%"
          viewBox="0 0 300 100"
          preserveAspectRatio="xMidYMid meet"
          style="display: block; width: 100%; height: 100%; margin: 0; padding: 0;"
        >
          ${p?Y`${Array.from({length:4},((t,e)=>{const i=20+60*(e+1)/5;return Y`<line x1="0" y1="${i}" x2="300" y2="${i}" stroke="rgba(255,255,255,.08)" stroke-width="0.5" />`}))}`:""}
          ${s.map((e=>{var i;const n=e.values.map(((t,e)=>`${e/(a.length-1)*300},${c>0?90-(t-d)/c*70:90}`)),s=(e=>{if(!t.smooth_curves)return e.map(((t,e)=>{const[i,o]=t.split(",");return`${0===e?"M":"L"} ${i} ${o}`})).join(" ");if(e.length<2){const[t,i]=e[0].split(",");return`M ${t} ${i}`}let i="";const o=e.map((t=>{const[e,i]=t.split(",");return{x:parseFloat(e),y:parseFloat(i)}}));i=`M ${o[0].x} ${o[0].y}`;for(let t=0;t<o.length-1;t++){const e=o[Math.max(0,t-1)],n=o[t],a=o[t+1],r=o[Math.min(o.length-1,t+2)],s=.5;i+=` C ${n.x+(a.x-e.x)/6*s} ${n.y+(a.y-e.y)/6*s}, ${a.x-(r.x-n.x)/6*s} ${a.y-(r.y-n.y)/6*s}, ${a.x} ${a.y}`}return i})(n),l=n[n.length-1].split(",")[0],p=this._colorWithAlpha(e.color,.25),u="dashed"===e.lineStyle?"4 3":"dotted"===e.lineStyle?"1 3":"none";return Y`<g>
              ${!0===e.fillArea?Y`<path d="${s} L ${l} 100 L 0 100 Z" fill="${p}" stroke="none" />`:""}
              <path d="${s}" stroke="${e.color}" stroke-width="${null!==(i=e.lineWidth)&&void 0!==i?i:2}" fill="none" stroke-linecap="round" stroke-linejoin="round" stroke-dasharray="${u}" />
              ${!1!==e.showPoints?Y`${e.values.map(((i,n)=>{const s=n/(a.length-1)*300,l=c>0?90-(i-d)/c*70:90,p="transparent"===m?"var(--card-background-color)":m,u=`point-${t.id}-${n}-${r.indexOf(e)}`;return Y`
                        <circle 
                          id="${u}"
                          cx="${s}" 
                          cy="${l}" 
                          r="3" 
                          fill="${p}" 
                          stroke="${e.color}" 
                          stroke-width="1.5"
                          style="cursor: ${!1!==t.show_tooltips?"pointer":"default"};"
                          @mouseenter=${!1!==t.show_tooltips?r=>{const s=e.originalValues?e.originalValues[n]:i;let l=`${s}${e.unit||""}`;e.entityId&&(l=(0,Dt.formatEntityState)(o,e.entityId,{state:s,includeUnit:!0})),this._showTooltip(r,t.id,e.name,l,a[n])}:null}
                          @mouseleave=${!1!==t.show_tooltips?e=>this._hideTooltip(t.id,e):null}
                        >
                          ${!1!==t.show_tooltips?Y`
                            <animate 
                              attributeName="r" 
                              begin="mouseenter" 
                              dur="0.2s" 
                              from="3" 
                              to="5" 
                              fill="freeze" 
                            />
                            <animate 
                              attributeName="r" 
                              begin="mouseleave" 
                              dur="0.2s" 
                              from="5" 
                              to="3" 
                              fill="freeze" 
                            />
                          `:""}
                        </circle>
                      `}))}`:""}
            </g>`}))}
        </svg>
      </div>
    `}_renderLegend(t,e,i){return q`<div
      style="position:absolute; ${{top_left:"top:8px; left:8px; justify-content:flex-start;",top_right:"top:8px; right:8px; justify-content:flex-end;",bottom_left:"bottom:8px; left:8px; justify-content:flex-start;",bottom_right:"bottom:8px; right:8px; justify-content:flex-end;"}[e]}; display:flex; gap:12px; flex-wrap:wrap; font-size:12px; ${i||""}; z-index:2;"
    >
      ${t.map((t=>q`<div style="display:flex; align-items:center; gap:6px;">
            <span style="width:10px; height:10px; background:${t.color}; border-radius:2px;"></span
            ><span>${t.name}</span>
          </div>`))}
    </div>`}_colorWithAlpha(t,e){if(!t)return`rgba(33, 150, 243, ${e})`;if(t.startsWith("#")){const i=t.replace("#",""),o=parseInt(3===i.length?i.split("").map((t=>t+t)).join(""):i,16);return`rgba(${o>>16&255}, ${o>>8&255}, ${255&o}, ${e})`}return t.startsWith("rgb(")?t.replace("rgb(","rgba(").replace(")",`, ${e})`):t}_renderBarChart(t,e,i,o,n){const a=Math.max(...e.map((t=>t.value)));return q`
      <div
        style="
          width: 100%;
          height: ${i}px;
          display: flex;
          align-items: flex-end;
          justify-content: space-around;
          gap: 10px;
          padding: 10px 0;
        "
      >
        ${e.map((t=>{const e=a>0?t.value/a*(i-40):0;return q`
            <div
              style="
                display: flex;
                flex-direction: column;
                align-items: center;
                flex: 1;
                max-width: 80px;
              "
            >
              <div
                style="
                  font-size: 12px;
                  ${o||""};
                  margin-bottom: 5px;
                "
              >
                ${(()=>{let e=`${t.value}${t.unit||""}`;if(n&&t.entityId)try{e=(0,Dt.formatEntityState)(n,t.entityId,{state:t.value,includeUnit:!0})}catch(t){}return e})()}
              </div>
              <div
                style="
                  width: 100%;
                  height: ${e}px;
                  background: ${t.color};
                  border-radius: 4px 4px 0 0;
                  transition: height 0.3s ease;
                "
              ></div>
              <div
                style="
                  font-size: 10px;
                  ${o||""};
                  opacity: 0.8;
                  margin-top: 5px;
                  text-align: center;
                  overflow: hidden;
                  text-overflow: ellipsis;
                  white-space: nowrap;
                  width: 100%;
                "
              >
                ${t.name}
              </div>
            </div>
          `}))}
      </div>
    `}_showTooltip(t,e,i,o,n){const a=t.target,r=a.closest("div"),s=null==r?void 0:r.querySelector(`#graph-tooltip-${e}`);if(!s||!r)return;s.innerHTML=`\n      <div style="font-weight: 600; color: var(--primary-text-color); margin-bottom: 4px;">${i}</div>\n      <div style="color: var(--secondary-text-color); font-size: 12px;">${n}</div>\n      <div style="font-size: 16px; margin-top: 4px;">${o}</div>\n    `;const l=r.getBoundingClientRect(),d=a.getBoundingClientRect(),c=d.left-l.left+d.width/2,p=d.top-l.top;s.style.display="block",s.style.left=`${c}px`,s.style.top=p-10+"px",s.style.transform="translate(-50%, -100%)"}_hideTooltip(t,e){if(e){const i=e.currentTarget,o=null==i?void 0:i.closest("div"),n=null==o?void 0:o.querySelector(`#graph-tooltip-${t}`);if(n)return void(n.style.display="none")}document.querySelectorAll(`#graph-tooltip-${t}`).forEach((t=>{t.style.display="none"}))}_generateTimePoints(t){const e=[],i=new Date;let o=12,n="hour";switch(t){case"1h":o=12,n="5min";break;case"24h":o=24,n="hour";break;case"7d":o=7,n="day";break;case"30d":o=30,n="day";break;case"90d":o=12,n="week";break;case"365d":o=12,n="month"}for(let t=o-1;t>=0;t--){const o=new Date(i);"5min"===n?(o.setMinutes(o.getMinutes()-5*t),e.push(o.toLocaleTimeString([],{hour:"2-digit",minute:"2-digit"}))):"hour"===n?(o.setHours(o.getHours()-t),e.push(o.toLocaleTimeString([],{hour:"2-digit"}))):"day"===n?(o.setDate(o.getDate()-t),e.push(o.toLocaleDateString([],{month:"short",day:"numeric"}))):"week"===n?(o.setDate(o.getDate()-7*t),e.push(o.toLocaleDateString([],{month:"short",day:"numeric"}))):"month"===n&&(o.setMonth(o.getMonth()-t),e.push(o.toLocaleDateString([],{month:"short"})))}return e}_generateTimeSeriesData(t,e,i){const o=[];let n=isNaN(t)?50:t;const a=i.toLowerCase().includes("odometer")||i.toLowerCase().includes("counter")||i.toLowerCase().includes("total")||i.toLowerCase().includes("mileage"),r=i.toLowerCase().includes("energy")||i.toLowerCase().includes("kwh");let s=this._hashString(i);a&&n>1e3&&(n*=.95);for(let i=0;i<e;i++){const i=(s=1664525*s+1013904223>>>0,(4294967295&s)/4294967296);if(a){const o=.05*t/e;n=n+o+i*o*.5}else if(r)n+=.1*t/e*i;else{const t=(i-.5)*n*.1;n=Math.max(0,n+t)}o.push(Math.round(10*n)/10)}return o}_hashString(t){let e=2166136261;for(let i=0;i<t.length;i++)e^=t.charCodeAt(i),e=Math.imul(e,16777619);return e>>>0}_triggerHistoryLoad(t,e){this._historyLoading[t.id]||(this._historyLoading[t.id]=!0,this._deferredHistoryScheduled[t.id]=!0,this._fetchHistoryDataAsync(t,e))}_loadHistoryData(t,e){if(t.entities&&0!==t.entities.length){if(!this._historyData[t.id]){const e=this._tryReadCache(t);e&&(this._historyData[t.id]=Object.assign(Object.assign({},e),{source:"cache"}))}if(!this._historyData[t.id]){const i=this._tryFastHistoryPath(t,e);i&&(this._historyData[t.id]=i)}this._historyLoading[t.id]||this._deferredHistoryScheduled[t.id]||(this._deferredHistoryScheduled[t.id]=!0,this._historyLoading[t.id]=!0,this._fetchHistoryDataAsync(t,e))}}_tryFastHistoryPath(t,e){try{if(0===t.entities.filter((t=>t.entity)).map((t=>t.entity)).length)return null;const i=this._generateTimePoints(t.time_period),o=t.entities.filter((t=>t.entity)).map(((t,o)=>{var n;const a=e.states[t.entity];if(!a)return null;let r=0;r=t.attribute&&a.attributes[t.attribute]?parseFloat(a.attributes[t.attribute])||0:parseFloat(a.state)||0;const s=new Array(i.length).fill(r);return{name:t.name||a.attributes.friendly_name||t.entity,color:this._formatColor(t.color)||this._getDefaultColor(o),values:s,lineWidth:null!==(n=t.line_width)&&void 0!==n?n:2,showPoints:!1!==t.show_points,fillArea:!0===t.fill_area,lineStyle:t.line_style||"solid",unit:(null==a?void 0:a.attributes.unit_of_measurement)||"",entityId:t.entity}})).filter((t=>null!==t));if(0===o.length)return null;const n=o.flatMap((t=>t.values));return{timePoints:i,datasets:o,min:Math.min(...n),max:Math.max(...n),lastUpdated:Date.now(),source:"fast-path"}}catch(t){return null}}async _fetchHistoryDataAsync(t,e){try{const i=new Date;let o=24;switch(t.time_period){case"1h":o=1;break;case"3h":o=3;break;case"6h":o=6;break;case"12h":o=12;break;case"24h":default:o=24;break;case"2d":o=48;break;case"7d":o=168;break;case"30d":o=720;break;case"90d":o=2160;break;case"365d":o=8760}const n=new Date(i.getTime()-60*o*60*1e3),a=t.entities.filter((t=>t.entity)).map((t=>t.entity));if(0===a.length)return;window.ultraCardGraphDebug={entityIds:a,startTime:n.toISOString(),endTime:i.toISOString(),status:"fetching"},Math.min(100,4*o),a.forEach((t=>{e.states[t]}));let r={};try{let t,o;try{o=await e.callWS({type:"history/history_during_period",start_time:n.toISOString(),end_time:i.toISOString(),entity_ids:a,include_start_time_state:!0,significant_changes_only:!1,minimal_response:!1}),t=o&&"object"==typeof o?a.map((t=>o[t]||[])).filter((t=>t.length>0)):[]}catch(o){const r=n.toISOString();t=await e.callApi("GET",`history/period/${r}`,{filter_entity_id:a.join(","),end_time:i.toISOString()})}if(window.ultraCardGraphDebug.response=t,window.ultraCardGraphDebug.status="success",o&&"object"==typeof o&&!Array.isArray(o)?Object.entries(o).forEach((([t,e])=>{Array.isArray(e)&&e.length>0&&(r[t]=e)})):Array.isArray(t)&&t.forEach((t=>{if(Array.isArray(t)&&t.length>0){const e=t[0].entity_id;r[e]=t}})),0===Object.keys(r).length)throw new Error("No history data returned from API")}catch(t){window.ultraCardGraphDebug.error=t,window.ultraCardGraphDebug.errorDetails={message:t.message,status:t.status,statusText:t.statusText,body:t.body,stack:t.stack},window.ultraCardGraphDebug.status="error";for(const t of a){const i=e.states[t];i&&(r[t]=[{entity_id:t,state:i.state,last_changed:(new Date).toISOString(),last_updated:(new Date).toISOString(),attributes:i.attributes}])}}const s=this._generateTimePoints(t.time_period),l=t.entities.map(((t,o)=>{var a;if(!t.entity)return null;let l;if(Array.isArray(r))l=r;else{if(!r[t.entity])return null;l=r[t.entity]}const d=e.states[t.entity],c=this._processHistoryData(l,s,t.attribute,n,i);return{name:t.name||(null==d?void 0:d.attributes.friendly_name)||t.entity,color:this._formatColor(t.color)||this._getDefaultColor(o),values:c,lineWidth:null!==(a=t.line_width)&&void 0!==a?a:2,showPoints:!1!==t.show_points,fillArea:!0===t.fill_area,lineStyle:t.line_style||"solid",unit:(null==d?void 0:d.attributes.unit_of_measurement)||"",entityId:t.entity}})).filter((t=>null!==t)),d=l.flatMap((t=>t.values)),c=Math.min(...d),p=Math.max(...d);this._historyData[t.id]={timePoints:s,datasets:l,min:c,max:p,lastUpdated:Date.now(),source:"history"},this._historyLoading[t.id]=!1,this._writeCache(t,this._historyData[t.id]),this.requestUpdate()}catch(e){this._historyError[t.id]="Failed to load history data",this._historyLoading[t.id]=!1,this.requestUpdate()}}_processHistoryData(t,e,i,o,n){if(!t||0===t.length)return new Array(e.length).fill(0);const a=[],r=t=>{if(null==t)return null;if("number"==typeof t&&isFinite(t))return t;const e=String(t).trim().toLowerCase();if("unknown"===e||"unavailable"===e||"none"===e||"null"===e)return null;const i=parseFloat(e);return isNaN(i)?null:i},s=(null==o?void 0:o.getTime())||Date.now()-864e5,l=((null==n?void 0:n.getTime())||Date.now())-s,d=t.map((t=>{let e;if(void 0!==t.s&&void 0!==t.lu)e={state:t.s,attributes:t.a||{},timestamp:1e3*t.lu};else{if(void 0===t.state||void 0===t.last_changed)return null;e={state:t.state,attributes:t.attributes||{},timestamp:new Date(t.last_changed).getTime()}}return"unavailable"===e.state||"unknown"===e.state?null:e})).filter((t=>null!==t)).sort(((t,e)=>t.timestamp-e.timestamp));return e.forEach(((t,o)=>{const n=o/(e.length-1),c=s+l*n;let p=null;for(let t=d.length-1;t>=0;t--){const e=d[t];if(e.timestamp<=c){const t=i?e.attributes[i]:e.state,o=r(t);if(null!==o){p=o;break}}}if(null===p)for(let t=d.length-1;t>=0;t--){const e=d[t],o=i?e.attributes[i]:e.state,n=r(o);if(null!==n){p=n;break}}a.push(null!=p?p:0)})),a}_coerceNumber(t){if(null==t)return null;if("number"==typeof t&&isFinite(t))return t;const e=String(t).trim().toLowerCase();if("unknown"===e||"unavailable"===e||"none"===e||"null"===e)return null;const i=parseFloat(e);return isNaN(i)?null:i}_getDefaultColor(t){const e=["#2196F3","#4CAF50","#FF9800","#F44336","#9C27B0","#00BCD4","#FFEB3B","#795548","#607D8B","#E91E63"];return e[t%e.length]}_addEntity(t,e){var i;const o={id:this.generateId("entity"),entity:"",name:"",attribute:"",color:this._getDefaultColor((null===(i=t.entities)||void 0===i?void 0:i.length)||0),show_points:!0,fill_area:!0,line_width:2,line_style:"solid"};e({entities:[...t.entities||[],o]})}_removeEntity(t,e,i){const o=[...t.entities||[]];o.splice(e,1),i({entities:o})}_updateEntity(t,e,i,o){const n=[...t.entities||[]];n[e]=Object.assign(Object.assign({},n[e]),i),delete this._historyData[t.id],delete this._historyError[t.id],delete this._historyLoading[t.id],delete this._deferredHistoryScheduled[t.id],o({entities:n})}_toggleEntityOptions(t,e){var i;t.stopPropagation();const o=null===(i=t.target)||void 0===i?void 0:i.closest(".entity-card"),n=null==o?void 0:o.querySelector(".entity-advanced-options"),a=null==o?void 0:o.querySelector(".entity-toggle-btn");n&&a&&(this.expandedEntities.has(e)?(this.expandedEntities.delete(e),n.style.maxHeight="0",n.style.opacity="0",n.style.marginTop="0",n.style.borderTop="none",a.style.transform="rotate(0deg)"):(this.expandedEntities.add(e),n.style.maxHeight=n.scrollHeight+"px",n.style.opacity="1",n.style.marginTop="16px",n.style.borderTop="1px solid var(--divider-color)",a.style.transform="rotate(180deg)"))}_getEntityAttributes(t,e){if(!t||!e.states[t])return[];const i=e.states[t].attributes;return Object.keys(i).filter((t=>!["friendly_name","icon","entity_picture"].includes(t))).map((t=>({value:t,label:t})))}_renderSizeControl(t,e,i,o,n,a,r,s,l,d){return q`
      <div class="field-container" style="margin-bottom: 16px;">
        <div
          class="field-title"
          style="font-size: 16px; font-weight: 600; color: var(--primary-text-color); margin-bottom: 4px;"
        >
          ${l}
        </div>
        <div
          class="field-description"
          style="font-size: 13px; color: var(--secondary-text-color); margin-bottom: 12px;"
        >
          ${d}
        </div>
        <style>
          .number-range-control {
            display: flex;
            gap: 8px;
            align-items: center;
          }

          .range-slider {
            flex: 0 0 65%;
            height: 6px;
            background: var(--divider-color);
            border-radius: 3px;
            outline: none;
            appearance: none;
            -webkit-appearance: none;
            cursor: pointer;
            transition: all 0.2s ease;
            min-width: 0;
          }

          .range-slider::-webkit-slider-thumb {
            appearance: none;
            -webkit-appearance: none;
            width: 18px;
            height: 18px;
            background: var(--primary-color);
            border-radius: 50%;
            cursor: pointer;
            transition: all 0.2s ease;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
          }

          .range-slider::-moz-range-thumb {
            width: 18px;
            height: 18px;
            background: var(--primary-color);
            border-radius: 50%;
            cursor: pointer;
            border: none;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
          }

          .range-slider:hover {
            background: var(--primary-color);
            opacity: 0.7;
          }

          .range-slider:hover::-webkit-slider-thumb {
            transform: scale(1.1);
          }

          .range-slider:hover::-moz-range-thumb {
            transform: scale(1.1);
          }

          .range-input {
            flex: 0 0 20%;
            padding: 6px 8px !important;
            border: 1px solid var(--divider-color);
            border-radius: 4px;
            background: var(--secondary-background-color);
            color: var(--primary-text-color);
            font-size: 13px;
            text-align: center;
            transition: all 0.2s ease;
            box-sizing: border-box;
          }

          .range-input:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 2px rgba(var(--rgb-primary-color), 0.2);
          }

          .range-reset-btn {
            width: 32px;
            height: 32px;
            padding: 0;
            border: 1px solid var(--divider-color);
            border-radius: 4px;
            background: var(--secondary-background-color);
            color: var(--primary-text-color);
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.2s ease;
            flex-shrink: 0;
          }

          .range-reset-btn:hover {
            background: var(--primary-color);
            color: var(--text-primary-color);
            border-color: var(--primary-color);
          }

          .range-reset-btn ha-icon {
            font-size: 14px;
          }
        </style>
        <div class="number-range-control">
          <input
            type="range"
            class="range-slider"
            min="${a}"
            max="${r}"
            step="1"
            .value="${n}"
            @input=${n=>{const a=n.target,r=parseInt(a.value);e>=0?this._updateEntity(t,e,{[o]:r},i):i({[o]:r})}}
          />
          <input
            type="number"
            class="range-input"
            min="${a}"
            max="${r}"
            step="1"
            .value="${n}"
            @input=${n=>{const a=n.target,r=parseInt(a.value);isNaN(r)||(e>=0?this._updateEntity(t,e,{[o]:r},i):i({[o]:r}))}}
            @keydown=${n=>{if("ArrowUp"===n.key||"ArrowDown"===n.key){n.preventDefault();const l=n.target,d=parseInt(l.value)||s,c="ArrowUp"===n.key?1:-1,p=Math.max(a,Math.min(r,d+c));e>=0?this._updateEntity(t,e,{[o]:p},i):i({[o]:p})}}}
          />
          <button
            class="range-reset-btn"
            @click=${()=>{e>=0?this._updateEntity(t,e,{[o]:s},i):i({[o]:s})}}
            title="Reset to default (${s})"
          >
            <ha-icon icon="mdi:refresh"></ha-icon>
          </button>
        </div>
      </div>
    `}hasActiveLink(t){const e=t.tap_action&&"default"!==t.tap_action.action&&"nothing"!==t.tap_action.action,i=t.hold_action&&"default"!==t.hold_action.action&&"nothing"!==t.hold_action.action,o=t.double_tap_action&&"default"!==t.double_tap_action.action&&"nothing"!==t.double_tap_action.action;return e||i||o}handleClick(t,e,i){t.preventDefault(),this.clickTimeout&&clearTimeout(this.clickTimeout),this.clickTimeout=setTimeout((()=>{this.handleTapAction(t,e,i)}),300)}handleDoubleClick(t,e,i){t.preventDefault(),this.clickTimeout&&(clearTimeout(this.clickTimeout),this.clickTimeout=null),this.handleDoubleAction(t,e,i)}handleMouseDown(t,e,i){this.isHolding=!1,this.holdTimeout=setTimeout((()=>{this.isHolding=!0,this.handleHoldAction(t,e,i)}),500)}handleMouseUp(t,e,i){this.holdTimeout&&(clearTimeout(this.holdTimeout),this.holdTimeout=null)}handleMouseLeave(t,e,i){this.holdTimeout&&(clearTimeout(this.holdTimeout),this.holdTimeout=null),this.isHolding=!1}handleTouchStart(t,e,i){this.handleMouseDown(t,e,i)}handleTouchEnd(t,e,i){this.handleMouseUp(t,e,i)}handleTapAction(t,e,i){if(!this.isHolding&&e.tap_action&&"default"!==e.tap_action.action&&"nothing"!==e.tap_action.action){const o=Object.assign({},e.tap_action);wt.handleAction(o,i,t.target)}}handleHoldAction(t,e,i){if(e.hold_action&&"default"!==e.hold_action.action&&"nothing"!==e.hold_action.action){const o=Object.assign({},e.hold_action);wt.handleAction(o,i,t.target)}}handleDoubleAction(t,e,i){if(e.double_tap_action&&"default"!==e.double_tap_action.action&&"nothing"!==e.double_tap_action.action){const o=Object.assign({},e.double_tap_action);wt.handleAction(o,i,t.target)}}styleObjectToCss(t){return Object.entries(t).map((([t,e])=>`${this.camelToKebab(t)}: ${e}`)).join("; ")}camelToKebab(t){return t.replace(/([a-z0-9]|(?=[A-Z]))([A-Z])/g,"$1-$2").toLowerCase()}addPixelUnit(t){return t?/^\d+$/.test(t)?`${t}px`:/^[\d\s]+$/.test(t)?t.split(" ").map((t=>t.trim()?`${t}px`:t)).join(" "):t:t}getPaddingCSS(t){return t.padding_top||t.padding_bottom||t.padding_left||t.padding_right?`${this.addPixelUnit(t.padding_top)||"0px"} ${this.addPixelUnit(t.padding_right)||"0px"} ${this.addPixelUnit(t.padding_bottom)||"0px"} ${this.addPixelUnit(t.padding_left)||"0px"}`:"0"}getMarginCSS(t){return t.margin_top||t.margin_bottom||t.margin_left||t.margin_right?`${this.addPixelUnit(t.margin_top)||"0px"} ${this.addPixelUnit(t.margin_right)||"0px"} ${this.addPixelUnit(t.margin_bottom)||"0px"} ${this.addPixelUnit(t.margin_left)||"0px"}`:"0"}getBackgroundCSS(t){return t.background_color||"transparent"}getBackgroundImageCSS(t,e){var i,o;const n=t.background_image_type,a=t.background_image,r=t.background_image_entity;if(!n||"none"===n)return"none";switch(n){case"upload":if(a)return`url("${Kt(e,a)}")`;break;case"url":if(a)return`url("${a}")`;break;case"entity":if(r&&e){const t=e.states[r];if(t){const n=(null===(i=t.attributes)||void 0===i?void 0:i.entity_picture)||(null===(o=t.attributes)||void 0===o?void 0:o.image)||("string"==typeof t.state?t.state:"");if(n&&"unknown"!==n&&"unavailable"!==n)return`url("${Kt(e,n)}")`}}}return"none"}getBorderCSS(t){const e=t.border;return e&&"none"!==e.style?`${e.width||1}px ${e.style||"solid"} ${e.color||"#ccc"}`:"none"}validate(t){const e=t,i=[...super.validate(t).errors];return e.chart_type||i.push("Chart type is required"),e.entities&&0!==e.entities.length?e.entities.forEach(((t,e)=>{t.entity||i.push(`Entity ${e+1}: Entity selection is required`)})):i.push("At least one entity is required"),"custom"===e.time_period&&(e.custom_time_start||i.push("Custom start time is required"),e.custom_time_end||i.push("Custom end time is required")),!e.template_mode||e.template&&""!==e.template.trim()||i.push("Template code is required when template mode is enabled"),{valid:0===i.length,errors:i}}getStyles(){return'\n      .uc-graphs-module {\n        width: 100%;\n        box-sizing: border-box;\n        margin: 0;\n        padding: 0;\n      }\n\n      .entity-card {\n        transition: all 0.2s ease;\n      }\n\n      .entity-card:hover {\n        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n      }\n\n      .entity-advanced-options {\n        transition: max-height 0.3s ease, opacity 0.2s ease;\n        opacity: 0;\n      }\n\n      .entity-advanced-options[data-expanded="true"] {\n        opacity: 1;\n      }\n\n      .entity-toggle-button ha-icon {\n        transition: transform 0.2s ease;\n      }\n\n      .entity-header {\n        cursor: pointer;\n      }\n\n      .entity-header:hover .entity-toggle-button {\n        color: var(--primary-color);\n      }\n\n      .uc-graphs-general-tab,\n      .uc-graphs-actions-tab,\n      .uc-graphs-other-tab {\n        padding: 16px;\n      }\n\n      .entities-repeater {\n        margin: 16px 0;\n      }\n\n      .entity-item {\n        background: var(--card-background-color);\n        border: 1px solid var(--divider-color);\n        border-radius: 8px;\n        padding: 16px;\n        margin-bottom: 12px;\n      }\n\n      .entity-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        margin-bottom: 12px;\n      }\n\n      .entity-number {\n        font-weight: 500;\n        color: var(--primary-text-color);\n      }\n\n      .chart-container {\n        position: relative;\n        width: 100%;\n        margin: 0 !important;\n        padding: 0 !important;\n        box-sizing: border-box;\n      }\n\n      .chart-title {\n        font-weight: 500;\n        margin-bottom: 8px;\n      }\n\n      .chart-legend {\n        margin-top: 12px;\n      }\n\n      .chart-legend.legend-top {\n        margin-top: 0;\n        margin-bottom: 12px;\n      }\n\n      .chart-legend.legend-left,\n      .chart-legend.legend-right {\n        position: absolute;\n        top: 50%;\n        transform: translateY(-50%);\n      }\n\n      .chart-legend.legend-left {\n        left: 0;\n      }\n\n      .chart-legend.legend-right {\n        right: 0;\n      }\n\n      .graphs-module-clickable {\n        cursor: pointer;\n        color: inherit;\n        text-decoration: inherit;\n      }\n\n      .graphs-module-clickable.hover-enabled:hover {\n        transform: scale(1.02);\n        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n      }\n\n      /* Standard field styling */\n      .field-title {\n        font-size: 16px !important;\n        font-weight: 600 !important;\n    \n        margin-bottom: 4px !important;\n      }\n\n      .field-description {\n        font-size: 13px !important;\n        color: var(--secondary-text-color) !important;\n        margin-bottom: 12px !important;\n        opacity: 0.8 !important;\n        line-height: 1.4 !important;\n      }\n\n      .section-title {\n        font-size: 18px !important;\n        font-weight: 700 !important;\n        color: var(--primary-color) !important;\n        text-transform: uppercase !important;\n        letter-spacing: 0.5px !important;\n      }\n\n      /* Conditional fields grouping */\n      .conditional-fields-group {\n        margin-top: 16px;\n        border-left: 4px solid var(--primary-color);\n        background: rgba(var(--rgb-primary-color), 0.08);\n        border-radius: 0 8px 8px 0;\n        overflow: hidden;\n        transition: all 0.2s ease;\n        animation: slideInFromLeft 0.3s ease-out;\n      }\n\n      @keyframes slideInFromLeft {\n        from {\n          opacity: 0;\n          transform: translateX(-10px);\n        }\n        to {\n          opacity: 1;\n          transform: translateX(0);\n        }\n      }\n\n      /* Number range control styles */\n      .number-range-control {\n        display: flex;\n        gap: 8px;\n        align-items: center;\n      }\n\n      .range-slider {\n        flex: 0 0 65%;\n        height: 6px;\n        background: var(--divider-color);\n        border-radius: 3px;\n        outline: none;\n        appearance: none;\n        -webkit-appearance: none;\n        cursor: pointer;\n        transition: all 0.2s ease;\n        min-width: 0;\n      }\n\n      .range-slider::-webkit-slider-thumb {\n        appearance: none;\n        -webkit-appearance: none;\n        width: 18px;\n        height: 18px;\n        background: var(--primary-color);\n        border-radius: 50%;\n        cursor: pointer;\n        transition: all 0.2s ease;\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n      }\n\n      .range-slider::-moz-range-thumb {\n        width: 18px;\n        height: 18px;\n        background: var(--primary-color);\n        border-radius: 50%;\n        cursor: pointer;\n        border: none;\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n      }\n\n      .range-slider:hover {\n        background: var(--primary-color);\n        opacity: 0.7;\n      }\n\n      .range-slider:hover::-webkit-slider-thumb {\n        transform: scale(1.1);\n      }\n\n      .range-slider:hover::-moz-range-thumb {\n        transform: scale(1.1);\n      }\n\n      .range-input {\n        flex: 0 0 20%;\n        padding: 6px 8px !important;\n        border: 1px solid var(--divider-color);\n        border-radius: 4px;\n        background: var(--secondary-background-color);\n        color: var(--primary-text-color);\n        font-size: 13px;\n        text-align: center;\n        transition: all 0.2s ease;\n        box-sizing: border-box;\n      }\n\n      .range-input:focus {\n        outline: none;\n        border-color: var(--primary-color);\n        box-shadow: 0 0 0 2px rgba(var(--rgb-primary-color), 0.2);\n      }\n\n      .range-reset-btn {\n        width: 32px;\n        height: 32px;\n        padding: 0;\n        border: 1px solid var(--divider-color);\n        border-radius: 4px;\n        background: var(--secondary-background-color);\n        color: var(--primary-text-color);\n        cursor: pointer;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        transition: all 0.2s ease;\n        flex-shrink: 0;\n      }\n\n      .range-reset-btn:hover {\n        background: var(--primary-color);\n        color: var(--text-primary-color);\n        border-color: var(--primary-color);\n      }\n\n      .range-reset-btn ha-icon {\n        font-size: 14px;\n      }\n\n      /* Responsive styles */\n      @media (max-width: 768px) {\n        .chart-container {\n          min-height: 200px;\n        }\n      }\n\n      /* Animation styles */\n      .uc-graphs-module[data-animation="true"] {\n        animation: fadeIn 0.5s ease-in-out;\n      }\n\n      @keyframes fadeIn {\n        from {\n          opacity: 0;\n          transform: translateY(10px);\n        }\n        to {\n          opacity: 1;\n          transform: translateY(0);\n        }\n      }\n\n      /* Hover effects */\n      .uc-graphs-module:hover {\n        transition: box-shadow 0.3s ease;\n      }\n\n      /* Loading state */\n      .chart-loading {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        height: 100%;\n        color: var(--secondary-text-color);\n      }\n\n      .chart-error {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        height: 100%;\n        color: var(--error-color);\n        text-align: center;\n        padding: 20px;\n      }\n    '}cleanup(){this.clickTimeout&&clearTimeout(this.clickTimeout),this.holdTimeout&&clearTimeout(this.holdTimeout),this._updateInterval&&clearInterval(this._updateInterval)}requestUpdate(){"undefined"!=typeof window&&window.dispatchEvent(new CustomEvent("ultra-card-update"))}}class ce{constructor(){this.modules=new Map,this.modulesByCategory=new Map,this.registerCoreModules()}static getInstance(){return ce.instance||(ce.instance=new ce),ce.instance}registerCoreModules(){this.registerModule(new St),this.registerModule(new zt),this.registerModule(new Pt),this.registerModule(new Mt),this.registerModule(new Jt),this.registerModule(new Zt),this.registerModule(new ee),this.registerModule(new ie),this.registerModule(new oe),this.registerModule(new ne),this.registerModule(new ae),this.registerModule(new de)}registerModule(t){const e=t.metadata.type;this.modules.has(e)&&console.warn(`Module with type "${e}" is already registered. Overriding...`),this.modules.set(e,t),this.updateCategoryMap(t)}unregisterModule(t){return!!this.modules.get(t)&&(this.modules.delete(t),this.updateCategoryMaps(),console.log(`❌ Unregistered module: ${t}`),!0)}getModule(t){return this.modules.get(t)}getAllModules(){return Array.from(this.modules.values())}getModulesByCategory(t){return this.modulesByCategory.get(t)||[]}getCategories(){return Array.from(this.modulesByCategory.keys())}getAllModuleMetadata(){return this.getAllModules().map((t=>t.metadata))}searchModules(t){const e=t.toLowerCase();return this.getAllModules().filter((t=>{const i=t.metadata;return i.title.toLowerCase().includes(e)||i.description.toLowerCase().includes(e)||i.tags.some((t=>t.toLowerCase().includes(e)))||i.type.toLowerCase().includes(e)}))}createDefaultModule(t,e,i){console.log(`Creating default module for type: ${t}`);const o=this.getModule(t);if(!o)return console.error(`Module type "${t}" not found in registry`),console.log("Available module types:",Array.from(this.modules.keys())),null;try{const t=o.createDefault(e,i);return console.log("Successfully created default module:",t),t}catch(e){return console.error(`Error creating default module for type "${t}":`,e),null}}validateModule(t){const e=this.getModule(t.type);return e?e.validate(t):{valid:!1,errors:[`Unknown module type: ${t.type}`]}}getAllModuleStyles(){let t="";for(const e of this.getAllModules())e.getStyles&&(t+=`\n/* Styles for ${e.metadata.title} */\n`,t+=e.getStyles(),t+="\n");return t+=this.getCommonFormStyles(),t}isModuleRegistered(t){return this.modules.has(t)}getRegistryStats(){const t=this.getAllModules(),e={},i=new Set;return t.forEach((t=>{const o=t.metadata.category;e[o]=(e[o]||0)+1,i.add(t.metadata.author)})),{totalModules:t.length,modulesByCategory:e,authors:Array.from(i)}}updateCategoryMap(t){const e=t.metadata.category;this.modulesByCategory.has(e)||this.modulesByCategory.set(e,[]);const i=this.modulesByCategory.get(e),o=i.findIndex((e=>e.metadata.type===t.metadata.type));o>=0?i[o]=t:i.push(t)}updateCategoryMaps(){this.modulesByCategory.clear(),this.getAllModules().forEach((t=>this.updateCategoryMap(t)))}getCommonFormStyles(){return'\n      /* Common form styles for all modules */\n      .module-general-settings {\n        padding: 0;\n      }\n      \n      .form-field {\n        margin-bottom: 16px;\n      }\n      \n      .form-label {\n        display: block;\n        font-weight: 500;\n        margin-bottom: 4px;\n        font-size: 14px;\n        color: var(--primary-text-color);\n      }\n      \n      .form-description {\n        font-size: 12px;\n        color: var(--secondary-text-color);\n        margin-top: 4px;\n        line-height: 1.3;\n      }\n\n      /* Container Module Global Styles */\n      .container-module {\n        --container-drag-handle-opacity: 0.8;\n        --container-badge-opacity: 0.9;\n      }\n\n      .container-module:hover {\n        --container-drag-handle-opacity: 1;\n        --container-badge-opacity: 1;\n      }\n\n      /* Container-specific colors that can be overridden by individual modules */\n      .horizontal-module-preview.container-module {\n        --container-primary-color: #9c27b0; /* Purple for horizontal */\n        --container-secondary-color: #e1bee7;\n        --container-accent-color: #7b1fa2;\n        --container-border-color: #ba68c8;\n      }\n\n      .vertical-module-preview.container-module {\n        --container-primary-color: #3f51b5; /* Indigo for vertical */\n        --container-secondary-color: #c5cae9;\n        --container-accent-color: #303f9f;\n        --container-border-color: #7986cb;\n      }\n      \n      .form-field input[type="text"],\n      .form-field input[type="number"],\n      .form-field select,\n      .form-field textarea {\n        width: 100%;\n        padding: 8px 12px;\n        border: 1px solid var(--divider-color);\n        border-radius: 4px;\n        background: var(--secondary-background-color);\n        color: var(--primary-text-color);\n        font-size: 14px;\n        font-family: inherit;\n        box-sizing: border-box;\n      }\n      \n      .form-field input[type="color"] {\n        width: 60px;\n        height: 36px;\n        padding: 0;\n        border: 1px solid var(--divider-color);\n        border-radius: 4px;\n        cursor: pointer;\n        background: none;\n      }\n      \n      .form-field input:focus,\n      .form-field select:focus,\n      .form-field textarea:focus {\n        outline: none;\n        border-color: var(--primary-color);\n        box-shadow: 0 0 0 1px var(--primary-color);\n      }\n      \n      .form-field textarea {\n        resize: vertical;\n        min-height: 60px;\n        font-family: monospace;\n      }\n      \n      .checkbox-wrapper {\n        display: flex;\n        align-items: center;\n        gap: 8px;\n        font-size: 14px;\n        cursor: pointer;\n        color: var(--primary-text-color);\n      }\n      \n      .checkbox-wrapper input[type="checkbox"] {\n        margin: 0;\n        cursor: pointer;\n      }\n      \n      .checkbox-group {\n        display: grid;\n        grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));\n        gap: 8px;\n        margin-top: 8px;\n      }\n    '}}const pe=()=>ce.getInstance();class ue{constructor(){this.hass=null,this.templateService=null}static getInstance(){return ue.instance||(ue.instance=new ue),ue.instance}setHass(t){this.hass=t,t&&(this.templateService=new kt(t))}evaluateDisplayConditions(t,e="always"){if(!this.hass)return console.warn("[LogicService] HomeAssistant instance not available"),!0;if("always"===e||!t||0===t.length)return!0;const i=t.filter((t=>!1!==t.enabled));if(0===i.length)return!0;const o=i.map((t=>this.evaluateSingleCondition(t)));switch(e){case"every":return o.every((t=>t));case"any":return o.some((t=>t));default:return!0}}evaluateModuleVisibility(t){if(!this.hass)return console.warn("[LogicService] HomeAssistant instance not available"),!0;if(t.template_mode&&t.template){const e={id:`template_${t.id}`,type:"template",template:t.template,enabled:!0};return this.evaluateTemplateCondition(e)}return this.evaluateDisplayConditions(t.display_conditions||[],t.display_mode||"always")}evaluateRowVisibility(t){if(!this.hass)return console.warn("[LogicService] HomeAssistant instance not available"),!0;if(t.template_mode&&t.template){const e={id:`template_${t.id}`,type:"template",template:t.template,enabled:!0};return this.evaluateTemplateCondition(e)}return this.evaluateDisplayConditions(t.display_conditions||[],t.display_mode||"always")}evaluateColumnVisibility(t){if(!this.hass)return console.warn("[LogicService] HomeAssistant instance not available"),!0;if(t.template_mode&&t.template){const e={id:`template_${t.id}`,type:"template",template:t.template,enabled:!0};return this.evaluateTemplateCondition(e)}return this.evaluateDisplayConditions(t.display_conditions||[],t.display_mode||"always")}evaluateSingleCondition(t){if(!t.enabled)return!0;switch(t.type){case"entity_state":return this.evaluateEntityStateCondition(t);case"entity_attribute":return this.evaluateEntityAttributeCondition(t);case"time":return this.evaluateTimeCondition(t);case"template":return this.evaluateTemplateCondition(t);case"entity":return console.log("[LogicService] Migrating legacy entity condition to entity_state"),this.evaluateEntityStateCondition(t);default:return console.warn("[LogicService] Unknown condition type:",t.type),!0}}evaluateEntityStateCondition(t){if(!t.entity||!this.hass)return!0;const e=this.hass.states[t.entity];if(!e)return console.warn(`[LogicService] Entity not found: ${t.entity}`),!0;const i=t.operator||"=",o=t.value,n=e.state;switch(i){case"=":return n===String(o);case"!=":return n!==String(o);case">":const t=this.tryParseNumber(n),e=this.tryParseNumber(o);return null!==t&&null!==e&&t>e;case">=":const a=this.tryParseNumber(n),r=this.tryParseNumber(o);return null!==a&&null!==r&&a>=r;case"<":const s=this.tryParseNumber(n),l=this.tryParseNumber(o);return null!==s&&null!==l&&s<l;case"<=":const d=this.tryParseNumber(n),c=this.tryParseNumber(o);return null!==d&&null!==c&&d<=c;case"contains":return String(n).toLowerCase().includes(String(o).toLowerCase());case"not_contains":return!String(n).toLowerCase().includes(String(o).toLowerCase());case"has_value":return null!=n&&""!==n;case"no_value":return null==n||""===n;default:return console.warn(`[LogicService] Unknown operator: ${i}`),!0}}evaluateEntityAttributeCondition(t){if(!t.entity||!t.attribute||!this.hass)return!0;const e=this.hass.states[t.entity];if(!e)return console.warn(`[LogicService] Entity not found: ${t.entity}`),!0;const i=e.attributes[t.attribute];if(void 0===i)return console.warn(`[LogicService] Attribute '${t.attribute}' not found on entity '${t.entity}'`),!0;const o=t.operator||"=",n=t.value,a=i;switch(o){case"=":return String(a)===String(n);case"!=":return String(a)!==String(n);case">":const t=this.tryParseNumber(a),e=this.tryParseNumber(n);return null!==t&&null!==e&&t>e;case">=":const i=this.tryParseNumber(a),r=this.tryParseNumber(n);return null!==i&&null!==r&&i>=r;case"<":const s=this.tryParseNumber(a),l=this.tryParseNumber(n);return null!==s&&null!==l&&s<l;case"<=":const d=this.tryParseNumber(a),c=this.tryParseNumber(n);return null!==d&&null!==c&&d<=c;case"contains":return String(a).toLowerCase().includes(String(n).toLowerCase());case"not_contains":return!String(a).toLowerCase().includes(String(n).toLowerCase());case"has_value":return null!=a&&""!==a;case"no_value":return null==a||""===a;default:return console.warn(`[LogicService] Unknown operator: ${o}`),!0}}evaluateTimeCondition(t){if(!t.time_from||!t.time_to)return!0;const e=new Date,i=60*e.getHours()+e.getMinutes(),[o,n]=t.time_from.split(":").map(Number),[a,r]=t.time_to.split(":").map(Number),s=60*o+n,l=60*a+r;return s<=l?i>=s&&i<=l:i>=s||i<=l}evaluateTemplateCondition(t){if(!t.template||!this.hass)return!0;try{const e=`logic_condition_${t.id}_${t.template}`;if(this.templateService)if(this.templateService.hasTemplateSubscription(e)){const t=this.templateService.getTemplateResult(e);if(void 0!==t)return t}else this.templateService.subscribeToTemplate(t.template,e,(()=>{}));this.hass.callApi&&this.hass.callApi("POST","template",{template:t.template}).then((t=>{const i=t.toLowerCase().trim();let o;if(["true","on","yes","1"].includes(i))o=!0;else if(["false","off","no","0","unavailable","unknown","none",""].includes(i))o=!1;else{const t=parseFloat(i);o=!isNaN(t)&&0!==t}this.templateService&&this.templateService._templateResults.set(e,o)})).catch((t=>{console.warn("[LogicService] Error evaluating template via API:",t)}));const i=t.template;if(i.includes("{% if ")&&i.includes(" %}")){const t=i.match(/\{\%\s*if\s+(.+?)\s*\%\}/);if(t){const e=t[1].match(/states\(['"]([^'"]+)['"]\)\s*(==|!=)\s*['"]([^'"]+)['"]/);if(e){const t=e[1],i=e[2],o=e[3],n=this.hass.states[t];if(n){const t=n.state;if("=="===i)return t===o;if("!="===i)return t!==o}}}}const o=/\{\{\s*states\(['"]([^'"]+)['"]\)\s*\}\}/g;let n,a=i;for(;null!==(n=o.exec(i));){const t=n[1],e=this.hass.states[t],i=e?e.state:"unknown";a=a.replace(n[0],i)}if(a!==i){const t=a.toLowerCase().trim();if(["true","on","yes","1"].includes(t))return!0;if(["false","off","no","0","unavailable","unknown","none",""].includes(t))return!1}return console.log(`[LogicService] Template condition evaluation fallback for: ${i}`),!0}catch(t){return console.warn("[LogicService] Error evaluating template condition:",t),!0}}tryParseNumber(t){if("number"==typeof t)return t;if("string"==typeof t){const e=parseFloat(t);return isNaN(e)?null:e}return null}evaluateLogicProperties(t){if(!t.logic_entity||!this.hass)return!0;const e={id:"logic-property",type:t.logic_attribute?"entity_attribute":"entity_state",entity:t.logic_entity,attribute:t.logic_attribute,operator:t.logic_operator||"=",value:t.logic_value,enabled:!0};return this.evaluateSingleCondition(e)}}const me=ue.getInstance();class ge{static getInstance(){return ge.instance||(ge.instance=new ge),ge.instance}validateAndCorrectConfig(t){const e=[],i=[];let o;try{o=JSON.parse(JSON.stringify(t))}catch(t){return{valid:!1,errors:["Invalid JSON structure"],warnings:[]}}return o.type||(o.type="custom:ultra-card",i.push("Added missing card type")),"custom:ultra-card"!==o.type&&e.push(`Invalid card type: ${o.type}`),o.layout||(o.layout={rows:[]},i.push("Added missing layout structure")),o.layout.rows||(o.layout.rows=[],i.push("Added missing rows array")),o.layout.rows=o.layout.rows.map(((t,o)=>{const n=this.validateAndCorrectRow(t,o);return e.push(...n.errors),i.push(...n.warnings),n.correctedRow})),o.layout.rows=o.layout.rows.filter((t=>null!==t)),{valid:0===e.length,errors:e,warnings:i,correctedConfig:o}}validateAndCorrectRow(t,e){const i=[],o=[];return t.id||(t.id=`row-${Date.now()}-${e}`,o.push(`Row ${e}: Added missing ID`)),t.columns&&Array.isArray(t.columns)||(t.columns=[{id:`col-${Date.now()}-0`,modules:[]}],o.push(`Row ${e}: Added missing columns array`)),t.columns=t.columns.map(((t,n)=>{const a=this.validateAndCorrectColumn(t,e,n);return i.push(...a.errors),o.push(...a.warnings),a.correctedColumn})).filter((t=>null!==t)),0===t.columns.length&&(t.columns=[{id:`col-${Date.now()}-fallback`,modules:[]}],o.push(`Row ${e}: Added fallback column`)),{correctedRow:t,errors:i,warnings:o}}validateAndCorrectColumn(t,e,i){const o=[],n=[];return t.id||(t.id=`col-${Date.now()}-${e}-${i}`,n.push(`Row ${e}, Column ${i}: Added missing ID`)),t.modules&&Array.isArray(t.modules)||(t.modules=[],n.push(`Row ${e}, Column ${i}: Added missing modules array`)),t.modules=t.modules.map(((t,a)=>{const r=this.validateAndCorrectModule(t,e,i,a);return r.valid?r.correctedModule?(n.push(...r.warnings||[]),r.correctedModule):t:(o.push(...r.errors),null)})).filter((t=>null!==t)),{correctedColumn:t,errors:o,warnings:n}}validateAndCorrectModule(t,e,i,o){const n=[],a=[],r=pe();if(t.id||(t.id=`${t.type||"unknown"}-${Date.now()}-${Math.random().toString(36).substr(2,9)}`,a.push("Module: Added missing ID")),!t.type)return n.push(`Module ${t.id}: Missing type`),{valid:!1,errors:n,warnings:a};if(!r.isModuleRegistered(t.type))return n.push(`Module ${t.id}: Unknown module type "${t.type}"`),{valid:!1,errors:n,warnings:a};const s=r.getModule(t.type);if(s){const e=s.validate(t);if(!e.valid)return n.push(...e.errors.map((e=>`Module ${t.id}: ${e}`))),{valid:!1,errors:n,warnings:a};const i=s.createDefault(t.id);return{valid:!0,errors:[],warnings:a,correctedModule:this.mergeWithDefaults(t,i)}}return{valid:!1,errors:[`Module ${t.id}: No handler found for type "${t.type}"`],warnings:a}}mergeWithDefaults(t,e){const i=Object.assign({},e);return Object.keys(t).forEach((o=>{void 0!==t[o]&&null!==t[o]&&("object"!=typeof t[o]||Array.isArray(t[o])||"object"!=typeof e[o]?i[o]=t[o]:i[o]=Object.assign(Object.assign({},e[o]),t[o]))})),i}countTotalModules(t){return t.layout.rows.reduce(((t,e)=>t+e.columns.reduce(((t,e)=>t+e.modules.length),0)),0)}validateUniqueModuleIds(t){const e=new Set,i=[];for(const o of t.layout.rows)for(const t of o.columns)for(const o of t.modules)e.has(o.id)?i.push(o.id):e.add(o.id);return{valid:0===i.length,duplicates:i}}fixDuplicateModuleIds(t){const e=new Set,i=JSON.parse(JSON.stringify(t));for(const t of i.layout.rows)for(const i of t.columns)for(const t of i.modules){if(e.has(t.id)){let i=`${t.type}-${Date.now()}-${Math.random().toString(36).substr(2,9)}`;for(;e.has(i);)i=`${t.type}-${Date.now()}-${Math.random().toString(36).substr(2,9)}`;t.id=i}e.add(t.id)}return i}}const he=ge.getInstance();var be=function(t,e,i,o){var n,a=arguments.length,r=a<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,i):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(t,e,i,o);else for(var s=t.length-1;s>=0;s--)(n=t[s])&&(r=(a<3?n(r):a>3?n(e,i,r):n(e,i))||r);return a>3&&r&&Object.defineProperty(e,i,r),r};let ve=class extends ut{render(){return q`
      <div class="about-tab">
        <div class="about-logo-container">
          <h1>Ultra Card</h1>
        </div>

        <div class="about-developed-by">
          Developed by
          <a href="https://wjddesigns.com" target="_blank" rel="noopener">WJD Designs</a>
        </div>

        <div class="about-description">
          <p>A powerful modular card builder for Home Assistant</p>
          <p>Create custom layouts with a professional page-builder interface</p>
        </div>

        <div class="about-buttons">
          <a
            href="https://github.com/WJDDesigns/Ultra-Card"
            target="_blank"
            rel="noopener"
            class="about-button github"
          >
            <svg viewBox="0 0 24 24" width="24" height="24" class="about-button-icon">
              <path
                fill="currentColor"
                d="M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12"
              />
            </svg>
            GitHub Repository
          </a>
        </div>

        <div class="version-info">
          <p>Version 1.0.0</p>
          <p>Modular layout system with conditional logic and professional design tools</p>
        </div>
      </div>
    `}};ve.styles=l`
    .about-tab {
      display: flex;
      flex-direction: column;
      align-items: center;
      padding: 24px;
      max-width: 600px;
      margin: 0 auto;
      color: var(--primary-text-color);
    }

    .about-logo-container h1 {
      color: var(--primary-color);
      font-size: 2.5em;
      margin: 0 0 16px 0;
      text-align: center;
    }

    .about-developed-by {
      font-size: 1.2em;
      margin-bottom: 24px;
      color: var(--secondary-text-color);
      text-align: center;
    }

    .about-developed-by a {
      color: var(--primary-color);
      text-decoration: none;
      font-weight: bold;
    }

    .about-developed-by a:hover {
      text-decoration: underline;
    }

    .about-description {
      text-align: center;
      margin-bottom: 32px;
    }

    .about-description p {
      margin: 8px 0;
      color: var(--secondary-text-color);
      line-height: 1.5;
    }

    .about-buttons {
      display: flex;
      justify-content: center;
      margin-bottom: 32px;
    }

    .about-button {
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 12px 20px;
      border-radius: 8px;
      text-decoration: none;
      font-weight: 500;
      transition: all 0.2s ease;
      color: white;
      border: none;
    }

    .about-button svg {
      margin-right: 8px;
      fill: currentColor;
    }

    .about-button.github {
      background-color: #24292e;
    }

    .about-button:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    .version-info {
      text-align: center;
      color: var(--secondary-text-color);
      font-size: 0.9em;
    }

    .version-info p {
      margin: 4px 0;
    }
  `,be([vt({attribute:!1})],ve.prototype,"hass",void 0),ve=be([gt("ultra-about-tab")],ve);class _e extends jt{constructor(t){if(super(t),this.it=J,2!==t.type)throw Error(this.constructor.directiveName+"() can only be used in child bindings")}render(t){if(t===J||null==t)return this._t=void 0,this.it=t;if(t===X)return t;if("string"!=typeof t)throw Error(this.constructor.directiveName+"() called with a non-string value");if(t===this.it)return this._t;this.it=t;const e=[t];return e.raw=e,this._t={_$litType$:this.constructor.resultType,strings:e,values:[]}}}_e.directiveName="unsafeHTML",_e.resultType=1;const fe=Ot(_e);var ye,xe=function(t,e,i,o){var n,a=arguments.length,r=a<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,i):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(t,e,i,o);else for(var s=t.length-1;s>=0;s--)(n=t[s])&&(r=(a<3?n(r):a>3?n(e,i,r):n(e,i))||r);return a>3&&r&&Object.defineProperty(e,i,r),r};let we=ye=class extends ut{constructor(){super(...arguments),this.designProperties={},this._expandedSections=new Set,this._marginLocked=!1,this._paddingLocked=!1,this._clipboardProperties=null}connectedCallback(){super.connectedCallback(),this._loadClipboardFromStorage(),this._storageEventListener=this._handleStorageEvent.bind(this),window.addEventListener("storage",this._storageEventListener)}disconnectedCallback(){super.disconnectedCallback(),this._storageEventListener&&window.removeEventListener("storage",this._storageEventListener)}_handleStorageEvent(t){t.key===ye.CLIPBOARD_KEY&&this._loadClipboardFromStorage()}_loadClipboardFromStorage(){try{const t=localStorage.getItem(ye.CLIPBOARD_KEY);if(t){const e=JSON.parse(t);e&&"object"==typeof e&&(this._clipboardProperties=e,this.requestUpdate())}}catch(t){console.warn("Failed to load design clipboard from localStorage:",t),this._clipboardProperties=null}}_saveClipboardToStorage(t){try{localStorage.setItem(ye.CLIPBOARD_KEY,JSON.stringify(t))}catch(t){console.warn("Failed to save design clipboard to localStorage:",t)}}_clearClipboardFromStorage(){try{localStorage.removeItem(ye.CLIPBOARD_KEY)}catch(t){console.warn("Failed to clear design clipboard from localStorage:",t)}}_toggleSection(t){this._expandedSections.has(t)?this._expandedSections.delete(t):(this._expandedSections.clear(),this._expandedSections.add(t)),this.requestUpdate()}_updateProperty(t,e){const i={[t]:e};if(console.log(`🔧 GlobalDesignTab: Updating property ${t} =`,e),console.log("🔧 GlobalDesignTab: onUpdate callback exists:",!!this.onUpdate),this.designProperties=Object.assign(Object.assign({},this.designProperties||{}),{[t]:e}),this.requestUpdate(),this.onUpdate)console.log("🔧 GlobalDesignTab: Using callback approach for property update"),this.onUpdate(i);else{console.log("🔧 GlobalDesignTab: Using event approach for property update");const t=new CustomEvent("design-changed",{detail:i,bubbles:!0,composed:!0});console.log("🔧 GlobalDesignTab: Dispatching design-changed event:",t),this.dispatchEvent(t)}console.log(`🔧 GlobalDesignTab: Property update complete for ${t}`)}_updateSpacing(t,e,i){const o="margin"===t?this._marginLocked:this._paddingLocked;let n;if(n=o?{[`${t}_top`]:i,[`${t}_bottom`]:i,[`${t}_left`]:i,[`${t}_right`]:i}:{[`${t}_${e}`]:i},console.log(`🔧 GlobalDesignTab: Updating spacing ${t}-${e} =`,i,`(locked: ${o})`),console.log("🔧 GlobalDesignTab: Spacing updates:",n),console.log("🔧 GlobalDesignTab: onUpdate callback exists:",!!this.onUpdate),this.onUpdate)console.log("🔧 GlobalDesignTab: Using callback approach for spacing update"),this.onUpdate(n);else{console.log("🔧 GlobalDesignTab: Using event approach for spacing update");const t=new CustomEvent("design-changed",{detail:n,bubbles:!0,composed:!0});console.log("🔧 GlobalDesignTab: Dispatching spacing design-changed event:",t),this.dispatchEvent(t)}}_handleNumericKeydown(t,e,i){if("ArrowUp"!==t.key&&"ArrowDown"!==t.key)return;t.preventDefault();const o=e.match(/^(-?\d*\.?\d*)(.*)$/);if(!o)return;const n=o[1],a=o[2].trim()||"px";let r=parseFloat(n)||0,s=1;"rem"===a||"em"===a?s=.1:"%"===a?s=5:"px"===a&&(s=1),t.shiftKey?s*=10:t.altKey&&(s/=10),"ArrowUp"===t.key?r+=s:r-=s;let l=0;"rem"===a||"em"===a?l=t.altKey?3:1:"%"===a&&t.altKey&&(l=1),i(`${parseFloat(r.toFixed(l))}${a}`)}_toggleSpacingLock(t){"margin"===t?this._marginLocked=!this._marginLocked:this._paddingLocked=!this._paddingLocked,this.requestUpdate()}_resetSection(t){console.log(`🔄 GlobalDesignTab: RESET SECTION CALLED for: ${t}`),console.log("🔄 GlobalDesignTab: Current designProperties:",this.designProperties),console.log("🔄 GlobalDesignTab: onUpdate callback exists:",!!this.onUpdate);const e={};switch(t){case"text":e.color=void 0,e.text_align=void 0,e.font_size=void 0,e.line_height=void 0,e.letter_spacing=void 0,e.font_family=void 0,e.font_weight=void 0,e.text_transform=void 0,e.font_style=void 0;break;case"background":e.background_color=void 0,e.background_image=void 0,e.background_image_type=void 0,e.background_image_entity=void 0,e.backdrop_filter=void 0;break;case"sizes":e.width=void 0,e.height=void 0,e.max_width=void 0,e.max_height=void 0,e.min_width=void 0,e.min_height=void 0;break;case"spacing":e.margin_top=void 0,e.margin_bottom=void 0,e.margin_left=void 0,e.margin_right=void 0,e.padding_top=void 0,e.padding_bottom=void 0,e.padding_left=void 0,e.padding_right=void 0;break;case"border":e.border_radius=void 0,e.border_style=void 0,e.border_width=void 0,e.border_color=void 0;break;case"position":e.position=void 0,e.top=void 0,e.bottom=void 0,e.left=void 0,e.right=void 0,e.z_index=void 0;break;case"text-shadow":e.text_shadow_h=void 0,e.text_shadow_v=void 0,e.text_shadow_blur=void 0,e.text_shadow_color=void 0;break;case"box-shadow":e.box_shadow_h=void 0,e.box_shadow_v=void 0,e.box_shadow_blur=void 0,e.box_shadow_spread=void 0,e.box_shadow_color=void 0;break;case"overflow":e.overflow=void 0,e.clip_path=void 0;break;case"animations":e.animation_type=void 0,e.animation_entity=void 0,e.animation_trigger_type=void 0,e.animation_attribute=void 0,e.animation_state=void 0,e.intro_animation=void 0,e.outro_animation=void 0,e.animation_duration=void 0,e.animation_delay=void 0,e.animation_timing=void 0}if(console.log(`🔄 GlobalDesignTab: Reset properties for ${t}:`,e),this.designProperties=Object.assign(Object.assign({},this.designProperties||{}),e),this.requestUpdate(),this.onUpdate){console.log("🔄 GlobalDesignTab: Using callback approach for section reset");try{this.onUpdate(e),console.log(`🔄 GlobalDesignTab: Callback executed successfully for ${t}`)}catch(e){console.error(`🔄 GlobalDesignTab: Callback error for ${t}:`,e)}}else{console.log("🔄 GlobalDesignTab: Using event approach for section reset");const t=new CustomEvent("design-changed",{detail:e,bubbles:!0,composed:!0});console.log("🔄 GlobalDesignTab: Dispatching reset design-changed event:",t);const i=this.dispatchEvent(t);console.log("🔄 GlobalDesignTab: Event dispatched successfully:",i)}console.log(`🔄 GlobalDesignTab: Requesting update for section ${t}`),this.requestUpdate(),setTimeout((()=>{console.log(`🔄 GlobalDesignTab: Delayed update for section ${t} UI indicators`),this.requestUpdate()}),50),console.log(`✅ GlobalDesignTab: Reset complete for ${t}`)}_copyDesign(){this._clipboardProperties=Object.assign({},this.designProperties),this._saveClipboardToStorage(this._clipboardProperties);const t=Object.keys(this._clipboardProperties).filter((t=>this._clipboardProperties[t])).length;console.log(`Design properties copied to cross-card clipboard (${t} properties)`),this.requestUpdate()}_pasteDesign(){this._clipboardProperties||this._loadClipboardFromStorage(),this._clipboardProperties?(this.onUpdate?this.onUpdate(this._clipboardProperties):this.dispatchEvent(new CustomEvent("design-changed",{detail:this._clipboardProperties,bubbles:!0,composed:!0})),console.log("Design properties pasted from cross-card clipboard")):console.log("No design properties in cross-card clipboard")}_resetAllDesign(){console.log("🔄 GlobalDesignTab: RESET ALL DESIGN CALLED"),console.log("🔄 GlobalDesignTab: Current designProperties:",this.designProperties),console.log("🔄 GlobalDesignTab: onUpdate callback exists:",!!this.onUpdate);const t={color:void 0,text_align:void 0,font_size:void 0,line_height:void 0,letter_spacing:void 0,font_family:void 0,font_weight:void 0,text_transform:void 0,font_style:void 0,background_color:void 0,background_image:void 0,background_image_type:void 0,background_image_entity:void 0,backdrop_filter:void 0,width:void 0,height:void 0,max_width:void 0,max_height:void 0,min_width:void 0,min_height:void 0,margin_top:void 0,margin_bottom:void 0,margin_left:void 0,margin_right:void 0,padding_top:void 0,padding_bottom:void 0,padding_left:void 0,padding_right:void 0,border_radius:void 0,border_style:void 0,border_width:void 0,border_color:void 0,position:void 0,top:void 0,bottom:void 0,left:void 0,right:void 0,z_index:void 0,text_shadow_h:void 0,text_shadow_v:void 0,text_shadow_blur:void 0,text_shadow_color:void 0,box_shadow_h:void 0,box_shadow_v:void 0,box_shadow_blur:void 0,box_shadow_spread:void 0,box_shadow_color:void 0,overflow:void 0,clip_path:void 0,animation_type:void 0,animation_entity:void 0,animation_trigger_type:void 0,animation_attribute:void 0,animation_state:void 0,intro_animation:void 0,outro_animation:void 0,animation_duration:void 0,animation_delay:void 0,animation_timing:void 0};if(console.log("🔄 GlobalDesignTab: Reset properties for ALL sections:",t),this.onUpdate){console.log("🔄 GlobalDesignTab: Using callback approach for reset all");try{this.onUpdate(t),console.log("🔄 GlobalDesignTab: Reset all callback executed successfully")}catch(t){console.error("🔄 GlobalDesignTab: Reset all callback error:",t)}}else{console.log("🔄 GlobalDesignTab: Using event approach for reset all");const e=new CustomEvent("design-changed",{detail:t,bubbles:!0,composed:!0});console.log("🔄 GlobalDesignTab: Dispatching reset all design-changed event:",e);const i=this.dispatchEvent(e);console.log("🔄 GlobalDesignTab: Reset all event dispatched successfully:",i)}console.log("🔄 GlobalDesignTab: Requesting update for reset all"),this.requestUpdate(),setTimeout((()=>{console.log("🔄 GlobalDesignTab: Delayed update for reset all UI indicators"),this.requestUpdate()}),50),console.log("✅ GlobalDesignTab: All design properties reset to default")}_clearClipboard(){this._clipboardProperties=null,this._clearClipboardFromStorage(),console.log("Cross-card clipboard cleared"),this.requestUpdate()}async _handleBackgroundImageUpload(t){var e;const i=null===(e=t.target.files)||void 0===e?void 0:e[0];if(i&&this.hass)try{const t=await async function(t,e){var i;if(!e)throw console.error("[UPLOAD] Missing file."),new Error("No file provided for upload.");if(!(t&&t.auth&&t.auth.data&&t.auth.data.access_token))throw console.error("[UPLOAD] Missing Home Assistant authentication details."),new Error("Authentication details are missing.");const o=new FormData;o.append("file",e);let n="";n=t.connection&&"string"==typeof(null===(i=t.connection.options)||void 0===i?void 0:i.url)?t.connection.options.url.replace(/^ws/,"http"):"function"==typeof t.hassUrl?t.hassUrl():`${window.location.protocol}//${window.location.host}`;const a=`${n.replace(/\/$/,"")}/api/image/upload`;try{const e=await fetch(a,{method:"POST",headers:{Authorization:`Bearer ${t.auth.data.access_token}`},body:o});if(!e.ok){const t=await e.text();throw console.error(`[UPLOAD] Failed to upload image via ${a}: ${e.status} ${e.statusText}`,t),new Error(`Failed to upload image via ${a}: ${e.statusText}`)}const i=await e.json();if(!i||!i.id)throw console.error(`[UPLOAD] Invalid response from ${a}: missing id`,i),new Error(`Invalid response from ${a}: missing id`);return`/api/image/serve/${i.id}`}catch(t){throw console.error(`[UPLOAD] Error during fetch to ${a}:`,t),new Error(`Upload via ${a} failed: ${t instanceof Error?t.message:"Unknown network error"}`)}}(this.hass,i),e={background_image:t,background_image_type:"upload"};this.onUpdate?this.onUpdate(e):this.dispatchEvent(new CustomEvent("design-changed",{detail:e,bubbles:!0,composed:!0}))}catch(t){console.error("Background image upload failed:",t),alert(`Upload failed: ${t instanceof Error?t.message:"Unknown error"}`)}}_truncatePath(t){return t?t.length<=30?t:"..."+t.slice(-27):""}_getStateValueHint(t){if(!this.hass||!t)return"Enter the state value to trigger animation";const e=this.hass.states[t];return e?e.state&&"unknown"!==e.state&&"unavailable"!==e.state?`Current state: ${e.state}`:"Enter the state value to trigger animation":"Entity not found"}_getAttributeNameHint(t){if(!this.hass||!t)return"Enter the attribute name to monitor";const e=this.hass.states[t];if(!e||!e.attributes)return"Entity not found or has no attributes";const i=Object.keys(e.attributes).filter((t=>!t.startsWith("_")&&"object"!=typeof e.attributes[t])).slice(0,3);return i.length>0?`Available attributes: ${i.join(", ")}${Object.keys(e.attributes).length>3?", ...":""}`:"Enter the attribute name to monitor"}_getAttributeValueHint(t,e){if(!this.hass||!t)return"Enter the attribute value to trigger animation";if(!e)return"Select an attribute first";const i=this.hass.states[t];if(!i||!i.attributes)return"Entity not found or has no attributes";const o=i.attributes[e];if(null!=o){const t=String(o);return`Current value: ${t.length>30?`${t.slice(0,27)}...`:t}`}return"Attribute not found - check the attribute name"}_hasModifiedProperties(t){const e=this.designProperties,i=t=>null!=t&&""!==t;switch(t){case"text":return!!(i(e.color)||i(e.text_align)||i(e.font_size)||i(e.line_height)||i(e.letter_spacing)||i(e.font_family)||i(e.font_weight)||i(e.text_transform)||i(e.font_style));case"background":return!!(i(e.background_color)||i(e.background_image)||i(e.background_image_type)||i(e.background_image_entity)||i(e.backdrop_filter));case"sizes":return!!(i(e.width)||i(e.height)||i(e.max_width)||i(e.max_height)||i(e.min_width)||i(e.min_height));case"spacing":return!!(i(e.margin_top)||i(e.margin_bottom)||i(e.margin_left)||i(e.margin_right)||i(e.padding_top)||i(e.padding_bottom)||i(e.padding_left)||i(e.padding_right));case"border":return!!(i(e.border_radius)||i(e.border_style)||i(e.border_width)||i(e.border_color));case"position":return!!(i(e.position)||i(e.top)||i(e.bottom)||i(e.left)||i(e.right)||i(e.z_index));case"text-shadow":return!!(i(e.text_shadow_h)||i(e.text_shadow_v)||i(e.text_shadow_blur)||i(e.text_shadow_color));case"box-shadow":return!!(i(e.box_shadow_h)||i(e.box_shadow_v)||i(e.box_shadow_blur)||i(e.box_shadow_spread)||i(e.box_shadow_color));case"overflow":return!(!i(e.overflow)&&!i(e.clip_path));case"animations":return!!(i(e.animation_type)&&"none"!==e.animation_type||i(e.animation_entity)||i(e.animation_trigger_type)||i(e.animation_attribute)||i(e.animation_state)||i(e.intro_animation)&&"none"!==e.intro_animation||i(e.outro_animation)&&"none"!==e.outro_animation||i(e.animation_duration)||i(e.animation_delay)||i(e.animation_timing)&&"ease"!==e.animation_timing);default:return!1}}_renderAccordion(t,e,i){const o=this._expandedSections.has(i),n=this._hasModifiedProperties(i);return q`
      <div class="accordion-section">
        <div class="accordion-header ${o?"expanded":""}">
          <button class="accordion-toggle" @click=${()=>this._toggleSection(i)}>
            <span class="accordion-title">
              ${t} ${n?q`<span class="edit-indicator"></span>`:""}
            </span>
          </button>
          <div class="accordion-actions">
            ${n?q`
                  <button
                    class="reset-button"
                    @click=${t=>{t.stopPropagation(),this._resetSection(i)}}
                    title="Reset ${t} settings to default"
                  >
                    <ha-icon icon="mdi:refresh"></ha-icon>
                  </button>
                `:""}
            <button class="expand-button" @click=${()=>this._toggleSection(i)}>
              <ha-icon icon="mdi:chevron-${o?"up":"down"}"></ha-icon>
            </button>
          </div>
        </div>
        ${o?q`<div class="accordion-content">${e}</div>`:""}
      </div>
    `}render(){return q`
      <div class="global-design-tab">
        <!-- Design Actions Toolbar -->
        <div class="design-toolbar">
          <button
            class="toolbar-button copy-button"
            @click=${this._copyDesign}
            title="Copy current design settings (works across all Ultra Cards)"
          >
            <ha-icon icon="mdi:content-copy"></ha-icon>
            <span>Copy</span>
          </button>

          <button
            class="toolbar-button paste-button ${this._clipboardProperties?"has-content":""}"
            @click=${this._pasteDesign}
            ?disabled=${!this._clipboardProperties}
            title="${this._clipboardProperties?"Paste copied design settings (from cross-card clipboard)":"No design settings in cross-card clipboard"}"
          >
            <ha-icon icon="mdi:content-paste"></ha-icon>
            <span>Paste</span>
          </button>

          <button
            class="toolbar-button reset-all-button"
            @click=${this._resetAllDesign}
            title="Reset all design settings to default"
          >
            <ha-icon icon="mdi:refresh"></ha-icon>
            <span>Reset All</span>
          </button>
        </div>

        ${this._renderAccordion("Text",q`
            <div class="property-group">
              <ultra-color-picker
                .label=${"Text Color"}
                .value=${this.designProperties.color||""}
                .defaultValue=${"var(--primary-text-color)"}
                .hass=${this.hass}
                @value-changed=${t=>this._updateProperty("color",t.detail.value)}
              ></ultra-color-picker>
            </div>

            <div class="property-group">
              <label>Alignment:</label>
              <div class="button-group">
                ${[{value:"inherit",icon:"mdi:circle-off-outline"},{value:"left",icon:"mdi:format-align-left"},{value:"center",icon:"mdi:format-align-center"},{value:"right",icon:"mdi:format-align-right"},{value:"justify",icon:"mdi:format-align-justify"}].map((t=>q`
                    <button
                      class="property-btn ${(this.designProperties.text_align||"inherit")===t.value?"active":""}"
                      @click=${()=>this._updateProperty("text_align","inherit"===t.value?void 0:t.value)}
                      title=${"inherit"===t.value?"Inherit (no alignment)":t.value}
                    >
                      <ha-icon icon="${t.icon}"></ha-icon>
                    </button>
                  `))}
              </div>
            </div>

            <div class="property-group">
              <label>Font Size:</label>
              <div class="input-with-reset">
                <input
                  type="text"
                  .value=${this.designProperties.font_size||""}
                  @input=${t=>this._updateProperty("font_size",t.target.value)}
                  placeholder="16px (default), 1.2rem, max(1rem, 1.5vw)"
                  class="property-input"
                />
                <button
                  class="reset-btn"
                  @click=${()=>this._updateProperty("font_size","")}
                  title="Reset font size to default"
                >
                  <ha-icon icon="mdi:refresh"></ha-icon>
                </button>
              </div>
            </div>

            <div class="property-group">
              <label>Line Height:</label>
              <div class="input-with-reset">
                <input
                  type="text"
                  .value=${this.designProperties.line_height||""}
                  @input=${t=>this._updateProperty("line_height",t.target.value)}
                  placeholder="0 (default), 28px, 1.7"
                  class="property-input"
                />
                <button
                  class="reset-btn"
                  @click=${()=>this._updateProperty("line_height","")}
                  title="Reset line height to default"
                >
                  <ha-icon icon="mdi:refresh"></ha-icon>
                </button>
              </div>
            </div>

            <div class="property-group">
              <label>Letter Spacing:</label>
              <div class="input-with-reset">
                <input
                  type="text"
                  .value=${this.designProperties.letter_spacing||""}
                  @input=${t=>this._updateProperty("letter_spacing",t.target.value)}
                  placeholder="auto (default), 1px, -0.04em"
                  class="property-input"
                />
                <button
                  class="reset-btn"
                  @click=${()=>this._updateProperty("letter_spacing","")}
                  title="Reset letter spacing to default"
                >
                  <ha-icon icon="mdi:refresh"></ha-icon>
                </button>
              </div>
            </div>

            <div class="property-group">
              <label>Font:</label>
              <select
                .value=${this.designProperties.font_family||""}
                @change=${t=>this._updateProperty("font_family",t.target.value)}
                class="property-select"
              >
                <option value="">– Default –</option>
                <option value="Arial, sans-serif">Arial</option>
                <option value="Helvetica, sans-serif">Helvetica</option>
                <option value="Times New Roman, serif">Times New Roman</option>
                <option value="Georgia, serif">Georgia</option>
                <option value="Verdana, sans-serif">Verdana</option>
              </select>
            </div>

            <div class="property-group">
              <label>Font Weight:</label>
              <select
                .value=${this.designProperties.font_weight||""}
                @change=${t=>this._updateProperty("font_weight",t.target.value)}
                class="property-select"
              >
                <option value="">– Default –</option>
                <option value="100">100 - Thin</option>
                <option value="300">300 - Light</option>
                <option value="400">400 - Normal</option>
                <option value="500">500 - Medium</option>
                <option value="600">600 - Semi Bold</option>
                <option value="700">700 - Bold</option>
                <option value="900">900 - Black</option>
              </select>
            </div>

            <div class="property-group">
              <label>Text Transform:</label>
              <select
                .value=${this.designProperties.text_transform||""}
                @change=${t=>this._updateProperty("text_transform",t.target.value)}
                class="property-select"
              >
                <option value="">– Default –</option>
                <option value="none">None</option>
                <option value="uppercase">UPPERCASE</option>
                <option value="lowercase">lowercase</option>
                <option value="capitalize">Capitalize</option>
              </select>
            </div>

            <div class="property-group">
              <label>Font Style:</label>
              <select
                .value=${this.designProperties.font_style||""}
                @change=${t=>this._updateProperty("font_style",t.target.value)}
                class="property-select"
              >
                <option value="">– Default –</option>
                <option value="normal">Normal</option>
                <option value="italic">Italic</option>
                <option value="oblique">Oblique</option>
              </select>
            </div>
          `,"text")}
        ${this._renderAccordion("Background",q`
            <div class="property-group">
              <ultra-color-picker
                .label=${"Background Color"}
                .value=${this.designProperties.background_color||""}
                .defaultValue=${"transparent"}
                .hass=${this.hass}
                @value-changed=${t=>this._updateProperty("background_color",t.detail.value)}
              ></ultra-color-picker>
            </div>

            <div class="property-group">
              <label>Background Image Type:</label>
              <select
                .value=${this.designProperties.background_image_type||"none"}
                @change=${t=>this._updateProperty("background_image_type",t.target.value)}
                class="property-select"
              >
                <option value="none">None</option>
                <option value="upload">Upload Image</option>
                <option value="entity">Entity Image</option>
                <option value="url">Image URL</option>
              </select>
            </div>

            ${"upload"===this.designProperties.background_image_type?q`
                  <div class="property-group">
                    <label>Upload Background Image:</label>
                    <div class="upload-container">
                      <div class="file-upload-row">
                        <label class="file-upload-button">
                          <div class="button-content">
                            <ha-icon icon="mdi:upload"></ha-icon>
                            <span class="button-label">Choose File</span>
                          </div>
                          <input
                            type="file"
                            accept="image/*"
                            @change=${this._handleBackgroundImageUpload}
                            style="display: none"
                          />
                        </label>
                        <div class="path-display">
                          ${this.designProperties.background_image?q`<span
                                class="uploaded-path"
                                title="${this.designProperties.background_image}"
                              >
                                ${this._truncatePath(this.designProperties.background_image)}
                              </span>`:q`<span class="no-file">No file chosen</span>`}
                        </div>
                      </div>
                    </div>
                  </div>
                `:""}
            ${"entity"===this.designProperties.background_image_type?q`
                  <div class="property-group">
                    <label>Background Image Entity:</label>
                    <ha-entity-picker
                      .hass=${this.hass}
                      .value=${this.designProperties.background_image_entity||""}
                      @value-changed=${t=>this._updateProperty("background_image_entity",t.detail.value)}
                      .label=${"Select entity with image attribute"}
                      allow-custom-entity
                    ></ha-entity-picker>
                  </div>
                `:""}
            ${"url"===this.designProperties.background_image_type?q`
                  <div class="property-group">
                    <label>Background Image URL:</label>
                    <input
                      type="text"
                      .value=${this.designProperties.background_image||""}
                      @input=${t=>this._updateProperty("background_image",t.target.value)}
                      placeholder="https://example.com/image.jpg"
                      class="property-input"
                    />
                  </div>
                `:""}

            <div class="property-group">
              <label>Backdrop Filter:</label>
              <input
                type="text"
                .value=${this.designProperties.backdrop_filter||""}
                @input=${t=>this._updateProperty("backdrop_filter",t.target.value)}
                placeholder="blur(10px), grayscale(100%), invert(75%)"
                class="property-input"
              />
            </div>
          `,"background")}
        ${this._renderAccordion("Sizes",q`
            <div class="property-group">
              <label>Width:</label>
              <div class="input-with-reset">
                <input
                  type="text"
                  .value=${this.designProperties.width||""}
                  @input=${t=>this._updateProperty("width",t.target.value)}
                  @keydown=${t=>this._handleNumericKeydown(t,this.designProperties.width||"",(t=>this._updateProperty("width",t)))}
                  placeholder="auto (default), 200px, 100%, 14rem, 10vw"
                  class="property-input"
                />
                <button
                  class="reset-btn"
                  @click=${()=>this._updateProperty("width","")}
                  title="Reset width to default"
                >
                  <ha-icon icon="mdi:refresh"></ha-icon>
                </button>
              </div>
            </div>

            <div class="property-group">
              <label>Height:</label>
              <div class="input-with-reset">
                <input
                  type="text"
                  .value=${this.designProperties.height||""}
                  @input=${t=>this._updateProperty("height",t.target.value)}
                  @keydown=${t=>this._handleNumericKeydown(t,this.designProperties.height||"",(t=>this._updateProperty("height",t)))}
                  placeholder="auto (default), 200px, 15rem, 10vh"
                  class="property-input"
                />
                <button
                  class="reset-btn"
                  @click=${()=>this._updateProperty("height","")}
                  title="Reset height to default"
                >
                  <ha-icon icon="mdi:refresh"></ha-icon>
                </button>
              </div>
            </div>

            <div class="property-group">
              <label>Max Width:</label>
              <div class="input-with-reset">
                <input
                  type="text"
                  .value=${this.designProperties.max_width||""}
                  @input=${t=>this._updateProperty("max_width",t.target.value)}
                  @keydown=${t=>this._handleNumericKeydown(t,this.designProperties.max_width||"",(t=>this._updateProperty("max_width",t)))}
                  placeholder="200px, 100%, 14rem, 10vw"
                  class="property-input"
                />
                <button
                  class="reset-btn"
                  @click=${()=>this._updateProperty("max_width","")}
                  title="Reset max width to default"
                >
                  <ha-icon icon="mdi:refresh"></ha-icon>
                </button>
              </div>
            </div>

            <div class="property-group">
              <label>Max Height:</label>
              <div class="input-with-reset">
                <input
                  type="text"
                  .value=${this.designProperties.max_height||""}
                  @input=${t=>this._updateProperty("max_height",t.target.value)}
                  placeholder="200px, 15rem, 10vh"
                  class="property-input"
                />
                <button
                  class="reset-btn"
                  @click=${()=>this._updateProperty("max_height","")}
                  title="Reset max height to default"
                >
                  <ha-icon icon="mdi:refresh"></ha-icon>
                </button>
              </div>
            </div>

            <div class="property-group">
              <label>Min Width:</label>
              <div class="input-with-reset">
                <input
                  type="text"
                  .value=${this.designProperties.min_width||""}
                  @input=${t=>this._updateProperty("min_width",t.target.value)}
                  placeholder="200px, 100%, 14rem, 10vw"
                  class="property-input"
                />
                <button
                  class="reset-btn"
                  @click=${()=>this._updateProperty("min_width","")}
                  title="Reset min width to default"
                >
                  <ha-icon icon="mdi:refresh"></ha-icon>
                </button>
              </div>
            </div>

            <div class="property-group">
              <label>Min Height:</label>
              <div class="input-with-reset">
                <input
                  type="text"
                  .value=${this.designProperties.min_height||""}
                  @input=${t=>this._updateProperty("min_height",t.target.value)}
                  placeholder="200px, 15rem, 10vh"
                  class="property-input"
                />
                <button
                  class="reset-btn"
                  @click=${()=>this._updateProperty("min_height","")}
                  title="Reset min height to default"
                >
                  <ha-icon icon="mdi:refresh"></ha-icon>
                </button>
              </div>
            </div>
          `,"sizes")}
        ${this._renderAccordion("Spacing",q`
            <div class="spacing-group">
              <div class="spacing-header">
                <h4>Margin</h4>
                <button
                  type="button"
                  class="lock-button ${this._marginLocked?"locked":""}"
                  @click=${()=>this._toggleSpacingLock("margin")}
                  title="${this._marginLocked?"Unlock to edit sides independently":"Lock to edit all sides together"}"
                >
                  <ha-icon icon="${this._marginLocked?"mdi:lock":"mdi:lock-open"}"></ha-icon>
                </button>
              </div>
              <div class="spacing-fields-desktop">
                <div class="spacing-field">
                  <label>Top</label>
                  <input
                    type="text"
                    placeholder="0px, 1rem, 5%"
                    .value=${this.designProperties.margin_top||""}
                    @input=${t=>this._updateSpacing("margin","top",t.target.value)}
                    @keydown=${t=>this._handleNumericKeydown(t,this.designProperties.margin_top||"",(t=>this._updateSpacing("margin","top",t)))}
                    class="spacing-input"
                  />
                </div>
                <div class="spacing-field">
                  <label>Right</label>
                  <input
                    type="text"
                    placeholder="0px, 1rem, 5%"
                    .value=${this.designProperties.margin_right||""}
                    @input=${t=>this._updateSpacing("margin","right",t.target.value)}
                    @keydown=${t=>this._handleNumericKeydown(t,this.designProperties.margin_right||"",(t=>this._updateSpacing("margin","right",t)))}
                    class="spacing-input"
                  />
                </div>
                <div class="spacing-field">
                  <label>Bottom</label>
                  <input
                    type="text"
                    placeholder="0px, 1rem, 5%"
                    .value=${this.designProperties.margin_bottom||""}
                    @input=${t=>this._updateSpacing("margin","bottom",t.target.value)}
                    @keydown=${t=>this._handleNumericKeydown(t,this.designProperties.margin_bottom||"",(t=>this._updateSpacing("margin","bottom",t)))}
                    class="spacing-input"
                  />
                </div>
                <div class="spacing-field">
                  <label>Left</label>
                  <input
                    type="text"
                    placeholder="0px, 1rem, 5%"
                    .value=${this.designProperties.margin_left||""}
                    @input=${t=>this._updateSpacing("margin","left",t.target.value)}
                    @keydown=${t=>this._handleNumericKeydown(t,this.designProperties.margin_left||"",(t=>this._updateSpacing("margin","left",t)))}
                    class="spacing-input"
                  />
                </div>
              </div>
            </div>

            <div class="spacing-group">
              <div class="spacing-header">
                <h4>Padding</h4>
                <button
                  type="button"
                  class="lock-button ${this._paddingLocked?"locked":""}"
                  @click=${()=>this._toggleSpacingLock("padding")}
                  title="${this._paddingLocked?"Unlock to edit sides independently":"Lock to edit all sides together"}"
                >
                  <ha-icon icon="${this._paddingLocked?"mdi:lock":"mdi:lock-open"}"></ha-icon>
                </button>
              </div>
              <div class="spacing-fields-desktop">
                <div class="spacing-field">
                  <label>Top</label>
                  <input
                    type="text"
                    placeholder="0px, 1rem, 5%"
                    .value=${this.designProperties.padding_top||""}
                    @input=${t=>this._updateSpacing("padding","top",t.target.value)}
                    @keydown=${t=>this._handleNumericKeydown(t,this.designProperties.padding_top||"",(t=>this._updateSpacing("padding","top",t)))}
                    class="spacing-input"
                  />
                </div>
                <div class="spacing-field">
                  <label>Right</label>
                  <input
                    type="text"
                    placeholder="0px, 1rem, 5%"
                    .value=${this.designProperties.padding_right||""}
                    @input=${t=>this._updateSpacing("padding","right",t.target.value)}
                    @keydown=${t=>this._handleNumericKeydown(t,this.designProperties.padding_right||"",(t=>this._updateSpacing("padding","right",t)))}
                    class="spacing-input"
                  />
                </div>
                <div class="spacing-field">
                  <label>Bottom</label>
                  <input
                    type="text"
                    placeholder="0px, 1rem, 5%"
                    .value=${this.designProperties.padding_bottom||""}
                    @input=${t=>this._updateSpacing("padding","bottom",t.target.value)}
                    @keydown=${t=>this._handleNumericKeydown(t,this.designProperties.padding_bottom||"",(t=>this._updateSpacing("padding","bottom",t)))}
                    class="spacing-input"
                  />
                </div>
                <div class="spacing-field">
                  <label>Left</label>
                  <input
                    type="text"
                    placeholder="0px, 1rem, 5%"
                    .value=${this.designProperties.padding_left||""}
                    @input=${t=>this._updateSpacing("padding","left",t.target.value)}
                    @keydown=${t=>this._handleNumericKeydown(t,this.designProperties.padding_left||"",(t=>this._updateSpacing("padding","left",t)))}
                    class="spacing-input"
                  />
                </div>
              </div>
            </div>
          `,"spacing")}
        ${this._renderAccordion("Border",q`
            <div class="property-group">
              <label>Border Radius:</label>
              <div class="input-with-reset">
                <input
                  type="text"
                  .value=${this.designProperties.border_radius||""}
                  @input=${t=>this._updateProperty("border_radius",t.target.value)}
                  @keydown=${t=>this._handleNumericKeydown(t,this.designProperties.border_radius||"",(t=>this._updateProperty("border_radius",t)))}
                  placeholder="5px, 50%, 0.3em, 12px 0"
                  class="property-input"
                />
                <button
                  class="reset-btn"
                  @click=${()=>this._updateProperty("border_radius","")}
                  title="Reset border radius to default"
                >
                  <ha-icon icon="mdi:refresh"></ha-icon>
                </button>
              </div>
            </div>

            <div class="property-group">
              <label>Border Style:</label>
              <select
                .value=${this.designProperties.border_style||""}
                @change=${t=>this._updateProperty("border_style",t.target.value)}
                class="property-select"
              >
                <option value="">None</option>
                <option value="solid">Solid</option>
                <option value="dashed">Dashed</option>
                <option value="dotted">Dotted</option>
                <option value="double">Double</option>
              </select>
            </div>

            <div class="property-group">
              <label>Border Width:</label>
              <div class="input-with-reset">
                <input
                  type="text"
                  .value=${this.designProperties.border_width||""}
                  @input=${t=>this._updateProperty("border_width",t.target.value)}
                  @keydown=${t=>this._handleNumericKeydown(t,this.designProperties.border_width||"",(t=>this._updateProperty("border_width",t)))}
                  placeholder="1px, 2px, 0.125rem"
                  class="property-input"
                />
                <button
                  class="reset-btn"
                  @click=${()=>this._updateProperty("border_width","")}
                  title="Reset border width to default"
                >
                  <ha-icon icon="mdi:refresh"></ha-icon>
                </button>
              </div>
            </div>

            <div class="property-group">
              <ultra-color-picker
                .label=${"Border Color"}
                .value=${this.designProperties.border_color||""}
                .defaultValue=${"var(--divider-color)"}
                .hass=${this.hass}
                @value-changed=${t=>this._updateProperty("border_color",t.detail.value)}
              ></ultra-color-picker>
            </div>
          `,"border")}
        ${this._renderAccordion("Position",q`
            <div class="property-group">
              <label>Position:</label>
              <select
                .value=${this.designProperties.position||""}
                @change=${t=>this._updateProperty("position",t.target.value)}
                class="property-select"
              >
                <option value="">– Default –</option>
                <option value="static">Static</option>
                <option value="relative">Relative</option>
                <option value="absolute">Absolute</option>
                <option value="fixed">Fixed</option>
                <option value="sticky">Sticky</option>
              </select>
            </div>

            ${this.designProperties.position&&"static"!==this.designProperties.position?q`
                  <div class="position-grid">
                    <input
                      type="text"
                      placeholder="Top"
                      .value=${this.designProperties.top||""}
                      @input=${t=>this._updateProperty("top",t.target.value)}
                      @keydown=${t=>this._handleNumericKeydown(t,this.designProperties.top||"",(t=>this._updateProperty("top",t)))}
                    />
                    <div class="position-row">
                      <input
                        type="text"
                        placeholder="Left"
                        .value=${this.designProperties.left||""}
                        @input=${t=>this._updateProperty("left",t.target.value)}
                        @keydown=${t=>this._handleNumericKeydown(t,this.designProperties.left||"",(t=>this._updateProperty("left",t)))}
                      />
                      <div class="position-center">POS</div>
                      <input
                        type="text"
                        placeholder="Right"
                        .value=${this.designProperties.right||""}
                        @input=${t=>this._updateProperty("right",t.target.value)}
                        @keydown=${t=>this._handleNumericKeydown(t,this.designProperties.right||"",(t=>this._updateProperty("right",t)))}
                      />
                    </div>
                    <input
                      type="text"
                      placeholder="Bottom"
                      .value=${this.designProperties.bottom||""}
                      @input=${t=>this._updateProperty("bottom",t.target.value)}
                      @keydown=${t=>this._handleNumericKeydown(t,this.designProperties.bottom||"",(t=>this._updateProperty("bottom",t)))}
                    />
                  </div>

                  <div class="property-group">
                    <label>Z-Index:</label>
                    <input
                      type="text"
                      .value=${this.designProperties.z_index||""}
                      @input=${t=>this._updateProperty("z_index",t.target.value)}
                      @keydown=${t=>this._handleNumericKeydown(t,this.designProperties.z_index||"",(t=>this._updateProperty("z_index",t)))}
                      placeholder="-1, 1, 3, 50"
                      class="property-input"
                    />
                  </div>
                `:""}
          `,"position")}
        ${this._renderAccordion("Text Shadow",q`
            <div class="property-group">
              <label>Horizontal Shift:</label>
              <div class="input-with-reset">
                <input
                  type="text"
                  .value=${this.designProperties.text_shadow_h||""}
                  @input=${t=>this._updateProperty("text_shadow_h",t.target.value)}
                  @keydown=${t=>this._handleNumericKeydown(t,this.designProperties.text_shadow_h||"",(t=>this._updateProperty("text_shadow_h",t)))}
                  placeholder="0, 3px, 0.05em, 2rem"
                  class="property-input"
                />
                <button
                  class="reset-btn"
                  @click=${()=>this._updateProperty("text_shadow_h","")}
                  title="Reset horizontal shadow to default"
                >
                  <ha-icon icon="mdi:refresh"></ha-icon>
                </button>
              </div>
            </div>

            <div class="property-group">
              <label>Vertical Shift:</label>
              <div class="input-with-reset">
                <input
                  type="text"
                  .value=${this.designProperties.text_shadow_v||""}
                  @input=${t=>this._updateProperty("text_shadow_v",t.target.value)}
                  @keydown=${t=>this._handleNumericKeydown(t,this.designProperties.text_shadow_v||"",(t=>this._updateProperty("text_shadow_v",t)))}
                  placeholder="0, 3px, 0.05em, 2rem"
                  class="property-input"
                />
                <button
                  class="reset-btn"
                  @click=${()=>this._updateProperty("text_shadow_v","")}
                  title="Reset vertical shadow to default"
                >
                  <ha-icon icon="mdi:refresh"></ha-icon>
                </button>
              </div>
            </div>

            <div class="property-group">
              <label>Blur:</label>
              <div class="input-with-reset">
                <input
                  type="text"
                  .value=${this.designProperties.text_shadow_blur||""}
                  @input=${t=>this._updateProperty("text_shadow_blur",t.target.value)}
                  @keydown=${t=>this._handleNumericKeydown(t,this.designProperties.text_shadow_blur||"",(t=>this._updateProperty("text_shadow_blur",t)))}
                  placeholder="0, 3px, 0.05em, 2rem"
                  class="property-input"
                />
                <button
                  class="reset-btn"
                  @click=${()=>this._updateProperty("text_shadow_blur","")}
                  title="Reset shadow blur to default"
                >
                  <ha-icon icon="mdi:refresh"></ha-icon>
                </button>
              </div>
            </div>

            <div class="property-group">
              <ultra-color-picker
                .label=${"Text Shadow Color"}
                .value=${this.designProperties.text_shadow_color||""}
                .defaultValue=${"rgba(0,0,0,0.5)"}
                .hass=${this.hass}
                @value-changed=${t=>this._updateProperty("text_shadow_color",t.detail.value)}
              ></ultra-color-picker>
            </div>
          `,"text-shadow")}
        ${this._renderAccordion("Box Shadow",q`
            <div class="property-group">
              <label>Horizontal Shift:</label>
              <div class="input-with-reset">
                <input
                  type="text"
                  .value=${this.designProperties.box_shadow_h||""}
                  @input=${t=>this._updateProperty("box_shadow_h",t.target.value)}
                  @keydown=${t=>this._handleNumericKeydown(t,this.designProperties.box_shadow_h||"",(t=>this._updateProperty("box_shadow_h",t)))}
                  placeholder="0, 3px, 0.05em, 2rem"
                  class="property-input"
                />
                <button
                  class="reset-btn"
                  @click=${()=>this._updateProperty("box_shadow_h","")}
                  title="Reset horizontal box shadow to default"
                >
                  <ha-icon icon="mdi:refresh"></ha-icon>
                </button>
              </div>
            </div>

            <div class="property-group">
              <label>Vertical Shift:</label>
              <div class="input-with-reset">
                <input
                  type="text"
                  .value=${this.designProperties.box_shadow_v||""}
                  @input=${t=>this._updateProperty("box_shadow_v",t.target.value)}
                  @keydown=${t=>this._handleNumericKeydown(t,this.designProperties.box_shadow_v||"",(t=>this._updateProperty("box_shadow_v",t)))}
                  placeholder="0, 3px, 0.05em, 2rem"
                  class="property-input"
                />
                <button
                  class="reset-btn"
                  @click=${()=>this._updateProperty("box_shadow_v","")}
                  title="Reset vertical box shadow to default"
                >
                  <ha-icon icon="mdi:refresh"></ha-icon>
                </button>
              </div>
            </div>

            <div class="property-group">
              <label>Blur:</label>
              <div class="input-with-reset">
                <input
                  type="text"
                  .value=${this.designProperties.box_shadow_blur||""}
                  @input=${t=>this._updateProperty("box_shadow_blur",t.target.value)}
                  @keydown=${t=>this._handleNumericKeydown(t,this.designProperties.box_shadow_blur||"",(t=>this._updateProperty("box_shadow_blur",t)))}
                  placeholder="0, 3px, 0.05em, 2rem"
                  class="property-input"
                />
                <button
                  class="reset-btn"
                  @click=${()=>this._updateProperty("box_shadow_blur","")}
                  title="Reset box shadow blur to default"
                >
                  <ha-icon icon="mdi:refresh"></ha-icon>
                </button>
              </div>
            </div>

            <div class="property-group">
              <label>Spread:</label>
              <div class="input-with-reset">
                <input
                  type="text"
                  .value=${this.designProperties.box_shadow_spread||""}
                  @input=${t=>this._updateProperty("box_shadow_spread",t.target.value)}
                  @keydown=${t=>this._handleNumericKeydown(t,this.designProperties.box_shadow_spread||"",(t=>this._updateProperty("box_shadow_spread",t)))}
                  placeholder="0, 3px, 0.05em, 2rem"
                  class="property-input"
                />
                <button
                  class="reset-btn"
                  @click=${()=>this._updateProperty("box_shadow_spread","")}
                  title="Reset box shadow spread to default"
                >
                  <ha-icon icon="mdi:refresh"></ha-icon>
                </button>
              </div>
            </div>

            <div class="property-group">
              <ultra-color-picker
                .label=${"Box Shadow Color"}
                .value=${this.designProperties.box_shadow_color||""}
                .defaultValue=${"rgba(0,0,0,0.1)"}
                .hass=${this.hass}
                @value-changed=${t=>this._updateProperty("box_shadow_color",t.detail.value)}
              ></ultra-color-picker>
            </div>
          `,"box-shadow")}
        ${this._renderAccordion("Overflow",q`
            <div class="property-group">
              <label>Overflow:</label>
              <select
                .value=${this.designProperties.overflow||"visible"}
                @change=${t=>this._updateProperty("overflow",t.target.value)}
                class="property-select"
              >
                <option value="visible">Visible (Default)</option>
                <option value="hidden">Hidden</option>
                <option value="scroll">Scroll</option>
                <option value="auto">Auto</option>
              </select>
            </div>

            <div class="property-group">
              <label>Clip-path:</label>
              <input
                type="text"
                .value=${this.designProperties.clip_path||""}
                @input=${t=>this._updateProperty("clip_path",t.target.value)}
                placeholder="ellipse(75% 100% at bottom)"
                class="property-input"
              />
              <small class="property-hint"
                >Examples:<br />
                ellipse(75% 100% at bottom)<br />
                polygon(25% 0%, 100% 0%, 75% 100%, 0% 100%)<br />
                polygon(100% 50%, 75% 93.3%, 25% 93.3%, 0% 50%, 25% 6.7%, 75% 6.7%)
              </small>
            </div>
          `,"overflow")}
        ${this._renderAccordion("Animations",q`
            <!-- State-based Animation -->
            <div class="property-section">
              <h5>State-based Animation</h5>
              <div class="property-group">
                <label>Animation Type:</label>
                <select
                  .value=${this.designProperties.animation_type||"none"}
                  @change=${t=>this._updateProperty("animation_type",t.target.value)}
                  class="property-select"
                >
                  <option value="none">None</option>
                  <option value="pulse">Pulse</option>
                  <option value="vibrate">Vibrate</option>
                  <option value="rotate-left">Rotate Left</option>
                  <option value="rotate-right">Rotate Right</option>
                  <option value="hover">Hover</option>
                  <option value="fade">Fade</option>
                  <option value="scale">Scale</option>
                  <option value="bounce">Bounce</option>
                  <option value="shake">Shake</option>
                  <option value="tada">Tada</option>
                </select>
              </div>

              <div class="property-group">
                <label>Animation Duration:</label>
                <input
                  type="text"
                  .value=${this.designProperties.animation_duration||"2s"}
                  @input=${t=>this._updateProperty("animation_duration",t.target.value)}
                  placeholder="2s, 500ms, 1.5s"
                  class="property-input"
                />
                <small class="property-hint">
                  Duration for the animation (e.g., 2s, 500ms, 1.5s)
                </small>
              </div>

              ${this.designProperties.animation_type&&"none"!==this.designProperties.animation_type?q`
                    <div class="property-group">
                      <label>Entity to Monitor:</label>
                      <ha-form
                        .hass=${this.hass}
                        .data=${{entity:this.designProperties.animation_entity||""}}
                        .schema=${[{name:"entity",selector:{entity:{}}}]}
                        @value-changed=${t=>this._updateProperty("animation_entity",t.detail.value.entity)}
                      ></ha-form>
                    </div>

                    ${this.designProperties.animation_entity?q`
                          <div class="property-group">
                            <label>Animation Trigger Type:</label>
                            <select
                              id="animation-trigger-type-select"
                              .value=${this.designProperties.animation_trigger_type||"state"}
                              @change=${t=>{const e=t.target.value;console.log("Animation trigger type changing to:",e);const i={animation_trigger_type:e,animation_state:"",animation_attribute:""};this.onUpdate?this.onUpdate(i):this.dispatchEvent(new CustomEvent("design-changed",{detail:i,bubbles:!0,composed:!0})),this.designProperties=Object.assign(Object.assign({},this.designProperties),i),this.requestUpdate()}}
                              class="property-select ${"attribute"===this.designProperties.animation_trigger_type?"attribute-mode":"state-mode"}"
                            >
                              <option value="state">Entity State</option>
                              <option value="attribute">Entity Attribute</option>
                            </select>
                            <div
                              class="trigger-type-indicator ${"attribute"===this.designProperties.animation_trigger_type?"attribute-mode-indicator":"state-mode-indicator"}"
                            >
                              <ha-icon
                                icon="${"attribute"===this.designProperties.animation_trigger_type?"mdi:format-list-checks":"mdi:state-machine"}"
                              ></ha-icon>
                              <span
                                >${"attribute"===this.designProperties.animation_trigger_type?"Attribute mode: select an attribute and its value to trigger the animation":"State mode: enter a state value to trigger the animation"}</span
                              >
                            </div>
                          </div>

                          ${(()=>{const t=this.designProperties.animation_trigger_type||"state",e="attribute"===t;return console.log("TRIGGER TYPE DETECTION:",{currentTriggerType:t,isAttributeMode:e,entitySelected:!!this.designProperties.animation_entity,attributeSelected:!!this.designProperties.animation_attribute,stateValue:this.designProperties.animation_state}),e?(console.log("🟢 RENDERING ATTRIBUTE MODE UI"),console.log("Rendering attribute mode UI"),q`
                                <div class="property-group attribute-mode-container">
                                  <div class="property-group">
                                    <label>
                                      <ha-icon icon="mdi:format-list-checks"></ha-icon>
                                      Attribute Name:
                                    </label>
                                    <input
                                      type="text"
                                      .value=${this.designProperties.animation_attribute||""}
                                      @input=${t=>{const e=t.target.value;console.log("Animation attribute changed to:",e),console.log("Current entity:",this.designProperties.animation_entity),console.log("Current trigger type:",this.designProperties.animation_trigger_type);const i=t.target;i.classList.add("change-success");const o={animation_attribute:e,animation_state:""};this.onUpdate?this.onUpdate(o):this.dispatchEvent(new CustomEvent("design-changed",{detail:o,bubbles:!0,composed:!0})),setTimeout((()=>{console.log("First UI refresh after attribute change (50ms)"),this.requestUpdate()}),50),setTimeout((()=>{console.log("Second UI refresh after attribute change (150ms)"),this.requestUpdate()}),150),setTimeout((()=>{console.log("Third UI refresh after attribute change (300ms)"),this.requestUpdate()}),300),setTimeout((()=>{console.log("Final UI refresh after attribute change (500ms)"),this.requestUpdate(),i.classList.remove("change-success")}),500)}}
                                      placeholder="friendly_name, device_class, state, etc."
                                      class="property-input attribute-mode-input"
                                    />
                                    <small class="property-hint">
                                      Enter the attribute name manually (e.g., friendly_name,
                                      device_class, state, battery_level)
                                    </small>
                                  </div>

                                  <div class="property-group">
                                    <label>
                                      <ha-icon icon="mdi:format-text"></ha-icon>
                                      Attribute Value:
                                    </label>
                                    <input
                                      type="text"
                                      .value=${this.designProperties.animation_state||""}
                                      @input=${t=>this._updateProperty("animation_state",t.target.value)}
                                      placeholder="blue, 255, heating, on, off, etc."
                                      class="property-input attribute-value-input"
                                    />
                                    <small class="property-hint">
                                      Enter the attribute value that will trigger the animation
                                    </small>
                                  </div>
                                </div>
                              `):(console.log("🔵 RENDERING STATE MODE UI"),q`
                                <div
                                  class="property-group state-value-container"
                                  style="display: ${"attribute"!==String(this.designProperties.animation_trigger_type)?"block !important":"none !important"}"
                                  data-mode="state"
                                >
                                  <label>
                                    <ha-icon icon="mdi:state-machine"></ha-icon>
                                    State Value:
                                  </label>
                                  <input
                                    type="text"
                                    .value=${this.designProperties.animation_state||""}
                                    @input=${t=>this._updateProperty("animation_state",t.target.value)}
                                    placeholder="on, off, playing, idle, etc."
                                    class="property-input state-value-input"
                                  />
                                  <small class="property-hint">
                                    Enter the exact state value that will trigger the animation
                                  </small>
                                  <div class="property-hint state-value-hint">
                                    <ha-icon icon="mdi:information-outline"></ha-icon>
                                    <span>
                                      ${this._getStateValueHint(this.designProperties.animation_entity)}
                                    </span>
                                  </div>
                                </div>
                              `)})()}
                        `:q`
                          <div class="property-group">
                            <label>Trigger Type:</label>
                            <select disabled class="property-select">
                              <option>Select an entity first</option>
                            </select>
                            <small class="property-hint">
                              Select an entity first to configure trigger conditions
                            </small>
                          </div>
                        `}
                  `:""}
            </div>

            <!-- Intro/Outro Animations -->
            <div class="property-section">
              <h5>Intro & Outro Animations</h5>
              <div class="two-column-grid">
                <div class="property-group">
                  <label>Intro Animation:</label>
                  <select
                    .value=${this.designProperties.intro_animation||"none"}
                    @change=${t=>this._updateProperty("intro_animation",t.target.value)}
                    class="property-select"
                  >
                    <option value="none">None</option>
                    <option value="fadeIn">Fade In</option>
                    <option value="slideInUp">Slide In Up</option>
                    <option value="slideInDown">Slide In Down</option>
                    <option value="slideInLeft">Slide In Left</option>
                    <option value="slideInRight">Slide In Right</option>
                    <option value="zoomIn">Zoom In</option>
                    <option value="bounceIn">Bounce In</option>
                    <option value="flipInX">Flip In X</option>
                    <option value="flipInY">Flip In Y</option>
                    <option value="rotateIn">Rotate In</option>
                  </select>
                </div>

                <div class="property-group">
                  <label>Outro Animation:</label>
                  <select
                    .value=${this.designProperties.outro_animation||"none"}
                    @change=${t=>this._updateProperty("outro_animation",t.target.value)}
                    class="property-select"
                  >
                    <option value="none">None</option>
                    <option value="fadeOut">Fade Out</option>
                    <option value="slideOutUp">Slide Out Up</option>
                    <option value="slideOutDown">Slide Out Down</option>
                    <option value="slideOutLeft">Slide Out Left</option>
                    <option value="slideOutRight">Slide Out Right</option>
                    <option value="zoomOut">Zoom Out</option>
                    <option value="bounceOut">Bounce Out</option>
                    <option value="flipOutX">Flip Out X</option>
                    <option value="flipOutY">Flip Out Y</option>
                    <option value="rotateOut">Rotate Out</option>
                  </select>
                </div>
              </div>

              <!-- Animation Settings -->
              <div class="three-column-grid">
                <div class="property-group">
                  <label>Duration:</label>
                  <input
                    type="text"
                    .value=${this.designProperties.animation_duration||""}
                    @input=${t=>this._updateProperty("animation_duration",t.target.value)}
                    placeholder="0.3s, 500ms"
                    class="property-input"
                  />
                </div>

                <div class="property-group">
                  <label>Delay:</label>
                  <input
                    type="text"
                    .value=${this.designProperties.animation_delay||""}
                    @input=${t=>this._updateProperty("animation_delay",t.target.value)}
                    placeholder="0s, 100ms"
                    class="property-input"
                  />
                </div>

                <div class="property-group">
                  <label>Timing:</label>
                  <select
                    .value=${this.designProperties.animation_timing||"ease"}
                    @change=${t=>this._updateProperty("animation_timing",t.target.value)}
                    class="property-select"
                  >
                    <option value="ease">Ease</option>
                    <option value="linear">Linear</option>
                    <option value="ease-in">Ease In</option>
                    <option value="ease-out">Ease Out</option>
                    <option value="ease-in-out">Ease In Out</option>
                    <option value="cubic-bezier(0.25,0.1,0.25,1)">Custom Cubic</option>
                  </select>
                </div>
              </div>
            </div>
          `,"animations")}
      </div>
    `}static get styles(){return l`
      .global-design-tab {
        display: flex;
        flex-direction: column;
        gap: 8px;
        box-sizing: border-box;
        overflow: hidden;
      }

      .design-toolbar {
        display: flex;
        justify-content: space-between;
        align-items: center;
        gap: 12px;
        padding: 12px 16px;
        background: var(--secondary-background-color);
        border: 1px solid var(--divider-color);
        border-radius: 8px;
        margin-bottom: 8px;
        box-sizing: border-box;
        overflow: hidden;
      }

      .toolbar-button {
        display: flex;
        align-items: center;
        gap: 8px;
        padding: 8px 12px;
        border: 1px solid var(--divider-color);
        border-radius: 6px;
        background: var(--card-background-color);
        color: var(--primary-text-color);
        cursor: pointer;
        transition: all 0.2s ease;
        font-size: 14px;
        font-weight: 500;
        min-width: 0;
        flex: 1;
        justify-content: center;
      }

      .toolbar-button:hover:not(:disabled) {
        border-color: var(--primary-color);
        background: var(--primary-color);
        color: white;
        transform: translateY(-1px);
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      }

      .toolbar-button:active:not(:disabled) {
        transform: translateY(0);
        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
      }

      .toolbar-button:disabled {
        opacity: 0.5;
        cursor: not-allowed;
        background: var(--disabled-background-color, #f5f5f5);
        color: var(--disabled-text-color, #999);
        border-color: var(--disabled-border-color, #ddd);
      }

      .toolbar-button ha-icon {
        font-size: 16px;
        flex-shrink: 0;
      }

      .toolbar-button span {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
      }

      /* Specific button styling */
      .copy-button:hover:not(:disabled) {
        border-color: var(--info-color, #2196f3);
        background: var(--info-color, #2196f3);
      }

      .paste-button.has-content {
        border-color: var(--success-color, #4caf50);
        background: rgba(76, 175, 80, 0.1);
      }

      .paste-button.has-content:hover:not(:disabled) {
        border-color: var(--success-color, #4caf50);
        background: var(--success-color, #4caf50);
        color: white;
      }

      .reset-all-button:hover:not(:disabled) {
        border-color: var(--error-color, #f44336);
        background: var(--error-color, #f44336);
      }

      /* Responsive design for smaller screens */
      @media (max-width: 768px) {
        .design-toolbar {
          flex-direction: column;
          gap: 8px;
        }

        .toolbar-button {
          width: 100%;
          justify-content: center;
        }
      }

      @media (max-width: 480px) {
        .toolbar-button span {
          display: none;
        }

        .toolbar-button {
          min-width: 44px;
          padding: 8px;
          justify-content: center;
        }

        .design-toolbar {
          flex-direction: row;
          justify-content: space-around;
        }
      }

      .accordion-section {
        border: 1px solid var(--divider-color);
        border-radius: 8px;
        overflow: hidden;
        box-sizing: border-box;
      }

      .accordion-header {
        width: 100%;
        padding: 12px 16px;
        background: var(--secondary-background-color);
        border: none;
        border-radius: 8px 8px 0 0;
        display: flex;
        justify-content: space-between;
        align-items: center;
        font-weight: 500;
        color: var(--primary-text-color);
        transition: background-color 0.2s ease;
        box-sizing: border-box;
      }

      .accordion-header:hover {
        background: var(--primary-color);
        color: white;
      }

      .accordion-header.expanded {
        background: var(--primary-color);
        color: white;
        border-radius: 8px 8px 0 0;
      }

      .accordion-header:not(.expanded) {
        border-radius: 8px;
      }

      .accordion-toggle {
        background: none;
        border: none;
        color: inherit;
        font: inherit;
        cursor: pointer;
        display: flex;
        align-items: center;
        flex: 1;
        text-align: left;
        padding: 0;
      }

      .accordion-actions {
        display: flex;
        align-items: center;
        gap: 8px;
      }

      .reset-button,
      .expand-button {
        background: none;
        border: none;
        color: inherit;
        cursor: pointer;
        padding: 4px;
        border-radius: 4px;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: background-color 0.2s ease;
        min-width: 24px;
        height: 24px;
      }

      .reset-button:hover,
      .expand-button:hover {
        background: rgba(255, 255, 255, 0.1);
      }

      .accordion-header:not(.expanded) .reset-button:hover,
      .accordion-header:not(.expanded) .expand-button:hover {
        background: rgba(0, 0, 0, 0.1);
      }

      .accordion-title {
        position: relative;
        display: flex;
        align-items: center;
        gap: 8px;
      }

      .edit-indicator {
        width: 8px;
        height: 8px;
        background: var(--primary-color);
        border-radius: 50%;
        display: inline-block;
        animation: pulse 2s ease-in-out infinite;
      }

      .accordion-header.expanded .edit-indicator {
        background: white;
      }

      @keyframes pulse {
        0%,
        100% {
          opacity: 1;
        }
        50% {
          opacity: 0.6;
        }
      }

      .accordion-content {
        padding: 20px;
        background: var(--card-background-color, #fff);
        border-top: 1px solid var(--divider-color);
        border-radius: 0 0 8px 8px;
        position: relative;
        box-sizing: border-box;
        overflow: hidden;
      }

      .property-group {
        margin-bottom: 16px;
        box-sizing: border-box;
        overflow: hidden;
      }

      .property-group:last-child {
        margin-bottom: 0;
      }

      .property-group label {
        display: block;
        font-weight: 500;
        margin-bottom: 4px;
        color: var(--primary-text-color);
      }

      .property-input,
      .property-select {
        width: 100%;
        padding: 8px;
        border: 1px solid var(--divider-color);
        border-radius: 4px;
        background: var(--card-background-color);
        color: var(--primary-text-color);
        font-size: 14px;
        box-sizing: border-box;
        max-width: 100%;
      }

      .property-input:focus,
      .property-select:focus {
        outline: none;
        border-color: var(--primary-color);
        box-shadow: 0 0 0 1px var(--primary-color);
      }

      .property-hint {
        display: block;
        font-size: 11px;
        color: var(--secondary-text-color);
        margin-top: 4px;
        line-height: 1.3;
      }

      .checkbox-label {
        display: flex;
        align-items: center;
        gap: 8px;
        font-size: 12px;
        color: var(--secondary-text-color);
        cursor: pointer;
      }

      .button-group {
        display: flex;
        gap: 4px;
      }

      .property-btn {
        flex: 1;
        padding: 8px;
        border: 1px solid var(--divider-color);
        border-radius: 4px;
        background: var(--card-background-color);
        color: var(--secondary-text-color);
        cursor: pointer;
        transition: all 0.2s ease;
        display: flex;
        align-items: center;
        justify-content: center;
      }

      .property-btn:hover {
        border-color: var(--primary-color);
        color: var(--primary-color);
      }

      .property-btn.active {
        background: var(--primary-color);
        color: white;
        border-color: var(--primary-color);
      }

      .spacing-group {
        margin-bottom: 20px;
      }

      .spacing-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 12px;
      }

      .spacing-group h4 {
        margin: 0;
        font-size: 14px;
        font-weight: 500;
        color: var(--primary-text-color);
      }

      .lock-button {
        padding: 6px;
        border: 1px solid var(--divider-color);
        border-radius: 4px;
        background: var(--card-background-color);
        color: var(--secondary-text-color);
        cursor: pointer;
        transition: all 0.2s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        min-width: 32px;
        height: 32px;
      }

      .lock-button:hover {
        border-color: var(--primary-color);
        color: var(--primary-color);
      }

      .lock-button.locked {
        background: var(--primary-color);
        color: white;
        border-color: var(--primary-color);
      }

      .spacing-fields-desktop {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        gap: 12px;
      }

      .spacing-field {
        display: flex;
        flex-direction: column;
      }

      .spacing-field label {
        font-size: 12px;
        font-weight: 500;
        color: var(--secondary-text-color);
        margin-bottom: 4px;
        text-align: center;
      }

      .spacing-input {
        width: 100%;
        padding: 6px 8px;
        border: 1px solid var(--divider-color);
        border-radius: 4px;
        background: var(--card-background-color);
        color: var(--primary-text-color);
        font-size: 12px;
        text-align: center;
        box-sizing: border-box;
        max-width: 100%;
      }

      .spacing-input:focus {
        outline: none;
        border-color: var(--primary-color);
        box-shadow: 0 0 0 1px var(--primary-color);
      }

      @media (max-width: 768px) {
        .spacing-fields-desktop {
          grid-template-columns: 1fr 1fr;
          gap: 8px;
        }
      }

      .spacing-grid,
      .position-grid {
        display: grid;
        grid-template-columns: 1fr;
        gap: 8px;
        align-items: center;
        max-width: 150px;
        margin: 0 auto;
      }

      .spacing-row,
      .position-row {
        display: grid;
        grid-template-columns: 1fr auto 1fr;
        gap: 8px;
        align-items: center;
      }

      .spacing-center,
      .position-center {
        width: 40px;
        height: 32px;
        background: var(--primary-color);
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 4px;
        font-weight: bold;
        font-size: 11px;
      }

      .spacing-grid input,
      .position-grid input {
        width: 100%;
        text-align: center;
        padding: 4px 8px;
        font-size: 12px;
      }

      /* Property sections */
      .property-section {
        margin-bottom: 24px;
        padding-bottom: 20px;
        border-bottom: 1px solid var(--divider-color);
      }

      .property-section:last-child {
        border-bottom: none;
        margin-bottom: 0;
      }

      .property-section h5 {
        margin: 0 0 16px 0;
        font-size: 16px;
        font-weight: 600;
        color: var(--primary-text-color);
        padding-bottom: 8px;
        border-bottom: 1px solid var(--primary-color);
        display: inline-block;
      }

      /* Grid layouts */
      .two-column-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 16px;
        margin-bottom: 16px;
      }

      .three-column-grid {
        display: grid;
        grid-template-columns: 1fr 1fr 1fr;
        gap: 12px;
        margin-bottom: 16px;
      }

      @media (max-width: 768px) {
        .two-column-grid,
        .three-column-grid {
          grid-template-columns: 1fr;
          gap: 12px;
        }
      }

      /* Animation keyframes for intro/outro animations */
      @keyframes fadeIn {
        from {
          opacity: 0;
        }
        to {
          opacity: 1;
        }
      }

      @keyframes fadeOut {
        from {
          opacity: 1;
        }
        to {
          opacity: 0;
        }
      }

      @keyframes slideInUp {
        from {
          transform: translateY(100%);
          opacity: 0;
        }
        to {
          transform: translateY(0);
          opacity: 1;
        }
      }

      @keyframes slideOutUp {
        from {
          transform: translateY(0);
          opacity: 1;
        }
        to {
          transform: translateY(-100%);
          opacity: 0;
        }
      }

      @keyframes slideInDown {
        from {
          transform: translateY(-100%);
          opacity: 0;
        }
        to {
          transform: translateY(0);
          opacity: 1;
        }
      }

      @keyframes slideOutDown {
        from {
          transform: translateY(0);
          opacity: 1;
        }
        to {
          transform: translateY(100%);
          opacity: 0;
        }
      }

      @keyframes slideInLeft {
        from {
          transform: translateX(-100%);
          opacity: 0;
        }
        to {
          transform: translateX(0);
          opacity: 1;
        }
      }

      @keyframes slideOutLeft {
        from {
          transform: translateX(0);
          opacity: 1;
        }
        to {
          transform: translateX(-100%);
          opacity: 0;
        }
      }

      @keyframes slideInRight {
        from {
          transform: translateX(100%);
          opacity: 0;
        }
        to {
          transform: translateX(0);
          opacity: 1;
        }
      }

      @keyframes slideOutRight {
        from {
          transform: translateX(0);
          opacity: 1;
        }
        to {
          transform: translateX(100%);
          opacity: 0;
        }
      }

      @keyframes zoomIn {
        from {
          transform: scale(0.3);
          opacity: 0;
        }
        to {
          transform: scale(1);
          opacity: 1;
        }
      }

      @keyframes zoomOut {
        from {
          transform: scale(1);
          opacity: 1;
        }
        to {
          transform: scale(0.3);
          opacity: 0;
        }
      }

      @keyframes bounceIn {
        0% {
          transform: scale(0.3);
          opacity: 0;
        }
        50% {
          transform: scale(1.05);
        }
        70% {
          transform: scale(0.9);
        }
        100% {
          transform: scale(1);
          opacity: 1;
        }
      }

      @keyframes bounceOut {
        20% {
          transform: scale(0.9);
        }
        50%,
        55% {
          transform: scale(1.05);
          opacity: 1;
        }
        100% {
          transform: scale(0.3);
          opacity: 0;
        }
      }

      @keyframes flipInX {
        from {
          transform: perspective(400px) rotateX(90deg);
          opacity: 0;
        }
        40% {
          transform: perspective(400px) rotateX(-20deg);
        }
        60% {
          transform: perspective(400px) rotateX(10deg);
        }
        80% {
          transform: perspective(400px) rotateX(-5deg);
        }
        to {
          transform: perspective(400px) rotateX(0deg);
          opacity: 1;
        }
      }

      @keyframes flipOutX {
        from {
          transform: perspective(400px) rotateX(0deg);
          opacity: 1;
        }
        to {
          transform: perspective(400px) rotateX(90deg);
          opacity: 0;
        }
      }

      @keyframes flipInY {
        from {
          transform: perspective(400px) rotateY(90deg);
          opacity: 0;
        }
        40% {
          transform: perspective(400px) rotateY(-20deg);
        }
        60% {
          transform: perspective(400px) rotateY(10deg);
        }
        80% {
          transform: perspective(400px) rotateY(-5deg);
        }
        to {
          transform: perspective(400px) rotateY(0deg);
          opacity: 1;
        }
      }

      @keyframes flipOutY {
        from {
          transform: perspective(400px) rotateY(0deg);
          opacity: 1;
        }
        to {
          transform: perspective(400px) rotateY(90deg);
          opacity: 0;
        }
      }

      @keyframes rotateIn {
        from {
          transform: rotate(-200deg);
          opacity: 0;
        }
        to {
          transform: rotate(0deg);
          opacity: 1;
        }
      }

      @keyframes rotateOut {
        from {
          transform: rotate(0deg);
          opacity: 1;
        }
        to {
          transform: rotate(200deg);
          opacity: 0;
        }
      }

      /* Color picker z-index fix */
      ultra-color-picker {
        position: relative;
        z-index: 1000;
      }

      /* Upload button styling */
      .upload-container {
        width: 100%;
      }

      .file-upload-row {
        display: flex;
        align-items: center;
        gap: 12px;
        width: 100%;
      }

      .file-upload-button {
        display: flex;
        align-items: center;
        padding: 8px 12px;
        border: 1px solid var(--divider-color);
        border-radius: 4px;
        background: var(--card-background-color);
        color: var(--primary-text-color);
        cursor: pointer;
        transition: all 0.2s ease;
        min-width: 120px;
      }

      .file-upload-button:hover {
        border-color: var(--primary-color);
        background: var(--primary-color);
        color: white;
      }

      .button-content {
        display: flex;
        align-items: center;
        gap: 8px;
      }

      .button-label {
        font-size: 14px;
        font-weight: 500;
      }

      .path-display {
        flex: 1;
        min-width: 0;
      }

      .uploaded-path {
        color: var(--primary-text-color);
        font-size: 12px;
        word-break: break-all;
      }

      .no-file {
        color: var(--secondary-text-color);
        font-size: 12px;
        font-style: italic;
      }

      /* Attribute value selection styling */
      .attribute-value-selection {
        display: flex;
        flex-direction: column;
        gap: 8px;
        position: relative;
        margin-bottom: 8px;
      }

      .attribute-value-select {
        width: 100%;
        padding: 8px 12px;
        border: 1px solid var(--primary-color);
        border-radius: 4px;
        background: var(--card-background-color);
        color: var(--primary-text-color);
        font-size: 14px;
        box-sizing: border-box;
        appearance: menulist;
        cursor: pointer;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        transition: all 0.2s ease;
        max-height: 200px;
        overflow-y: auto;
      }

      .attribute-value-select:focus {
        outline: none;
        border-color: var(--primary-color);
        box-shadow: 0 0 0 2px rgba(var(--rgb-primary-color), 0.2);
      }

      .attribute-value-select option {
        padding: 8px;
      }

      /* Enhanced attribute mode styling */
      .attribute-mode {
        border-color: var(--primary-color);
        box-shadow: 0 0 0 1px var(--primary-color);
      }

      .attribute-mode-container {
        background: rgba(var(--rgb-primary-color, 0, 140, 255), 0.05);
        padding: 12px;
        border-radius: 4px;
        border-left: 3px solid var(--primary-color);
        margin-bottom: 16px;
      }

      .trigger-type-indicator {
        display: flex;
        align-items: center;
        gap: 8px;
        padding: 8px 12px;
        margin: 8px 0;
        border-radius: 4px;
        font-weight: 500;
      }

      .attribute-mode-indicator {
        background: rgba(var(--rgb-primary-color, 0, 140, 255), 0.1);
        border-left: 3px solid var(--primary-color);
        color: var(--primary-color);
      }

      .state-mode-indicator {
        background: rgba(var(--rgb-info-color, 3, 169, 244), 0.1);
        border-left: 3px solid var(--info-color, #03a9f4);
        color: var(--info-color, #03a9f4);
      }

      .attribute-mode-select {
        border-color: var(--primary-color);
      }

      .attribute-value-container {
        background: rgba(var(--rgb-primary-color, 0, 140, 255), 0.05);
        padding: 16px;
        border-radius: 8px;
        border-left: 3px solid var(--primary-color);
        margin-top: 16px;
      }

      .attribute-value-container label {
        display: flex;
        align-items: center;
        gap: 8px;
        color: var(--primary-color);
        font-weight: 600;
        margin-bottom: 8px;
      }

      .attribute-value-selection {
        display: flex;
        flex-direction: column;
        gap: 12px;
        padding: 12px;
        border: 1px solid var(--primary-color);
        border-radius: 4px;
        background: rgba(var(--rgb-primary-color, 0, 140, 255), 0.05);
        margin-top: 8px;
      }

      .attribute-value-input {
        border-color: var(--primary-color);
        border-width: 2px;
      }

      .attribute-value-dropdown-container {
        background: white;
        padding: 12px;
        border-radius: 4px;
        border: 1px dashed var(--primary-color);
        position: relative;
        overflow: hidden;
      }

      .attribute-value-label {
        font-size: 12px;
        font-weight: 500;
        color: var(--primary-color);
        margin-bottom: 4px;
      }

      .attribute-value-hint {
        display: flex;
        align-items: flex-start;
        gap: 8px;
        margin-top: 8px;
        background: rgba(var(--rgb-primary-color, 0, 140, 255), 0.05);
        padding: 8px;
        border-radius: 4px;
      }

      /* State mode styling */
      .state-value-container {
        background: rgba(var(--rgb-info-color, 3, 169, 244), 0.05);
        padding: 16px;
        border-radius: 8px;
        border-left: 3px solid var(--info-color, #03a9f4);
        margin-top: 16px;
      }

      .state-value-container label {
        display: flex;
        align-items: center;
        gap: 8px;
        color: var(--info-color, #03a9f4);
        font-weight: 600;
        margin-bottom: 8px;
      }

      .state-value-selection {
        display: flex;
        flex-direction: column;
        gap: 12px;
        padding: 12px;
        border: 1px solid var(--info-color, #03a9f4);
        border-radius: 4px;
        background: rgba(var(--rgb-info-color, 3, 169, 244), 0.05);
        margin-top: 8px;
      }

      .state-value-input {
        border-color: var(--info-color, #03a9f4);
        border-width: 2px;
      }

      .state-value-dropdown-container {
        background: white;
        padding: 12px;
        border-radius: 4px;
        border: 1px dashed var(--info-color, #03a9f4);
        position: relative;
        overflow: hidden;
      }

      .state-value-label {
        font-size: 12px;
        font-weight: 500;
        color: var(--info-color, #03a9f4);
        margin-bottom: 4px;
      }

      .state-value-hint {
        display: flex;
        align-items: flex-start;
        gap: 8px;
        margin-top: 8px;
        background: rgba(var(--rgb-info-color, 3, 169, 244), 0.05);
        padding: 8px;
        border-radius: 4px;
      }

      .state-value-hint ha-icon {
        color: var(--info-color, #03a9f4);
        flex-shrink: 0;
      }

      .attribute-value-hint ha-icon,
      .state-value-hint ha-icon {
        color: currentColor;
        flex-shrink: 0;
      }

      /* Visual feedback animations */
      @keyframes success-pulse {
        0% {
          box-shadow: 0 0 0 0 rgba(var(--rgb-success-color, 76, 175, 80), 0.7);
        }
        70% {
          box-shadow: 0 0 0 10px rgba(var(--rgb-success-color, 76, 175, 80), 0);
        }
        100% {
          box-shadow: 0 0 0 0 rgba(var(--rgb-success-color, 76, 175, 80), 0);
        }
      }

      .change-success {
        animation: success-pulse 0.5s ease-in-out;
        border-color: var(--success-color, #4caf50) !important;
        box-shadow: 0 0 0 1px var(--success-color, #4caf50);
        transition: all 0.3s ease;
      }

      .attribute-mode-select.change-success,
      .state-mode-select.change-success {
        border-width: 2px;
      }

      .select-attribute-first {
        display: flex;
        align-items: center;
        gap: 8px;
        padding: 12px;
        color: var(--warning-color, #ff9800);
        font-style: italic;
        text-align: center;
        background: rgba(var(--rgb-warning-color, 255, 152, 0), 0.05);
        border: 1px dashed var(--warning-color, #ff9800);
        border-radius: 4px;
      }

      /* Mode switch animation */
      @keyframes highlight-fade {
        0% {
          background-color: rgba(var(--rgb-success-color, 76, 175, 80), 0.2);
        }
        100% {
          background-color: transparent;
        }
      }

      .trigger-type-indicator {
        animation: highlight-fade 1.5s ease-out;
      }

      /* Additional highlight animation for mode switches */
      @keyframes border-pulse {
        0% {
          border-left-width: 3px;
        }
        50% {
          border-left-width: 6px;
        }
        100% {
          border-left-width: 3px;
        }
      }

      .attribute-mode-indicator {
        animation: border-pulse 1s ease-in-out;
      }

      .state-mode-indicator {
        animation: border-pulse 1s ease-in-out;
      }

      /* Visual transitions for UI state changes */
      .property-select,
      .property-input,
      .attribute-value-select,
      .state-value-select {
        transition:
          border-color 0.3s ease,
          box-shadow 0.3s ease,
          background-color 0.3s ease;
      }

      /* Value selection feedback */
      .attribute-value-select:focus,
      .state-value-select:focus {
        border-width: 2px;
        transform: translateY(-1px);
      }

      /* Attribute mode specific animations */
      .attribute-mode-select::after {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(var(--rgb-primary-color, 0, 140, 255), 0.1);
        opacity: 0;
        transition: opacity 0.3s ease;
      }

      .attribute-mode-select:focus::after {
        opacity: 1;
      }

      /* State mode specific animations */
      .state-value-select::after {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(var(--rgb-info-color, 3, 169, 244), 0.1);
        opacity: 0;
        transition: opacity 0.3s ease;
      }

      .state-value-select:focus::after {
        opacity: 1;
      }

      /* Animation classes */
      .fadeIn {
        animation: fadeIn var(--animation-duration, 0.3s) var(--animation-timing, ease)
          var(--animation-delay, 0s) both;
      }
      .fadeOut {
        animation: fadeOut var(--animation-duration, 0.3s) var(--animation-timing, ease)
          var(--animation-delay, 0s) both;
      }
      .slideInUp {
        animation: slideInUp var(--animation-duration, 0.3s) var(--animation-timing, ease)
          var(--animation-delay, 0s) both;
      }
      .slideOutUp {
        animation: slideOutUp var(--animation-duration, 0.3s) var(--animation-timing, ease)
          var(--animation-delay, 0s) both;
      }
      .slideInDown {
        animation: slideInDown var(--animation-duration, 0.3s) var(--animation-timing, ease)
          var(--animation-delay, 0s) both;
      }
      .slideOutDown {
        animation: slideOutDown var(--animation-duration, 0.3s) var(--animation-timing, ease)
          var(--animation-delay, 0s) both;
      }
      .slideInLeft {
        animation: slideInLeft var(--animation-duration, 0.3s) var(--animation-timing, ease)
          var(--animation-delay, 0s) both;
      }
      .slideOutLeft {
        animation: slideOutLeft var(--animation-duration, 0.3s) var(--animation-timing, ease)
          var(--animation-delay, 0s) both;
      }
      .slideInRight {
        animation: slideInRight var(--animation-duration, 0.3s) var(--animation-timing, ease)
          var(--animation-delay, 0s) both;
      }
      .slideOutRight {
        animation: slideOutRight var(--animation-duration, 0.3s) var(--animation-timing, ease)
          var(--animation-delay, 0s) both;
      }
      .zoomIn {
        animation: zoomIn var(--animation-duration, 0.3s) var(--animation-timing, ease)
          var(--animation-delay, 0s) both;
      }
      .zoomOut {
        animation: zoomOut var(--animation-duration, 0.3s) var(--animation-timing, ease)
          var(--animation-delay, 0s) both;
      }
      .bounceIn {
        animation: bounceIn var(--animation-duration, 0.6s) var(--animation-timing, ease)
          var(--animation-delay, 0s) both;
      }
      .bounceOut {
        animation: bounceOut var(--animation-duration, 0.6s) var(--animation-timing, ease)
          var(--animation-delay, 0s) both;
      }
      .flipInX {
        animation: flipInX var(--animation-duration, 0.6s) var(--animation-timing, ease)
          var(--animation-delay, 0s) both;
      }
      .flipOutX {
        animation: flipOutX var(--animation-duration, 0.6s) var(--animation-timing, ease)
          var(--animation-delay, 0s) both;
      }
      .flipInY {
        animation: flipInY var(--animation-duration, 0.6s) var(--animation-timing, ease)
          var(--animation-delay, 0s) both;
      }
      .flipOutY {
        animation: flipOutY var(--animation-duration, 0.6s) var(--animation-timing, ease)
          var(--animation-delay, 0s) both;
      }
      .rotateIn {
        animation: rotateIn var(--animation-duration, 0.6s) var(--animation-timing, ease)
          var(--animation-delay, 0s) both;
      }
      .rotateOut {
        animation: rotateOut var(--animation-duration, 0.6s) var(--animation-timing, ease)
          var(--animation-delay, 0s) both;
      }

      /* Input with reset button styles */
      .input-with-reset {
        display: flex;
        align-items: center;
        gap: 8px;
        width: 100%;
      }

      .input-with-reset .property-input {
        flex: 1;
      }

      .reset-btn {
        width: 32px;
        height: 32px;
        min-width: 32px;
        padding: 0;
        border: 1px solid var(--divider-color);
        border-radius: 4px;
        background: var(--secondary-background-color);
        color: var(--primary-text-color);
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.2s ease;
        flex-shrink: 0;
      }

      .reset-btn:hover {
        background: var(--primary-color);
        color: white;
        border-color: var(--primary-color);
      }

      .reset-btn ha-icon {
        font-size: 16px;
      }
    `}};we.CLIPBOARD_KEY="ultra-card-design-clipboard",we._lastAnimationTriggerType=null,xe([vt({attribute:!1})],we.prototype,"hass",void 0),xe([vt({attribute:!1})],we.prototype,"designProperties",void 0),xe([vt({type:Function})],we.prototype,"onUpdate",void 0),xe([_t()],we.prototype,"_expandedSections",void 0),xe([_t()],we.prototype,"_marginLocked",void 0),xe([_t()],we.prototype,"_paddingLocked",void 0),xe([_t()],we.prototype,"_clipboardProperties",void 0),we=ye=xe([gt("ultra-global-design-tab")],we);var $e=function(t,e,i,o){var n,a=arguments.length,r=a<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,i):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(t,e,i,o);else for(var s=t.length-1;s>=0;s--)(n=t[s])&&(r=(a<3?n(r):a>3?n(e,i,r):n(e,i))||r);return a>3&&r&&Object.defineProperty(e,i,r),r};const ke=[{value:"default",label:"– Default –",category:"default"}],Se=[{value:"Montserrat",label:"Montserrat (used as default font)",category:"typography"}],Ce=[{value:"Georgia, serif",label:"Georgia, serif",category:"websafe"},{value:"Palatino Linotype, Book Antiqua, Palatino, serif",label:"Palatino Linotype, Book Antiqua, Palatino, serif",category:"websafe"},{value:"Times New Roman, Times, serif",label:"Times New Roman, Times, serif",category:"websafe"},{value:"Arial, Helvetica, sans-serif",label:"Arial, Helvetica, sans-serif",category:"websafe"},{value:"Impact, Charcoal, sans-serif",label:"Impact, Charcoal, sans-serif",category:"websafe"},{value:"Lucida Sans Unicode, Lucida Grande, sans-serif",label:"Lucida Sans Unicode, Lucida Grande, sans-serif",category:"websafe"},{value:"Tahoma, Geneva, sans-serif",label:"Tahoma, Geneva, sans-serif",category:"websafe"},{value:"Trebuchet MS, Helvetica, sans-serif",label:"Trebuchet MS, Helvetica, sans-serif",category:"websafe"},{value:"Verdana, Geneva, sans-serif",label:"Verdana, Geneva, sans-serif",category:"websafe"},{value:"Courier New, Courier, monospace",label:"Courier New, Courier, monospace",category:"websafe"},{value:"Lucida Console, Monaco, monospace",label:"Lucida Console, Monaco, monospace",category:"websafe"}];let ze=class extends ut{constructor(){super(...arguments),this._showModuleSelector=!1,this._selectedRowIndex=-1,this._selectedColumnIndex=-1,this._showModuleSettings=!1,this._selectedModule=null,this._activeModuleTab="general",this._activeDesignSubtab="text",this._showRowSettings=!1,this._selectedRowForSettings=-1,this._activeRowTab="general",this._showColumnSettings=!1,this._selectedColumnForSettings=null,this._activeColumnTab="general",this._showColumnLayoutSelector=!1,this._selectedRowForLayout=-1,this._draggedItem=null,this._dropTarget=null,this._selectedLayoutModuleIndex=-1,this._showLayoutChildSettings=!1,this._selectedLayoutChild=null,this._popupDragState={isDragging:!1,dragStartX:0,dragStartY:0,initialX:0,initialY:0,element:null},this._popupResizeState={isResizing:!1,resizeStartX:0,resizeStartY:0,initialWidth:0,initialHeight:0,element:null},this._handlePopupDrag=t=>{if(!this._popupDragState.isDragging||!this._popupDragState.element)return;const e=t.clientX-this._popupDragState.dragStartX,i=t.clientY-this._popupDragState.dragStartY,o=this._popupDragState.initialX+e,n=this._popupDragState.initialY+i,a=window.innerWidth-this._popupDragState.element.offsetWidth,r=window.innerHeight-this._popupDragState.element.offsetHeight,s=Math.max(0,Math.min(o,a)),l=Math.max(0,Math.min(n,r));this._popupDragState.element.style.left=`${s}px`,this._popupDragState.element.style.top=`${l}px`,this._popupDragState.element.style.transform="none"},this._endPopupDrag=()=>{this._popupDragState.element&&this._popupDragState.element.classList.remove("popup-dragging"),this._popupDragState={isDragging:!1,dragStartX:0,dragStartY:0,initialX:0,initialY:0,element:null},document.removeEventListener("mousemove",this._handlePopupDrag),document.removeEventListener("mouseup",this._endPopupDrag)},this._handlePopupResize=t=>{if(!this._popupResizeState.isResizing||!this._popupResizeState.element)return;const e=t.clientX-this._popupResizeState.resizeStartX,i=t.clientY-this._popupResizeState.resizeStartY,o=this._popupResizeState.initialWidth+e,n=this._popupResizeState.initialHeight+i,a=.9*window.innerWidth,r=.9*window.innerHeight,s=Math.min(o,a),l=Math.min(n,r);this._popupResizeState.element.style.setProperty("width",`${s}px`,"important"),this._popupResizeState.element.style.setProperty("height",`${l}px`,"important")},this._endPopupResize=()=>{this._popupResizeState.element&&this._popupResizeState.element.classList.remove("popup-resizing"),this._popupResizeState={isResizing:!1,resizeStartX:0,resizeStartY:0,initialWidth:0,initialHeight:0,element:null},document.removeEventListener("mousemove",this._handlePopupResize),document.removeEventListener("mouseup",this._endPopupResize)},this.COLUMN_LAYOUTS=[{id:"1-col",name:"1",proportions:[1],columnCount:1},{id:"1-2-1-2",name:"1/2 + 1/2",proportions:[1,1],columnCount:2},{id:"1-3-2-3",name:"1/3 + 2/3",proportions:[1,2],columnCount:2},{id:"2-3-1-3",name:"2/3 + 1/3",proportions:[2,1],columnCount:2},{id:"2-5-3-5",name:"2/5 + 3/5",proportions:[2,3],columnCount:2},{id:"3-5-2-5",name:"3/5 + 2/5",proportions:[3,2],columnCount:2},{id:"1-3-1-3-1-3",name:"1/3 + 1/3 + 1/3",proportions:[1,1,1],columnCount:3},{id:"1-4-1-2-1-4",name:"1/4 + 1/2 + 1/4",proportions:[1,2,1],columnCount:3},{id:"1-5-3-5-1-5",name:"1/5 + 3/5 + 1/5",proportions:[1,3,1],columnCount:3},{id:"1-6-2-3-1-6",name:"1/6 + 2/3 + 1/6",proportions:[1,4,1],columnCount:3},{id:"1-4-1-4-1-4-1-4",name:"1/4 + 1/4 + 1/4 + 1/4",proportions:[1,1,1,1],columnCount:4},{id:"1-5-1-5-1-5-1-5",name:"1/5 + 1/5 + 1/5 + 1/5",proportions:[1,1,1,1],columnCount:4},{id:"1-6-1-6-1-6-1-6",name:"1/6 + 1/6 + 1/6 + 1/6",proportions:[1,1,1,1],columnCount:4},{id:"1-8-1-4-1-4-1-8",name:"1/8 + 1/4 + 1/4 + 1/8",proportions:[1,2,2,1],columnCount:4},{id:"1-5-1-5-1-5-1-5-1-5",name:"1/5 + 1/5 + 1/5 + 1/5 + 1/5",proportions:[1,1,1,1,1],columnCount:5},{id:"1-6-1-6-1-3-1-6-1-6",name:"1/6 + 1/6 + 1/3 + 1/6 + 1/6",proportions:[1,1,2,1,1],columnCount:5},{id:"1-8-1-4-1-4-1-4-1-8",name:"1/8 + 1/4 + 1/4 + 1/4 + 1/8",proportions:[1,2,2,2,1],columnCount:5},{id:"1-6-1-6-1-6-1-6-1-6-1-6",name:"1/6 + 1/6 + 1/6 + 1/6 + 1/6 + 1/6",proportions:[1,1,1,1,1,1],columnCount:6}]}disconnectedCallback(){super.disconnectedCallback(),this._endPopupDrag(),this._endPopupResize()}_startPopupDrag(t,e){t.preventDefault();const i=e.getBoundingClientRect();e.style.left=`${i.left}px`,e.style.top=`${i.top}px`,e.style.transform="none",this._popupDragState={isDragging:!0,dragStartX:t.clientX,dragStartY:t.clientY,initialX:i.left,initialY:i.top,element:e},document.addEventListener("mousemove",this._handlePopupDrag),document.addEventListener("mouseup",this._endPopupDrag),e.classList.add("popup-dragging")}_startPopupResize(t,e){t.preventDefault(),t.stopPropagation();const i=e.getBoundingClientRect();this._popupResizeState={isResizing:!0,resizeStartX:t.clientX,resizeStartY:t.clientY,initialWidth:i.width,initialHeight:i.height,element:e},document.addEventListener("mousemove",this._handlePopupResize),document.addEventListener("mouseup",this._endPopupResize),e.classList.add("popup-resizing")}_createColumnIconHTML(t){const e=t.reduce(((t,e)=>t+e),0);return`<div style="display: flex; width: 100%; height: 16px; gap: 2px;">${t.map(((t,i)=>`<div style="width: ${t/e*100}%; height: 16px; background: #2196F3; border-radius: 2px; ${i>0?"margin-left: 2px;":""}"></div>`)).join("")}</div>`}_createSimpleIcon(t){return t.map((t=>"█".repeat(t))).join(" ")}_getLayoutsForColumnCount(t){const e=Math.min(t,6);return this.COLUMN_LAYOUTS.filter((t=>t.columnCount===e))}_migrateLegacyLayoutId(t){return{"50-50":"1-2-1-2","30-70":"1-3-2-3","70-30":"2-3-1-3","33-33-33":"1-3-1-3-1-3","25-50-25":"1-4-1-2-1-4","20-60-20":"1-5-3-5-1-5","25-25-25-25":"1-4-1-4-1-4-1-4"}[t]||t}_ensureLayout(){return this.config.layout&&this.config.layout.rows?this.config.layout:{rows:[{id:`row-${Date.now()}`,columns:[{id:`col-${Date.now()}`,modules:[],vertical_alignment:"center",horizontal_alignment:"center"}],column_layout:"1-col"}]}}_updateConfig(t){const e=Object.assign(Object.assign({},this.config),t),i=new CustomEvent("config-changed",{detail:{config:e},bubbles:!0,composed:!0});this.dispatchEvent(i)}_updateLayout(t){this._updateConfig({layout:t})}_addRow(){console.log("Adding new row...");const t=this._ensureLayout(),e={id:`row-${Date.now()}`,columns:[],column_layout:"1-col"},i={rows:[...t.rows,e]};this._updateLayout(i),console.log("Row added successfully (empty row)")}_deleteRow(t){console.log("Deleting row:",t);const e=this._ensureLayout();if(e.rows.length>1){const i={rows:e.rows.filter(((e,i)=>i!==t))};this._updateLayout(i),console.log("Row deleted successfully")}else console.log("Cannot delete the last remaining row")}_duplicateRow(t){console.log("Duplicating row:",t);const e=this._ensureLayout(),i=e.rows[t];if(!i)return void console.error("Row to copy not found at index:",t);const o=Object.assign(Object.assign({},JSON.parse(JSON.stringify(i))),{id:`row-${Date.now()}`,columns:i.columns.map(((t,e)=>Object.assign(Object.assign({},JSON.parse(JSON.stringify(t))),{id:`col-${Date.now()}-${e}-${Math.random().toString(36).substr(2,9)}`,modules:t.modules.map(((t,e)=>Object.assign(Object.assign({},JSON.parse(JSON.stringify(t))),{id:`${t.type}-${Date.now()}-${e}-${Math.random().toString(36).substr(2,9)}`})))})))}),n=JSON.parse(JSON.stringify(e));n.rows.splice(t+1,0,o),this._updateLayout(n),console.log("Row duplicated successfully. New layout has",n.rows.length,"rows")}_addColumn(t){console.log("Adding column to row:",t);const e=this._ensureLayout(),i=e.rows[t];if(!i)return void console.error("Row not found at index:",t);if(i.columns.length>=6)return void console.log("Cannot add more than 6 columns to a row");const o={id:`col-${Date.now()}-${Math.random().toString(36).substr(2,9)}`,modules:[],vertical_alignment:"center",horizontal_alignment:"center"},n={rows:e.rows.map(((e,i)=>i===t?Object.assign(Object.assign({},e),{columns:[...e.columns,o]}):e))};this._updateLayout(n),console.log("Column added successfully. Row now has",n.rows[t].columns.length,"columns")}_addColumnAfter(t,e){console.log("Adding column after:",t,e);const i=this._ensureLayout(),o=i.rows[t];if(!o)return;if(o.columns.length>=6)return void console.log("Cannot add more than 6 columns to a row");const n={id:`col-${Date.now()}`,modules:[],vertical_alignment:"center",horizontal_alignment:"center"},a={rows:i.rows.map(((i,o)=>{if(o===t){const t=[...i.columns];return t.splice(e+1,0,n),Object.assign(Object.assign({},i),{columns:t})}return i}))};this._updateLayout(a),console.log("Column added after successfully")}_duplicateColumn(t,e){console.log("Duplicating column:",t,e);const i=this._ensureLayout(),o=i.rows[t];if(!o||!o.columns[e])return void console.error("Row or column not found:",t,e);if(o.columns.length>=6)return void console.log("Cannot duplicate column: maximum 6 columns already reached");const n=o.columns[e],a=Object.assign(Object.assign({},JSON.parse(JSON.stringify(n))),{id:`col-${Date.now()}-${Math.random().toString(36).substr(2,9)}`,modules:n.modules.map(((t,e)=>Object.assign(Object.assign({},JSON.parse(JSON.stringify(t))),{id:`${t.type}-${Date.now()}-${e}-${Math.random().toString(36).substr(2,9)}`})))}),r=JSON.parse(JSON.stringify(i));r.rows[t].columns.splice(e+1,0,a),this._updateLayout(r),console.log("Column duplicated successfully. Row now has",r.rows[t].columns.length,"columns")}_deleteColumn(t,e){console.log("Deleting column:",t,e);const i=this._ensureLayout(),o=i.rows[t];if(!o)return void console.error("Row not found at index:",t);if(!o.columns[e])return void console.error("Column not found at index:",e);const n={rows:i.rows.map(((i,o)=>o===t?Object.assign(Object.assign({},i),{columns:i.columns.filter(((t,i)=>i!==e))}):i))};this._updateLayout(n),console.log("Column deleted successfully. Row now has",n.rows[t].columns.length,"columns")}_openColumnLayoutSelector(t){this._selectedRowForLayout=t,this._showColumnLayoutSelector=!0}_changeColumnLayout(t){if(-1===this._selectedRowForLayout)return;const e=this._ensureLayout(),i=e.rows[this._selectedRowForLayout];if(!i)return;const o=this.COLUMN_LAYOUTS.find((e=>e.id===t));if(!o)return;const n=o.columnCount,a=i.columns.length;console.log(`Changing layout from ${a} to ${n} columns`);const r=JSON.parse(JSON.stringify(e)),s=r.rows[this._selectedRowForLayout];if(n===a)s.column_layout=t;else if(n>a){const e=[...s.columns];for(let t=a;t<n;t++)e.push({id:`col-${Date.now()}-${t}-${Math.random().toString(36).substr(2,9)}`,modules:[],vertical_alignment:"center",horizontal_alignment:"center"});s.columns=e,s.column_layout=t}else{const e=[],i=[];s.columns.forEach((t=>{t.modules&&t.modules.length>0&&i.push(...t.modules)}));for(let t=0;t<n;t++)t<a?e.push(Object.assign(Object.assign({},s.columns[t]),{modules:[]})):e.push({id:`col-${Date.now()}-${t}-${Math.random().toString(36).substr(2,9)}`,modules:[],vertical_alignment:"center",horizontal_alignment:"center"});i.length>0&&(1===n?e[0].modules=i:i.forEach(((t,i)=>{e[i%n].modules.push(t)}))),s.columns=e,s.column_layout=t}this._updateLayout(r),console.log(`Layout changed successfully. Row now has ${n} columns`),this._showColumnLayoutSelector=!1,this._selectedRowForLayout=-1}_getCurrentLayoutDisplay(t){const e=t.columns.length,i=t.column_layout,o=this.COLUMN_LAYOUTS.find((t=>t.id===i));if(o)return this._createSimpleIcon(o.proportions);switch(e){case 1:return"█";case 2:return"█ █";case 3:return"█ █ █";case 4:return"█ █ █ █";default:return"█ ".repeat(Math.min(e,6)).trim()}}_openModuleSelector(t,e){console.log("Opening module selector for:",{rowIndex:t,columnIndex:e});const i=this._ensureLayout().rows[t];i&&i.columns&&0!==i.columns.length||(console.log("Row has no columns, automatically adding one"),this._addColumn(t),e=0),this._selectedRowIndex=t,this._selectedColumnIndex=e,this._showModuleSelector=!0}_addModule(t){if(console.log("Adding module of type:",t),-1===this._selectedRowIndex||-1===this._selectedColumnIndex)return void console.error("No row or column selected");const e=this._ensureLayout();if(!e.rows[this._selectedRowIndex])return void console.error("Selected row does not exist:",this._selectedRowIndex);const i=e.rows[this._selectedRowIndex];if(!i.columns[this._selectedColumnIndex])return void console.error("Selected column does not exist:",this._selectedColumnIndex);const o=i.columns[this._selectedColumnIndex];let n,a;switch(t){case"text":n={id:`text-${Date.now()}-${Math.random().toString(36).substr(2,9)}`,type:"text",text:"Sample Text",font_size:16,color:"var(--primary-text-color)"},delete n.name,delete n.title;break;case"separator":n={id:`separator-${Date.now()}-${Math.random().toString(36).substr(2,9)}`,type:"separator",thickness:1,color:"var(--divider-color)"},delete n.name,delete n.title,delete n.label;break;case"image":n={id:`image-${Date.now()}-${Math.random().toString(36).substr(2,9)}`,type:"image",image_type:"none"},delete n.name,delete n.title,delete n.label;break;case"markdown":n={id:`markdown-${Date.now()}-${Math.random().toString(36).substr(2,9)}`,type:"markdown",content:"This is a markdown module that supports:\n\n- Italic and bold text\n- Links\n- inline code\n- Lists and more!",markdown_content:"This is a markdown module that supports:\n\n- Italic and bold text\n- Links\n- inline code\n- Lists and more!"},delete n.name,delete n.title,delete n.label;break;case"bar":n={id:`bar-${Date.now()}-${Math.random().toString(36).substr(2,9)}`,type:"bar",entity:"sensor.battery_level",bar_color:"var(--primary-color)",background_color:"var(--secondary-background-color)",height:20,show_value:!0},delete n.name,delete n.title,delete n.label;break;case"button":n={id:`button-${Date.now()}-${Math.random().toString(36).substr(2,9)}`,type:"button",label:"Click Me",button_text:"Click Me",tap_action:{action:"more-info"}},delete n.name,delete n.title;break;case"info":n={id:`info-${Date.now()}-${Math.random().toString(36).substr(2,9)}`,type:"info",info_entities:[{entity:"sensor.temperature",name:"Temperature",icon:"mdi:thermometer"}]},delete n.name,delete n.title,delete n.label;break;default:try{const e=pe().createDefaultModule(t);if(e){n=e,delete n.name,delete n.title,delete n.label;break}}catch(t){console.error("Module registry failed:",t)}n={id:`text-${Date.now()}-${Math.random().toString(36).substr(2,9)}`,type:"text",text:"Unknown Module Type",font_size:16,color:"var(--primary-text-color)"}}if(console.log("Created module:",n),a=this._selectedLayoutModuleIndex>=0?{rows:e.rows.map(((t,e)=>e===this._selectedRowIndex?Object.assign(Object.assign({},t),{columns:t.columns.map(((t,e)=>e===this._selectedColumnIndex?Object.assign(Object.assign({},t),{modules:t.modules.map(((t,e)=>{if(e===this._selectedLayoutModuleIndex){const e=t;return Object.assign(Object.assign({},e),{modules:[...e.modules||[],n]})}return t}))}):t))}):t))}:{rows:e.rows.map(((t,e)=>e===this._selectedRowIndex?Object.assign(Object.assign({},t),{columns:t.columns.map(((t,e)=>e===this._selectedColumnIndex?Object.assign(Object.assign({},t),{modules:[...t.modules||[],n]}):t))}):t))},this._updateLayout(a),this._showModuleSelector=!1,this._shouldAutoOpenSettings(t))if(this._selectedLayoutModuleIndex>=0);else{const t=o.modules.length;this._openModuleSettings(this._selectedRowIndex,this._selectedColumnIndex,t)}this._selectedRowIndex=-1,this._selectedColumnIndex=-1,this._selectedLayoutModuleIndex=-1,console.log("Module added successfully")}_duplicateModule(t,e,i){console.log("Duplicating module:",t,e,i);const o=this._ensureLayout(),n=o.rows[t];if(!n||!n.columns[e])return;const a=n.columns[e];if(!a.modules||!a.modules[i])return;const r=a.modules[i],s=Object.assign(Object.assign({},JSON.parse(JSON.stringify(r))),{id:`${r.type}-${Date.now()}-${Math.random().toString(36).substr(2,9)}`}),l={rows:o.rows.map(((o,n)=>n===t?Object.assign(Object.assign({},o),{columns:o.columns.map(((t,o)=>{if(o===e){const e=[...t.modules];return e.splice(i+1,0,s),Object.assign(Object.assign({},t),{modules:e})}return t}))}):o))};this._updateLayout(l),console.log("Module duplicated successfully")}_deleteModule(t,e,i){console.log("Deleting module:",t,e,i);const o=this._ensureLayout(),n=o.rows[t];if(!n||!n.columns[e])return;const a=n.columns[e];if(!a.modules||!a.modules[i])return;const r={rows:o.rows.map(((o,n)=>n===t?Object.assign(Object.assign({},o),{columns:o.columns.map(((t,o)=>o===e?Object.assign(Object.assign({},t),{modules:t.modules.filter(((t,e)=>e!==i))}):t))}):o))};this._updateLayout(r),console.log("Module deleted successfully")}_openModuleSettings(t,e,i){this._selectedModule={rowIndex:t,columnIndex:e,moduleIndex:i},this._showModuleSettings=!0}_updateModule(t){if(console.log("🔄 LayoutTab: _updateModule called with updates:",t),!this._selectedModule)return void console.log("🔄 LayoutTab: No selected module, returning early");const e=this._ensureLayout(),{rowIndex:i,columnIndex:o,moduleIndex:n}=this._selectedModule;console.log(`🔄 LayoutTab: Updating module at row ${i}, column ${o}, module ${n}`);const a={rows:e.rows.map(((e,a)=>a===i?Object.assign(Object.assign({},e),{columns:e.columns.map(((e,i)=>i===o?Object.assign(Object.assign({},e),{modules:e.modules.map(((e,i)=>{if(i===n){console.log("🔄 LayoutTab: Original module:",e);const i=Object.assign({},e);for(const[e,o]of Object.entries(t))void 0===o?(console.log(`🔄 LayoutTab: DELETING property ${e} from module`),delete i[e]):(console.log(`🔄 LayoutTab: SETTING property ${e} =`,o),i[e]=o);return console.log("🔄 LayoutTab: Updated module:",i),i}return e}))}):e))}):e))};console.log("🔄 LayoutTab: Calling _updateLayout with new layout"),this._updateLayout(a),console.log("🔄 LayoutTab: Layout updated successfully")}_updateLayoutChildModule(t){if(console.log("🔄 LayoutTab: _updateLayoutChildModule called with updates:",t),!this._selectedLayoutChild)return void console.log("🔄 LayoutTab: No selected layout child, returning early");const{parentRowIndex:e,parentColumnIndex:i,parentModuleIndex:o,childIndex:n}=this._selectedLayoutChild,a=this._ensureLayout(),r=JSON.parse(JSON.stringify(a)),s=r.rows[e];if(!s||!s.columns[i])return;const l=s.columns[i];if(!l.modules||!l.modules[o])return;const d=l.modules[o];if(!d.modules||!d.modules[n])return;const c=d.modules[n];console.log("🔄 LayoutTab: Original child module:",c);const p=Object.assign({},c);for(const[e,i]of Object.entries(t))void 0===i?(console.log(`🔄 LayoutTab: DELETING property ${e} from child module`),delete p[e]):(console.log(`🔄 LayoutTab: SETTING child module property ${e} =`,i),p[e]=i);d.modules[n]=p,console.log("🔄 LayoutTab: Updated child module:",p),this._updateLayout(r),console.log("🔄 LayoutTab: Layout child module updated successfully")}_updateModuleDesign(t){var e,i,o,n,a,r,s,l,d,c,p,u,m,g,h,b,v,_,f,y;if(console.log("🔄 LayoutTab: _updateModuleDesign called with updates:",t),console.log("🔄 LayoutTab: _selectedModule:",this._selectedModule),!this._selectedModule)return void console.log("🔄 LayoutTab: No selected module, returning early");const x={};if(t.hasOwnProperty("color")&&(x.color=t.color),t.hasOwnProperty("text_align")){const o=this._ensureLayout(),{rowIndex:n,columnIndex:a,moduleIndex:r}=this._selectedModule,s=null===(i=null===(e=o.rows[n])||void 0===e?void 0:e.columns[a])||void 0===i?void 0:i.modules[r];s&&"text"===s.type?(x.design||(x.design=Object.assign({},s.design||{})),x.design.text_align=t.text_align):x.text_align=t.text_align}if(t.hasOwnProperty("font_size")&&(x.font_size=t.font_size?parseFloat(t.font_size):void 0),t.hasOwnProperty("line_height")&&(x.line_height=t.line_height),t.hasOwnProperty("letter_spacing")&&(x.letter_spacing=t.letter_spacing),t.hasOwnProperty("font_family")&&(x.font_family=t.font_family),t.hasOwnProperty("font_weight")&&(x.font_weight=t.font_weight),t.hasOwnProperty("text_transform")&&(x.text_transform=t.text_transform),t.hasOwnProperty("font_style")&&(x.font_style=t.font_style),t.hasOwnProperty("background_color")&&(x.background_color=t.background_color),t.hasOwnProperty("background_image")&&(x.background_image=t.background_image),t.hasOwnProperty("background_image_type")&&(x.background_image_type=t.background_image_type),t.hasOwnProperty("background_image_entity")&&(x.background_image_entity=t.background_image_entity),t.hasOwnProperty("backdrop_filter")&&(x.backdrop_filter=t.backdrop_filter),t.hasOwnProperty("width")&&(x.width=t.width),t.hasOwnProperty("height")&&(x.height=t.height),t.hasOwnProperty("max_width")&&(x.max_width=t.max_width),t.hasOwnProperty("max_height")&&(x.max_height=t.max_height),t.hasOwnProperty("min_width")&&(x.min_width=t.min_width),t.hasOwnProperty("min_height")&&(x.min_height=t.min_height),t.hasOwnProperty("position")&&(x.position=t.position),t.hasOwnProperty("top")&&(x.top=t.top),t.hasOwnProperty("bottom")&&(x.bottom=t.bottom),t.hasOwnProperty("left")&&(x.left=t.left),t.hasOwnProperty("right")&&(x.right=t.right),t.hasOwnProperty("z_index")&&(x.z_index=t.z_index),t.hasOwnProperty("text_shadow_h")&&(x.text_shadow_h=t.text_shadow_h),t.hasOwnProperty("text_shadow_v")&&(x.text_shadow_v=t.text_shadow_v),t.hasOwnProperty("text_shadow_blur")&&(x.text_shadow_blur=t.text_shadow_blur),t.hasOwnProperty("text_shadow_color")&&(x.text_shadow_color=t.text_shadow_color),t.hasOwnProperty("box_shadow_h")&&(x.box_shadow_h=t.box_shadow_h),t.hasOwnProperty("box_shadow_v")&&(x.box_shadow_v=t.box_shadow_v),t.hasOwnProperty("box_shadow_blur")&&(x.box_shadow_blur=t.box_shadow_blur),t.hasOwnProperty("box_shadow_spread")&&(x.box_shadow_spread=t.box_shadow_spread),t.hasOwnProperty("box_shadow_color")&&(x.box_shadow_color=t.box_shadow_color),t.hasOwnProperty("overflow")&&(x.overflow=t.overflow),t.hasOwnProperty("clip_path")&&(x.clip_path=t.clip_path),t.hasOwnProperty("margin_top")&&(x.margin_top=t.margin_top),t.hasOwnProperty("margin_bottom")&&(x.margin_bottom=t.margin_bottom),t.hasOwnProperty("margin_left")&&(x.margin_left=t.margin_left),t.hasOwnProperty("margin_right")&&(x.margin_right=t.margin_right),t.hasOwnProperty("padding_top")&&(x.padding_top=t.padding_top),t.hasOwnProperty("padding_bottom")&&(x.padding_bottom=t.padding_bottom),t.hasOwnProperty("padding_left")&&(x.padding_left=t.padding_left),t.hasOwnProperty("padding_right")&&(x.padding_right=t.padding_right),t.hasOwnProperty("border_radius")&&(x.border_radius=t.border_radius),t.hasOwnProperty("border_style")&&(x.border_style=t.border_style),t.hasOwnProperty("border_width")&&(x.border_width=t.border_width),t.hasOwnProperty("border_color")&&(x.border_color=t.border_color),t.hasOwnProperty("animation_type")&&(x.animation_type=t.animation_type),t.hasOwnProperty("animation_entity")&&(x.animation_entity=t.animation_entity),t.hasOwnProperty("animation_trigger_type")&&(x.animation_trigger_type=t.animation_trigger_type),t.hasOwnProperty("animation_attribute")&&(x.animation_attribute=t.animation_attribute),t.hasOwnProperty("animation_state")&&(x.animation_state=t.animation_state),t.hasOwnProperty("intro_animation")&&(x.intro_animation=t.intro_animation),t.hasOwnProperty("outro_animation")&&(x.outro_animation=t.outro_animation),t.hasOwnProperty("animation_duration")&&(x.animation_duration=t.animation_duration),t.hasOwnProperty("animation_delay")&&(x.animation_delay=t.animation_delay),t.hasOwnProperty("animation_timing")&&(x.animation_timing=t.animation_timing),t.hasOwnProperty("margin_top")||t.hasOwnProperty("margin_bottom")||t.hasOwnProperty("margin_left")||t.hasOwnProperty("margin_right")){const{rowIndex:e,columnIndex:i,moduleIndex:d}=this._selectedModule,c=null===(n=null===(o=this._ensureLayout().rows[e])||void 0===o?void 0:o.columns[i])||void 0===n?void 0:n.modules[d];if(c){const e=t.hasOwnProperty("margin_top")?t.margin_top:null===(a=c.margin)||void 0===a?void 0:a.top,i=t.hasOwnProperty("margin_bottom")?t.margin_bottom:null===(r=c.margin)||void 0===r?void 0:r.bottom,o=t.hasOwnProperty("margin_left")?t.margin_left:null===(s=c.margin)||void 0===s?void 0:s.left,n=t.hasOwnProperty("margin_right")?t.margin_right:null===(l=c.margin)||void 0===l?void 0:l.right;if(void 0===e&&void 0===i&&void 0===o&&void 0===n)x.margin=void 0;else{const t=c.margin||{};x.margin={top:void 0!==e?parseFloat(e)||0:t.top||0,bottom:void 0!==i?parseFloat(i)||0:t.bottom||0,left:void 0!==o?parseFloat(o)||0:t.left||0,right:void 0!==n?parseFloat(n)||0:t.right||0}}}}if(t.hasOwnProperty("padding_top")||t.hasOwnProperty("padding_bottom")||t.hasOwnProperty("padding_left")||t.hasOwnProperty("padding_right")){const{rowIndex:e,columnIndex:i,moduleIndex:o}=this._selectedModule,n=null===(c=null===(d=this._ensureLayout().rows[e])||void 0===d?void 0:d.columns[i])||void 0===c?void 0:c.modules[o];if(n){const e=t.hasOwnProperty("padding_top")?t.padding_top:null===(p=n.padding)||void 0===p?void 0:p.top,i=t.hasOwnProperty("padding_bottom")?t.padding_bottom:null===(u=n.padding)||void 0===u?void 0:u.bottom,o=t.hasOwnProperty("padding_left")?t.padding_left:null===(m=n.padding)||void 0===m?void 0:m.left,a=t.hasOwnProperty("padding_right")?t.padding_right:null===(g=n.padding)||void 0===g?void 0:g.right;if(void 0===e&&void 0===i&&void 0===o&&void 0===a)x.padding=void 0;else{const t=n.padding||{};x.padding={top:void 0!==e?parseFloat(e)||0:t.top||0,bottom:void 0!==i?parseFloat(i)||0:t.bottom||0,left:void 0!==o?parseFloat(o)||0:t.left||0,right:void 0!==a?parseFloat(a)||0:t.right||0}}}}if(t.hasOwnProperty("border_radius")||t.hasOwnProperty("border_style")||t.hasOwnProperty("border_width")||t.hasOwnProperty("border_color")){const{rowIndex:e,columnIndex:i,moduleIndex:o}=this._selectedModule,n=null===(b=null===(h=this._ensureLayout().rows[e])||void 0===h?void 0:h.columns[i])||void 0===b?void 0:b.modules[o];if(n){const e=t.hasOwnProperty("border_radius")?t.border_radius:null===(v=n.border)||void 0===v?void 0:v.radius,i=t.hasOwnProperty("border_style")?t.border_style:null===(_=n.border)||void 0===_?void 0:_.style,o=t.hasOwnProperty("border_width")?t.border_width:null===(f=n.border)||void 0===f?void 0:f.width,a=t.hasOwnProperty("border_color")?t.border_color:null===(y=n.border)||void 0===y?void 0:y.color;if(void 0===e&&void 0===i&&void 0===o&&void 0===a)x.border=void 0;else{const t=n.border||{};x.border={radius:void 0!==e?parseFloat(e)||0:t.radius||0,style:void 0!==i?i:t.style||"none",width:void 0!==o?o:t.width||"1px",color:void 0!==a?a:t.color||"var(--divider-color)"}}}}console.log("🔄 LayoutTab: Final moduleUpdates being applied:",x),this._updateModule(x),console.log("🔄 LayoutTab: _updateModule called successfully")}_closeModuleSettings(){this._showModuleSettings=!1,this._selectedModule=null,this.requestUpdate()}_closeLayoutChildSettings(){this._showLayoutChildSettings=!1,this._selectedLayoutChild=null,this.requestUpdate()}_onDragStart(t,e,i,o,n){var a,r,s;if(!t.dataTransfer)return;t.stopPropagation();const l=this._ensureLayout();let d;switch(e){case"module":void 0!==o&&void 0!==n&&(d=null===(r=null===(a=l.rows[i])||void 0===a?void 0:a.columns[o])||void 0===r?void 0:r.modules[n]);break;case"column":void 0!==o&&(d=null===(s=l.rows[i])||void 0===s?void 0:s.columns[o]);break;case"row":d=l.rows[i]}this._draggedItem={type:e,rowIndex:i,columnIndex:o,moduleIndex:n,data:d},t.dataTransfer.effectAllowed="move",t.dataTransfer.setData("text/plain",JSON.stringify({type:e,rowIndex:i,columnIndex:o,moduleIndex:n}));const c=t.currentTarget;c&&(c.style.opacity="0.6",c.style.transform="scale(0.95)"),"column"===e?this.setAttribute("dragging-column",""):"row"===e&&this.setAttribute("dragging-row","")}_onDragEnd(t){const e=t.currentTarget;e&&(e.style.opacity="",e.style.transform=""),this.removeAttribute("dragging-column"),this.removeAttribute("dragging-row"),this._draggedItem=null,this._dropTarget=null,this.requestUpdate()}_onDragOver(t){this._draggedItem&&(t.preventDefault(),t.stopPropagation(),t.dataTransfer&&(t.dataTransfer.dropEffect="move"))}_onDragEnter(t,e,i,o,n){if(t.preventDefault(),t.stopPropagation(),!this._draggedItem)return;if(this._draggedItem.type===e&&this._draggedItem.rowIndex===i&&this._draggedItem.columnIndex===o&&this._draggedItem.moduleIndex===n)return;if(void 0!==this._draggedItem.layoutChildIndex&&"layout"===e&&this._draggedItem.rowIndex===i&&this._draggedItem.columnIndex===o&&this._draggedItem.moduleIndex===n)return;if(!this._isValidDropTarget(this._draggedItem.type,e))return;this._dropTarget={type:e,rowIndex:i,columnIndex:o,moduleIndex:n};const a=t.currentTarget;a&&(a.style.borderColor="var(--primary-color)",a.style.backgroundColor="rgba(var(--rgb-primary-color), 0.1)"),this.requestUpdate()}_onDragLeave(t){const e=t.currentTarget;e&&(e.style.borderColor="",e.style.backgroundColor=""),t.relatedTarget&&t.currentTarget&&!t.currentTarget.contains(t.relatedTarget)&&(this._dropTarget=null,this.requestUpdate())}_onDrop(t,e,i,o,n){t.preventDefault(),t.stopPropagation();const a=t.currentTarget;a&&(a.style.borderColor="",a.style.backgroundColor=""),this._draggedItem&&(this._draggedItem.type===e&&this._draggedItem.rowIndex===i&&this._draggedItem.columnIndex===o&&this._draggedItem.moduleIndex===n||this._isValidDropTarget(this._draggedItem.type,e)&&(this._performMove(this._draggedItem,{type:e,rowIndex:i,columnIndex:o,moduleIndex:n}),this._draggedItem=null,this._dropTarget=null,this.requestUpdate()))}_isValidDropTarget(t,e){var i;return(null===(i={module:["module","column","layout","layout-child"],column:["column","row"],row:["row"]}[t])||void 0===i?void 0:i.includes(e))||!1}_performMove(t,e){const i=this._ensureLayout(),o=JSON.parse(JSON.stringify(i));switch(t.type){case"module":this._moveModule(o,t,e);break;case"column":this._moveColumn(o,t,e);break;case"row":this._moveRow(o,t,e)}this._updateLayout(o)}_moveModule(t,e,i){let o;if(void 0!==e.layoutChildIndex&&"layout-child"===i.type){const o=e.rowIndex,n=e.columnIndex,a=e.moduleIndex,r=e.layoutChildIndex,s=i.rowIndex,l=i.columnIndex,d=i.moduleIndex,c=i.childIndex;if(o===s&&n===l&&a===d){if(r===c)return;const e=t.rows[o].columns[n].modules[a];if(e&&this._isLayoutModule(e.type)&&e.modules){const t=e.modules.splice(r,1)[0];let i=c;r<c&&(i=c-1),e.modules.splice(i,0,t)}return}}if(void 0!==e.layoutChildIndex){const i=t.rows[e.rowIndex].columns[e.columnIndex].modules[e.moduleIndex];o=i.modules[e.layoutChildIndex],i.modules.splice(e.layoutChildIndex,1)}else o=t.rows[e.rowIndex].columns[e.columnIndex].modules[e.moduleIndex];if("layout"!==i.type)if("layout-child"!==i.type)if(void 0===e.layoutChildIndex&&t.rows[e.rowIndex].columns[e.columnIndex].modules.splice(e.moduleIndex,1),"module"===i.type){let n=i.moduleIndex||0;e.rowIndex===i.rowIndex&&e.columnIndex===i.columnIndex&&i.moduleIndex>e.moduleIndex&&n--,t.rows[i.rowIndex].columns[i.columnIndex].modules.splice(n,0,o)}else"column"===i.type&&t.rows[i.rowIndex].columns[i.columnIndex].modules.push(o);else{const n=t.rows[i.rowIndex].columns[i.columnIndex].modules[i.moduleIndex];if(n&&this._isLayoutModule(n.type)){n.modules||(n.modules=[]);const a=i.childIndex||0;n.modules.splice(a,0,o),void 0===e.layoutChildIndex&&t.rows[e.rowIndex].columns[e.columnIndex].modules.splice(e.moduleIndex,1)}}else{const n=t.rows[i.rowIndex].columns[i.columnIndex].modules[i.moduleIndex];n&&this._isLayoutModule(n.type)&&(n.modules||(n.modules=[]),n.modules.push(o),void 0===e.layoutChildIndex&&t.rows[e.rowIndex].columns[e.columnIndex].modules.splice(e.moduleIndex,1))}}_moveColumn(t,e,i){const o=t.rows[e.rowIndex].columns[e.columnIndex];t.rows[e.rowIndex].columns.splice(e.columnIndex,1),"column"===i.type?t.rows[i.rowIndex].columns.splice(i.columnIndex||0,0,o):"row"===i.type&&t.rows[i.rowIndex].columns.push(o)}_moveRow(t,e,i){const o=t.rows[e.rowIndex];t.rows.splice(e.rowIndex,1);const n=i.rowIndex;t.rows.splice(n,0,o)}_openRowSettings(t){this._selectedRowForSettings=t,this._showRowSettings=!0}_updateRow(t){if(console.log("🔄 LayoutTab: _updateRow called with updates:",t),-1===this._selectedRowForSettings)return void console.log("🔄 LayoutTab: No selected row for settings, returning early");const e=this._ensureLayout(),i=JSON.parse(JSON.stringify(e)),o=i.rows[this._selectedRowForSettings];console.log("🔄 LayoutTab: Original row:",o);for(const[e,i]of Object.entries(t))void 0===i?(console.log(`🔄 LayoutTab: DELETING property ${e} from row`),delete o[e]):(console.log(`🔄 LayoutTab: SETTING row property ${e} =`,i),o[e]=i);console.log("🔄 LayoutTab: Updated row:",o),this._updateLayout(i),console.log("🔄 LayoutTab: Row updated successfully")}_openColumnSettings(t,e){this._selectedColumnForSettings={rowIndex:t,columnIndex:e},this._showColumnSettings=!0}_updateColumn(t){if(console.log("🔄 LayoutTab: _updateColumn called with updates:",t),!this._selectedColumnForSettings)return void console.log("🔄 LayoutTab: No selected column for settings, returning early");const e=this._ensureLayout(),i=JSON.parse(JSON.stringify(e)),o=i.rows[this._selectedColumnForSettings.rowIndex].columns[this._selectedColumnForSettings.columnIndex];console.log("🔄 LayoutTab: Original column:",o);for(const[e,i]of Object.entries(t))void 0===i?(console.log(`🔄 LayoutTab: DELETING property ${e} from column`),delete o[e]):(console.log(`🔄 LayoutTab: SETTING column property ${e} =`,i),o[e]=i);console.log("🔄 LayoutTab: Updated column:",o),this._updateLayout(i),console.log("🔄 LayoutTab: Column updated successfully")}_loadGoogleFont(t){if(!t||"default"===t||Ce.some((e=>e.value===t)))return;if(document.querySelector(`link[href*="${t.replace(/\s+/g,"+")}"]`))return;const e=document.createElement("link");e.rel="stylesheet",e.href=`https://fonts.googleapis.com/css2?family=${t.replace(/\s+/g,"+")}:wght@300;400;500;600;700&display=swap`,document.head.appendChild(e)}_renderModulePreview(){var t,e,i;if(!this._selectedModule)return q``;const{rowIndex:o,columnIndex:n,moduleIndex:a}=this._selectedModule,r=null===(i=null===(e=null===(t=this.config.layout)||void 0===t?void 0:t.rows[o])||void 0===e?void 0:e.columns[n])||void 0===i?void 0:i.modules[a];if(!r)return q``;const s=pe().getModule(r.type),l=s&&"function"==typeof s.renderSplitPreview?s.renderSplitPreview(r,this.hass):this._renderSingleModuleWithAnimation(r);return q`
      <div class="module-preview">
        <div class="preview-header">Live Preview</div>
        <div class="preview-content">${l}</div>
      </div>
    `}_renderSingleModule(t,e,i,o){return this._renderSimplifiedModule(t,e,i,o)}_renderSimplifiedModule(t,e,i,o){const n=pe().getModule(t.type),a=(null==n?void 0:n.metadata)||{icon:"mdi:help-circle",title:"Unknown",description:"Unknown module type"};if("horizontal"===t.type||"vertical"===t.type)return this._renderLayoutModuleAsColumn(t,e,i,o,a);const r=this._generateModuleInfo(t),s=this._getModuleDisplayName(t);return q`
      <div class="simplified-module">
        <div class="simplified-module-header">
          <div class="simplified-module-drag-handle" title="Drag to move module">
            <ha-icon icon="mdi:drag"></ha-icon>
          </div>
          <ha-icon icon="${a.icon}" class="simplified-module-icon"></ha-icon>
          <div class="simplified-module-content">
            <div class="simplified-module-title">${s}</div>
            <div class="simplified-module-info">${r}</div>
          </div>
          ${void 0!==e&&void 0!==i&&void 0!==o?q`
                <div class="simplified-module-actions">
                  <button
                    class="simplified-action-btn edit-btn"
                    @click=${t=>{t.stopPropagation(),this._openModuleSettings(e,i,o)}}
                    @mousedown=${t=>t.stopPropagation()}
                    @dragstart=${t=>t.preventDefault()}
                    title="Edit Module"
                  >
                    <ha-icon icon="mdi:pencil"></ha-icon>
                  </button>
                  <button
                    class="simplified-action-btn duplicate-btn"
                    @click=${t=>{t.stopPropagation(),this._duplicateModule(e,i,o)}}
                    @mousedown=${t=>t.stopPropagation()}
                    @dragstart=${t=>t.preventDefault()}
                    title="Duplicate Module"
                  >
                    <ha-icon icon="mdi:content-copy"></ha-icon>
                  </button>
                  <button
                    class="simplified-action-btn delete-btn"
                    @click=${t=>{t.stopPropagation(),this._deleteModule(e,i,o)}}
                    @mousedown=${t=>t.stopPropagation()}
                    @dragstart=${t=>t.preventDefault()}
                    title="Delete Module"
                  >
                    <ha-icon icon="mdi:delete"></ha-icon>
                  </button>
                </div>
              `:""}
        </div>
      </div>
    `}_renderLayoutModuleAsColumn(t,e,i,o,n){const a=t,r=a.modules&&a.modules.length>0,s="horizontal"===t.type;return t.type,q`
      <div class="layout-module-container">
        <div class="layout-module-header">
          <div class="layout-module-title">
            <div class="layout-module-drag-handle" title="Drag to move layout module">
              <ha-icon icon="mdi:drag"></ha-icon>
            </div>
            <ha-icon icon="${(null==n?void 0:n.icon)||"mdi:view-sequential"}"></ha-icon>
            <span>${s?"Horizontal Layout":"Vertical Layout"}</span>
          </div>
          <div class="layout-module-actions">
            ${void 0!==e&&void 0!==i&&void 0!==o?q`
                  <button
                    class="layout-module-add-btn"
                    @click=${t=>{t.stopPropagation(),this._openLayoutModuleSelector(e,i,o)}}
                    @mousedown=${t=>t.stopPropagation()}
                    @dragstart=${t=>t.preventDefault()}
                    title="Add Module to Layout"
                  >
                    <ha-icon icon="mdi:plus"></ha-icon>
                  </button>
                  <button
                    class="layout-module-settings-btn"
                    @click=${t=>{t.stopPropagation(),this._openModuleSettings(e,i,o)}}
                    @mousedown=${t=>t.stopPropagation()}
                    @dragstart=${t=>t.preventDefault()}
                    title="Layout Settings"
                  >
                    <ha-icon icon="mdi:cog"></ha-icon>
                  </button>
                  <button
                    class="layout-module-duplicate-btn"
                    @click=${t=>{t.stopPropagation(),this._duplicateModule(e,i,o)}}
                    @mousedown=${t=>t.stopPropagation()}
                    @dragstart=${t=>t.preventDefault()}
                    title="Duplicate Layout"
                  >
                    <ha-icon icon="mdi:content-copy"></ha-icon>
                  </button>
                  <button
                    class="layout-module-delete-btn"
                    @click=${t=>{t.stopPropagation(),this._deleteModule(e,i,o)}}
                    @mousedown=${t=>t.stopPropagation()}
                    @dragstart=${t=>t.preventDefault()}
                    title="Delete Layout"
                  >
                    <ha-icon icon="mdi:delete"></ha-icon>
                  </button>
                `:""}
          </div>
        </div>
        <div
          class="layout-modules-container"
          style="
            display: flex;
            flex-direction: column;
            gap: 1rem;
            padding: 8px 12px;
            min-height: 60px;
            box-sizing: border-box;
            overflow: hidden;
          "
          @dragover=${this._onDragOver}
          @dragenter=${t=>this._onDragEnter(t,"layout",e,i,o)}
          @dragleave=${this._onDragLeave}
          @drop=${t=>this._onDrop(t,"layout",e,i,o)}
        >
          ${r?a.modules.map(((t,n)=>{var a,r,s,l,d;return q`
                  <div
                    class="layout-child-module-wrapper"
                    draggable="true"
                    @dragstart=${t=>this._onLayoutChildDragStart(t,e,i,o,n)}
                    @dragend=${t=>this._onLayoutChildDragEnd(t)}
                    @dragover=${this._onDragOver}
                    @dragenter=${t=>this._onLayoutChildDragEnter(t,e,i,o,n)}
                    @dragleave=${this._onDragLeave}
                    @drop=${t=>this._onLayoutChildDrop(t,e,i,o,n)}
                    class="${"layout-child"===(null===(a=this._dropTarget)||void 0===a?void 0:a.type)&&(null===(r=this._dropTarget)||void 0===r?void 0:r.rowIndex)===e&&(null===(s=this._dropTarget)||void 0===s?void 0:s.columnIndex)===i&&(null===(l=this._dropTarget)||void 0===l?void 0:l.moduleIndex)===o&&(null===(d=this._dropTarget)||void 0===d?void 0:d.childIndex)===n?"drop-target":""}"
                    style="width: 100%; max-width: 100%; box-sizing: border-box; overflow: hidden;"
                  >
                    ${this._renderLayoutChildModule(t,e,i,o,n)}
                  </div>
                `})):q`
                <div
                  class="layout-module-empty"
                  @click=${t=>{t.stopPropagation(),this._openLayoutModuleSelector(e,i,o)}}
                  title="Click to add a module"
                  style="cursor: pointer;"
                >
                  <ha-icon icon="mdi:plus-circle"></ha-icon>
                  <span>Drop modules here</span>
                </div>
              `}
          ${r?q`
                <div
                  class="layout-append-zone"
                  @dragover=${this._onDragOver}
                  @dragenter=${t=>this._onLayoutAppendDragEnter(t,e,i,o)}
                  @dragleave=${this._onDragLeave}
                  @drop=${t=>this._onLayoutAppendDrop(t,e,i,o)}
                  style="
                    min-height: 20px;
                    margin-top: 8px;
                    border: 2px dashed transparent;
                    border-radius: 4px;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    color: var(--secondary-text-color);
                    font-size: 12px;
                    transition: all 0.2s ease;
                  "
                >
                  Drop here to add to end
                </div>
              `:""}
        </div>
      </div>
    `}_getJustifyContent(t){switch(t){case"left":default:return"flex-start";case"center":return"center";case"right":return"flex-end";case"justify":return"space-between"}}_renderLayoutChildModule(t,e,i,o,n){const a=pe().getModule(t.type),r=(null==a?void 0:a.metadata)||{icon:"mdi:help-circle",title:"Unknown",description:"Unknown module type"},s=this._generateModuleInfo(t),l=this._getModuleDisplayName(t);return q`
      <div
        class="layout-child-simplified-module"
        @click=${t=>{const a=t.target;a.closest(".layout-child-actions")||a.closest(".layout-child-drag-handle")||(t.stopPropagation(),void 0!==e&&void 0!==i&&void 0!==o&&void 0!==n&&this._openLayoutChildSettings(e,i,o,n))}}
      >
        <div class="layout-child-module-header">
          <div class="layout-child-drag-handle" title="Drag to reorder">
            <ha-icon icon="mdi:drag"></ha-icon>
          </div>
          <ha-icon icon="${r.icon}" class="layout-child-icon"></ha-icon>
          <div class="layout-child-content">
            <div class="layout-child-title">${l}</div>
            <div class="layout-child-info">${s}</div>
          </div>
          ${void 0!==e&&void 0!==i&&void 0!==o&&void 0!==n?q`
                <div class="layout-child-actions">
                  <button
                    class="layout-child-action-btn edit-btn"
                    @click=${t=>{t.stopPropagation(),this._openLayoutChildSettings(e,i,o,n)}}
                    @mousedown=${t=>t.stopPropagation()}
                    @dragstart=${t=>t.preventDefault()}
                    title="Edit Child Module"
                  >
                    <ha-icon icon="mdi:pencil"></ha-icon>
                  </button>
                  <button
                    class="layout-child-action-btn duplicate-btn"
                    @click=${t=>{t.stopPropagation(),this._duplicateLayoutChildModule(e,i,o,n)}}
                    @mousedown=${t=>t.stopPropagation()}
                    @dragstart=${t=>t.preventDefault()}
                    title="Duplicate Child Module"
                  >
                    <ha-icon icon="mdi:content-copy"></ha-icon>
                  </button>
                  <button
                    class="layout-child-action-btn delete-btn"
                    @click=${t=>{t.stopPropagation(),this._deleteLayoutChildModule(e,i,o,n)}}
                    @mousedown=${t=>t.stopPropagation()}
                    @dragstart=${t=>t.preventDefault()}
                    title="Delete Child Module"
                  >
                    <ha-icon icon="mdi:delete"></ha-icon>
                  </button>
                </div>
              `:""}
        </div>
      </div>
    `}_onLayoutModuleDragOver(t,e,i,o){t.preventDefault(),t.stopPropagation(),t.dataTransfer&&(t.dataTransfer.dropEffect="move")}_onLayoutModuleDragEnter(t,e,i,o){t.preventDefault(),t.stopPropagation(),this._draggedItem&&"module"===this._draggedItem.type&&(this._draggedItem.rowIndex===e&&this._draggedItem.columnIndex===i&&this._draggedItem.moduleIndex===o||t.currentTarget.classList.add("layout-drop-target"))}_onLayoutModuleDragLeave(t){t.preventDefault(),t.stopPropagation()}_onLayoutModuleDrop(t,e,i,o){if(t.preventDefault(),t.stopPropagation(),t.currentTarget.classList.remove("layout-drop-target"),!this._draggedItem||"module"!==this._draggedItem.type)return void console.log("Invalid drop - not a module or no dragged item");if(void 0===e||void 0===i||void 0===o)return void console.log("Invalid drop - missing coordinates");const n=this._ensureLayout(),a=n.rows[e];if(!a||!a.columns[i])return void console.log("Invalid drop - target row/column not found");const r=a.columns[i].modules[o];if(!r||!this._isLayoutModule(r.type))return void console.log("Invalid drop - target is not a layout module");r.modules||(r.modules=[]);const s=JSON.parse(JSON.stringify(this._draggedItem.data));if(void 0!==this._draggedItem.layoutChildIndex&&this._draggedItem.rowIndex===e&&this._draggedItem.columnIndex===i&&this._draggedItem.moduleIndex===o)return void console.log("Ignoring layout drop - this should be handled by child reordering");r.modules.push(s);const l=n.rows[this._draggedItem.rowIndex];l&&l.columns[this._draggedItem.columnIndex]&&l.columns[this._draggedItem.columnIndex].modules.splice(this._draggedItem.moduleIndex,1),this._updateLayout(n),console.log("Module successfully moved to layout module"),this._draggedItem=null,this._dropTarget=null}_onLayoutChildDragStart(t,e,i,o,n){var a,r,s;if(!t.dataTransfer)return;t.stopPropagation();const l=null===(r=null===(a=this._ensureLayout().rows[e])||void 0===a?void 0:a.columns[i])||void 0===r?void 0:r.modules[o],d=null===(s=null==l?void 0:l.modules)||void 0===s?void 0:s[n];if(d){this._draggedItem={type:"module",rowIndex:e,columnIndex:i,moduleIndex:o,data:d,layoutChildIndex:n},t.dataTransfer.effectAllowed="move",t.dataTransfer.setData("text/plain",JSON.stringify({type:"layout-child",parentRowIndex:e,parentColumnIndex:i,parentModuleIndex:o,childIndex:n}));const a=t.currentTarget;a&&(a.style.opacity="0.6",a.style.transform="scale(0.95)")}}_onLayoutChildDragEnd(t){t.preventDefault(),t.stopPropagation();const e=t.currentTarget;e&&(e.style.opacity="",e.style.transform=""),this._draggedItem=null,this._dropTarget=null,this.requestUpdate()}_onLayoutChildDragEnter(t,e,i,o,n){t.preventDefault(),t.stopPropagation(),this._draggedItem&&"module"===this._draggedItem.type&&(void 0!==this._draggedItem.layoutChildIndex&&this._draggedItem.rowIndex===e&&this._draggedItem.columnIndex===i&&this._draggedItem.moduleIndex===o&&this._draggedItem.layoutChildIndex===n||(this._dropTarget={type:"layout-child",rowIndex:e,columnIndex:i,moduleIndex:o,childIndex:n},this.requestUpdate()))}_onLayoutChildDrop(t,e,i,o,n){if(t.preventDefault(),t.stopPropagation(),!this._draggedItem||"module"!==this._draggedItem.type)return void console.log("Invalid drop - not a module or no dragged item");if(void 0===e||void 0===i||void 0===o||void 0===n)return void console.log("Invalid drop - missing coordinates");const a=this._ensureLayout(),r=JSON.parse(JSON.stringify(a)),s=r.rows[e].columns[i].modules[o];if(s&&this._isLayoutModule(s.type)){if(s.modules||(s.modules=[]),void 0!==this._draggedItem.layoutChildIndex){const t=this._draggedItem.rowIndex,a=this._draggedItem.columnIndex,l=this._draggedItem.moduleIndex,d=this._draggedItem.layoutChildIndex;if(t===e&&a===i&&l===o){if(d===n)return;const t=s.modules.splice(d,1)[0];let e=n;d<n&&(e=n-1),s.modules.splice(e,0,t),this._updateLayout(r),console.log("Layout child module reordered successfully")}else{const e=r.rows[t].columns[a].modules[l];if(e&&this._isLayoutModule(e.type)&&e.modules){const t=e.modules.splice(d,1)[0];s.modules.splice(n,0,t),this._updateLayout(r),console.log("Module moved from one layout to another successfully")}}}else{const t=JSON.parse(JSON.stringify(this._draggedItem.data));s.modules.splice(n,0,t);const e=r.rows[this._draggedItem.rowIndex];e&&e.columns[this._draggedItem.columnIndex]&&e.columns[this._draggedItem.columnIndex].modules.splice(this._draggedItem.moduleIndex,1),this._updateLayout(r),console.log("Module moved from column to layout position successfully")}this._draggedItem=null,this._dropTarget=null,this.requestUpdate()}else console.log("Invalid drop - target is not a layout module")}_onLayoutAppendDragEnter(t,e,i,o){if(t.preventDefault(),t.stopPropagation(),!this._draggedItem||"module"!==this._draggedItem.type)return;this._dropTarget={type:"layout-append",rowIndex:e,columnIndex:i,moduleIndex:o};const n=t.currentTarget;n.style.borderColor="var(--primary-color)",n.style.backgroundColor="rgba(var(--rgb-primary-color), 0.1)",this.requestUpdate()}_onLayoutAppendDrop(t,e,i,o){t.preventDefault(),t.stopPropagation();const n=t.currentTarget;if(n.style.borderColor="transparent",n.style.backgroundColor="transparent",!this._draggedItem||"module"!==this._draggedItem.type)return void console.log("Invalid drop - not a module or no dragged item");if(void 0===e||void 0===i||void 0===o)return void console.log("Invalid drop - missing coordinates");const a=this._ensureLayout(),r=JSON.parse(JSON.stringify(a)),s=r.rows[e].columns[i].modules[o];if(s&&this._isLayoutModule(s.type))if(s.modules||(s.modules=[]),void 0!==this._draggedItem.layoutChildIndex&&this._draggedItem.rowIndex===e&&this._draggedItem.columnIndex===i&&this._draggedItem.moduleIndex===o){const t=this._draggedItem.layoutChildIndex,e=s.modules.splice(t,1)[0];s.modules.push(e),this._updateLayout(r),console.log("Layout child module moved to end successfully")}else{const t=JSON.parse(JSON.stringify(this._draggedItem.data));if(s.modules.push(t),void 0===this._draggedItem.layoutChildIndex){const t=r.rows[this._draggedItem.rowIndex];t&&t.columns[this._draggedItem.columnIndex]&&t.columns[this._draggedItem.columnIndex].modules.splice(this._draggedItem.moduleIndex,1)}this._updateLayout(r),console.log("Module successfully moved to end of layout module")}this._draggedItem=null,this._dropTarget=null,this.requestUpdate()}_openLayoutModuleSelector(t,e,i){console.log("Opening layout module selector for:",t,e,i),this._selectedRowIndex=t,this._selectedColumnIndex=e,this._selectedLayoutModuleIndex=i,this._showModuleSelector=!0}_openLayoutChildSettings(t,e,i,o){console.log("Opening layout child settings:",t,e,i,o),this._selectedLayoutChild={parentRowIndex:t,parentColumnIndex:e,parentModuleIndex:i,childIndex:o},this._showLayoutChildSettings=!0}_duplicateLayoutChildModule(t,e,i,o){console.log("Duplicating layout child module:",t,e,i,o);const n=this._ensureLayout(),a=n.rows[t];if(!a||!a.columns[e])return;const r=a.columns[e];if(!r.modules||!r.modules[i])return;const s=r.modules[i];if(!s.modules||!s.modules[o])return;const l=s.modules[o],d=JSON.parse(JSON.stringify(l)),c={rows:n.rows.map(((n,a)=>a===t?Object.assign(Object.assign({},n),{columns:n.columns.map(((t,n)=>n===e?Object.assign(Object.assign({},t),{modules:t.modules.map(((t,e)=>{if(e===i){const e=t,i=[...e.modules];return i.splice(o+1,0,d),Object.assign(Object.assign({},e),{modules:i})}return t}))}):t))}):n))};this._updateLayout(c),console.log("Layout child module duplicated successfully")}_deleteLayoutChildModule(t,e,i,o){console.log("Deleting layout child module:",t,e,i,o);const n=this._ensureLayout(),a=n.rows[t];if(!a||!a.columns[e])return;const r=a.columns[e];if(!r.modules||!r.modules[i])return;const s=r.modules[i];if(!s.modules||!s.modules[o])return;const l={rows:n.rows.map(((n,a)=>a===t?Object.assign(Object.assign({},n),{columns:n.columns.map(((t,n)=>n===e?Object.assign(Object.assign({},t),{modules:t.modules.map(((t,e)=>{if(e===i){const e=t;return Object.assign(Object.assign({},e),{modules:e.modules.filter(((t,e)=>e!==o))})}return t}))}):t))}):n))};this._updateLayout(l),console.log("Layout child module deleted successfully")}_getModuleDisplayName(t){const e=t;if(e.module_name&&e.module_name.trim())return e.module_name;switch(t.type){case"text":return"Text Module";case"image":return"Image Module";case"icon":return"Icon Module";case"bar":return"Bar Module";case"info":return"Info Module";case"button":return"Button Module";case"separator":return"Separator Module";case"markdown":return"Markdown Module";default:return t.type.charAt(0).toUpperCase()+t.type.slice(1)+" Module"}}_generateModuleInfo(t){var e,i,o,n;const a=t;switch(t.type){case"text":return a.text&&a.text.trim()?a.text.length>50?`${a.text.substring(0,50)}...`:a.text:"No text configured";case"image":if(a.image_entity)return`Entity: ${a.image_entity}`;if(a.image_url){const t=a.image_url;if(t.startsWith("data:image/"))return"Uploaded image";const e=t.split("/").pop()||t;return e.length>30?`${e.substring(0,30)}...`:e}if(a.image_path){const t=a.image_path,e=t.split("/").pop()||t;return e.length>30?`${e.substring(0,30)}...`:e}return"No image configured";case"icon":const r=(null===(e=a.icons)||void 0===e?void 0:e.length)||0;if(r>1)return`${r} icons configured`;if(1===r){const t=a.icons[0];return(null==t?void 0:t.entity)?`Entity: ${t.entity}`:(null==t?void 0:t.icon)?`Icon: ${t.icon}`:"Icon configured"}return"No icons configured";case"bar":return a.entity?`Entity: ${a.entity}`:"Entity: sensor.battery_level";case"info":if(null===(i=a.info_entities)||void 0===i?void 0:i.length){const t=a.info_entities[0];if(null==t?void 0:t.entity)return a.info_entities.length>1?`${t.entity} + ${a.info_entities.length-1} more`:`Entity: ${t.entity}`}return a.entity?`Entity: ${a.entity}`:(null===(o=a.entities)||void 0===o?void 0:o.length)?`${a.entities.length} entities configured`:"No entity configured";case"button":return a.button_text&&a.button_text.trim()?a.button_text:a.text&&a.text.trim()?a.text:a.label&&a.label.trim()?a.label:"No button text configured";case"markdown":const s=a.content||a.markdown_content;if(s&&s.trim()){const t=s.replace(/[#*`>\-\[\]]/g,"").trim().split(" ").slice(0,8).join(" ");return t.length>40?`${t.substring(0,40)}...`:t}return"This is a markdown module that supports italic and bold text...";case"separator":const l=[];return a.separator_style&&l.push(`Style: ${a.separator_style}`),a.thickness&&l.push(`${a.thickness}px thick`),a.width_percent&&100!==a.width_percent&&l.push(`${a.width_percent}% width`),l.length>0?l.join(" • "):"Visual separator";default:return a.entity?`Entity: ${a.entity}`:(null===(n=a.entities)||void 0===n?void 0:n.length)?`${a.entities.length} entities`:void 0!==a.value?`Value: ${a.value}`:a.text?`Text: ${a.text.length>20?a.text.substring(0,20)+"...":a.text}`:`${t.type.charAt(0).toUpperCase()}${t.type.slice(1)} module`}}_renderSingleModuleWithAnimation(t){var e,i,o,n;me.setHass(this.hass);const a=me.evaluateDisplayConditions(t.display_conditions||[],t.display_mode||"always"),r=t,s=me.evaluateLogicProperties({logic_entity:null===(e=r.design)||void 0===e?void 0:e.logic_entity,logic_attribute:null===(i=r.design)||void 0===i?void 0:i.logic_attribute,logic_operator:null===(o=r.design)||void 0===o?void 0:o.logic_operator,logic_value:null===(n=r.design)||void 0===n?void 0:n.logic_value}),l=pe().getModule(t.type),d=!a||!s;let c;c=l?l.renderPreview(t,this.hass):q`
        <div class="module-placeholder">
          <ha-icon icon="mdi:help-circle"></ha-icon>
          <span>Unknown Module: ${t.type}</span>
        </div>
      `;const p=this._getPreviewAnimationData(r);return q`
      <div class="module-with-logic ${d?"logic-hidden":""}">
        ${p.class?q`
              <div
                class="${p.class}"
                style="display: inherit; width: inherit; height: inherit; flex: inherit; animation-duration: ${p.duration};"
              >
                ${c}
              </div>
            `:c}
        ${d?q`
              <div class="logic-overlay">
                <ha-icon icon="mdi:eye-off-outline"></ha-icon>
                <span>Hidden by Logic</span>
              </div>
            `:""}
      </div>
    `}_getPreviewAnimationData(t){var e,i,o,n,a,r;const s=t.animation_type||(null===(e=t.design)||void 0===e?void 0:e.animation_type);if(!s||"none"===s)return{class:"",duration:"2s"};const l=t.animation_duration||(null===(i=t.design)||void 0===i?void 0:i.animation_duration)||"2s",d=t.animation_entity||(null===(o=t.design)||void 0===o?void 0:o.animation_entity),c=t.animation_trigger_type||(null===(n=t.design)||void 0===n?void 0:n.animation_trigger_type)||"state",p=t.animation_attribute||(null===(a=t.design)||void 0===a?void 0:a.animation_attribute),u=t.animation_state||(null===(r=t.design)||void 0===r?void 0:r.animation_state);if(!d)return{class:`animation-${s}`,duration:l};if(u&&this.hass){const t=this.hass.states[d];if(t){let e=!1;if("attribute"===c&&p){const i=t.attributes[p];e=String(i)===u}else e=t.state===u;if(e)return{class:`animation-${s}`,duration:l}}}return{class:"",duration:l}}_getRowPreviewAnimationData(t){const e=t.design||{},i=e.animation_type;if(!i||"none"===i)return{class:"",duration:"2s"};const o=e.animation_duration||"2s",n=e.animation_entity,a=e.animation_trigger_type||"state",r=e.animation_attribute,s=e.animation_state;if(!n)return{class:`animation-${i}`,duration:o};if(s&&this.hass){const t=this.hass.states[n];if(t){let e=!1;if("attribute"===a&&r){const i=t.attributes[r];e=String(i)===s}else e=t.state===s;if(e)return{class:`animation-${i}`,duration:o}}}return{class:"",duration:o}}_getColumnPreviewAnimationData(t){const e=t.design||{},i=e.animation_type;if(!i||"none"===i)return{class:"",duration:"2s"};const o=e.animation_duration||"2s",n=e.animation_entity,a=e.animation_trigger_type||"state",r=e.animation_attribute,s=e.animation_state;if(!n)return{class:`animation-${i}`,duration:o};if(s&&this.hass){const t=this.hass.states[n];if(t){let e=!1;if("attribute"===a&&r){const i=t.attributes[r];e=String(i)===s}else e=t.state===s;if(e)return{class:`animation-${i}`,duration:o}}}return{class:"",duration:o}}_renderRowPreview(t){const e=this._getRowPreviewAnimationData(t),i=q`
      <div
        class="row-preview-content"
        style="background: ${t.background_color||"var(--ha-card-background, var(--card-background-color, #fff))"};gap: ${t.gap||16}px;"
      >
        ${t.columns.map(((t,e)=>q`<div class="column-preview">Column ${e+1}</div>`))}
      </div>
    `;return q`
      <div class="module-preview">
        <div class="preview-header">Live Preview</div>
        <div class="preview-content">
          ${e.class?q`
                <div
                  class="${e.class}"
                  style="display: inherit; width: inherit; height: inherit; flex: inherit; animation-duration: ${e.duration};"
                >
                  ${i}
                </div>
              `:i}
        </div>
      </div>
    `}_renderColumnPreview(t){var e;const i=this._getColumnPreviewAnimationData(t),o=q`
      <div class="column-preview-content">
        <p>Column Preview</p>
        <div class="module-count">${(null===(e=t.modules)||void 0===e?void 0:e.length)||0} modules</div>
      </div>
    `;return q`
      <div class="module-preview">
        <div class="preview-header">Live Preview</div>
        <div class="preview-content">
          ${i.class?q`
                <div
                  class="${i.class}"
                  style="display: inherit; width: inherit; height: inherit; flex: inherit; animation-duration: ${i.duration};"
                >
                  ${o}
                </div>
              `:o}
        </div>
      </div>
    `}_renderModuleSettings(){var t,e,i,o,n,a;if(!this._selectedModule)return q``;const{rowIndex:r,columnIndex:s,moduleIndex:l}=this._selectedModule,d=null===(i=null===(e=null===(t=this.config.layout)||void 0===t?void 0:t.rows[r])||void 0===e?void 0:e.columns[s])||void 0===i?void 0:i.modules[l];if(!d)return q``;const c=pe().getModule(d.type),p=c&&"function"==typeof c.renderActionsTab,u=c&&"function"==typeof c.renderOtherTab;return("actions"===this._activeModuleTab&&!p||"other"===this._activeModuleTab&&!u)&&(this._activeModuleTab="general"),q`
      <div class="module-settings-popup">
        <div class="popup-overlay"></div>
        <div
          class="popup-content draggable-popup"
          id="module-popup-${null===(o=this._selectedModule)||void 0===o?void 0:o.rowIndex}-${null===(n=this._selectedModule)||void 0===n?void 0:n.columnIndex}-${null===(a=this._selectedModule)||void 0===a?void 0:a.moduleIndex}"
        >
          <div
            class="popup-header"
            @mousedown=${t=>{const e=t.target.closest(".popup-content");e&&this._startPopupDrag(t,e)}}
          >
            <h3>Module Settings - ${d.type.charAt(0).toUpperCase()+d.type.slice(1)}</h3>
            <div class="header-actions">
              <button
                class="action-button duplicate-button"
                @click=${()=>{this._selectedModule&&(this._duplicateModule(this._selectedModule.rowIndex,this._selectedModule.columnIndex,this._selectedModule.moduleIndex),this._closeModuleSettings())}}
                title="Duplicate Module"
              >
                <ha-icon icon="mdi:content-copy"></ha-icon>
              </button>
              <button
                class="action-button delete-button"
                @click=${()=>{this._selectedModule&&(this._deleteModule(this._selectedModule.rowIndex,this._selectedModule.columnIndex,this._selectedModule.moduleIndex),this._closeModuleSettings())}}
                title="Delete Module"
              >
                <ha-icon icon="mdi:delete"></ha-icon>
              </button>
              <button class="close-button" @click=${()=>this._closeModuleSettings()}>×</button>
            </div>
          </div>

          ${this._renderModulePreview()}

          <div class="module-tabs">
            <button
              class="module-tab ${"general"===this._activeModuleTab?"active":""}"
              @click=${()=>this._activeModuleTab="general"}
            >
              General
            </button>
            ${p?q`
                  <button
                    class="module-tab ${"actions"===this._activeModuleTab?"active":""}"
                    @click=${()=>this._activeModuleTab="actions"}
                  >
                    Actions
                  </button>
                `:""}
            ${u?q`
                  <button
                    class="module-tab ${"other"===this._activeModuleTab?"active":""}"
                    @click=${()=>this._activeModuleTab="other"}
                  >
                    Other
                  </button>
                `:""}
            <button
              class="module-tab ${"logic"===this._activeModuleTab?"active":""}"
              @click=${()=>this._activeModuleTab="logic"}
            >
              Logic
            </button>
            <button
              class="module-tab ${"design"===this._activeModuleTab?"active":""}"
              @click=${()=>this._activeModuleTab="design"}
            >
              Design
            </button>
          </div>

          <div class="module-tab-content">
            ${"general"===this._activeModuleTab?this._renderGeneralTab(d):""}
            ${"actions"===this._activeModuleTab&&p?this._renderActionsTab(d):""}
            ${"other"===this._activeModuleTab&&u?this._renderOtherTab(d):""}
            ${"logic"===this._activeModuleTab?this._renderLogicTab(d):""}
            ${"design"===this._activeModuleTab?this._renderDesignTab(d):""}
          </div>

          <!-- Resize handle -->
          <div
            class="resize-handle"
            @mousedown=${t=>{const e=t.target.closest(".popup-content");e&&this._startPopupResize(t,e)}}
            title="Drag to resize"
          >
            <ha-icon icon="mdi:resize-bottom-right"></ha-icon>
          </div>
        </div>
      </div>
    `}_renderLayoutChildSettings(){var t,e,i,o;if(!this._selectedLayoutChild)return q``;const{parentRowIndex:n,parentColumnIndex:a,parentModuleIndex:r,childIndex:s}=this._selectedLayoutChild,l=this._ensureLayout().rows[n];if(!l||!l.columns[a])return q``;const d=l.columns[a];if(!d.modules||!d.modules[r])return q``;const c=d.modules[r];if(!c.modules||!c.modules[s])return q``;const p=c.modules[s],u=pe().getModule(p.type),m=u&&"function"==typeof u.renderActionsTab,g=u&&"function"==typeof u.renderOtherTab;return("actions"===this._activeModuleTab&&!m||"other"===this._activeModuleTab&&!g)&&(this._activeModuleTab="general"),q`
      <div class="module-settings-popup">
        <div class="popup-overlay" @click=${()=>this._closeLayoutChildSettings()}></div>
        <div
          class="popup-content draggable-popup"
          id="child-popup-${null===(t=this._selectedLayoutChild)||void 0===t?void 0:t.parentRowIndex}-${null===(e=this._selectedLayoutChild)||void 0===e?void 0:e.parentColumnIndex}-${null===(i=this._selectedLayoutChild)||void 0===i?void 0:i.parentModuleIndex}-${null===(o=this._selectedLayoutChild)||void 0===o?void 0:o.childIndex}"
        >
          <div
            class="popup-header"
            @mousedown=${t=>{const e=t.target.closest(".popup-content");e&&this._startPopupDrag(t,e)}}
          >
            <h3>
              Child Module Settings -
              ${p.type.charAt(0).toUpperCase()+p.type.slice(1)}
            </h3>
            <div class="header-actions">
              <button
                class="action-button duplicate-button"
                @click=${()=>{this._selectedLayoutChild&&(this._duplicateLayoutChildModule(this._selectedLayoutChild.parentRowIndex,this._selectedLayoutChild.parentColumnIndex,this._selectedLayoutChild.parentModuleIndex,this._selectedLayoutChild.childIndex),this._closeLayoutChildSettings())}}
                title="Duplicate Child Module"
              >
                <ha-icon icon="mdi:content-copy"></ha-icon>
              </button>
              <button
                class="action-button delete-button"
                @click=${()=>{this._selectedLayoutChild&&(this._deleteLayoutChildModule(this._selectedLayoutChild.parentRowIndex,this._selectedLayoutChild.parentColumnIndex,this._selectedLayoutChild.parentModuleIndex,this._selectedLayoutChild.childIndex),this._closeLayoutChildSettings())}}
                title="Delete Child Module"
              >
                <ha-icon icon="mdi:delete"></ha-icon>
              </button>
              <button class="close-button" @click=${()=>this._closeLayoutChildSettings()}>
                ×
              </button>
            </div>
          </div>

          <!-- Child module preview -->
          <div class="module-preview">
            <div class="preview-header">Live Preview</div>
            <div class="preview-content">${this._renderSingleModuleWithAnimation(p)}</div>
          </div>

          <div class="module-tabs">
            <button
              class="module-tab ${"general"===this._activeModuleTab?"active":""}"
              @click=${()=>this._activeModuleTab="general"}
            >
              General
            </button>
            ${m?q`
                  <button
                    class="module-tab ${"actions"===this._activeModuleTab?"active":""}"
                    @click=${()=>this._activeModuleTab="actions"}
                  >
                    Actions
                  </button>
                `:""}
            ${g?q`
                  <button
                    class="module-tab ${"other"===this._activeModuleTab?"active":""}"
                    @click=${()=>this._activeModuleTab="other"}
                  >
                    Other
                  </button>
                `:""}
            <button
              class="module-tab ${"logic"===this._activeModuleTab?"active":""}"
              @click=${()=>this._activeModuleTab="logic"}
            >
              Logic
            </button>
            <button
              class="module-tab ${"design"===this._activeModuleTab?"active":""}"
              @click=${()=>this._activeModuleTab="design"}
            >
              Design
            </button>
          </div>

          <div class="module-tab-content">
            ${"general"===this._activeModuleTab?this._renderLayoutChildGeneralTab(p):""}
            ${"actions"===this._activeModuleTab&&m?this._renderLayoutChildActionsTab(p):""}
            ${"other"===this._activeModuleTab&&g?this._renderLayoutChildOtherTab(p):""}
            ${"logic"===this._activeModuleTab?this._renderLayoutChildLogicTab(p):""}
            ${"design"===this._activeModuleTab?this._renderLayoutChildDesignTab(p):""}
          </div>

          <!-- Resize handle -->
          <div
            class="resize-handle"
            @mousedown=${t=>{const e=t.target.closest(".popup-content");e&&this._startPopupResize(t,e)}}
            title="Drag to resize"
          >
            <ha-icon icon="mdi:resize-bottom-right"></ha-icon>
          </div>
        </div>
      </div>
    `}_renderLayoutChildGeneralTab(t){const e=pe().getModule(t.type),i=q`
      <div class="settings-section">
        <label>Module Name:</label>
        <input
          type="text"
          .value=${t.module_name||""}
          @input=${t=>this._updateLayoutChildModule({module_name:t.target.value})}
          placeholder="Give this module a custom name to make it easier to identify in the editor."
          class="module-name-input"
        />
        <div class="field-help">
          Give this module a custom name to make it easier to identify in the editor.
        </div>
      </div>
    `;if(e){const o=e.renderGeneralTab(t,this.hass,this.config,(t=>this._updateLayoutChildModule(t)));return q` ${i} ${o} `}return q`
      ${i}
      <div class="settings-section">
        <div class="error-message">
          <ha-icon icon="mdi:alert-circle"></ha-icon>
          <span>No settings available for module type: ${t.type}</span>
        </div>
      </div>
    `}_renderLayoutChildActionsTab(t){const e=pe().getModule(t.type);return e&&"function"==typeof e.renderActionsTab?e.renderActionsTab(t,this.hass,this.config,(t=>this._updateLayoutChildModule(t))):q`
      <div class="settings-section">
        <div class="info-message">
          <ha-icon icon="mdi:information"></ha-icon>
          <span>This module does not have action settings</span>
        </div>
      </div>
    `}_renderLayoutChildOtherTab(t){const e=pe().getModule(t.type);return e&&"function"==typeof e.renderOtherTab?e.renderOtherTab(t,this.hass,this.config,(t=>this._updateLayoutChildModule(t))):q`
      <div class="settings-section">
        <div class="info-message">
          <ha-icon icon="mdi:information"></ha-icon>
          <span>This module does not have other settings</span>
        </div>
      </div>
    `}_renderLayoutChildLogicTab(t){const e=this._selectedModule;this._selectedModule={rowIndex:0,columnIndex:0,moduleIndex:0};const i=this._updateModule.bind(this);this._updateModule=t=>{this._updateLayoutChildModule(t)};const o=this._renderLogicTab(t);return this._selectedModule=e,this._updateModule=i,o}_renderLayoutChildDesignTab(t){const e=this._updateModule.bind(this),i=this._updateModuleDesign.bind(this);this._updateModule=t=>{this._updateLayoutChildModule(t)},this._updateModuleDesign=t=>{this._updateLayoutChildModule({design:t})};const o=this._renderDesignTab(t);return this._updateModule=e,this._updateModuleDesign=i,o}_renderRowSettings(){var t;if(-1===this._selectedRowForSettings)return q``;const e=null===(t=this.config.layout)||void 0===t?void 0:t.rows[this._selectedRowForSettings];return e?q`
      <div class="settings-popup">
        <div class="popup-overlay" @click=${()=>this._showRowSettings=!1}></div>
        <div class="popup-content draggable-popup" id="row-popup-${this._selectedRowForSettings}">
          <div
            class="popup-header"
            @mousedown=${t=>{const e=t.target.closest(".popup-content");e&&this._startPopupDrag(t,e)}}
          >
            <h3>Row Settings</h3>
            <div class="header-actions">
              <button
                class="action-button duplicate-button"
                @click=${()=>{this._duplicateRow(this._selectedRowForSettings),this._showRowSettings=!1}}
                title="Duplicate Row"
              >
                <ha-icon icon="mdi:content-copy"></ha-icon>
              </button>
              <button
                class="action-button delete-button"
                @click=${()=>{this._deleteRow(this._selectedRowForSettings),this._showRowSettings=!1}}
                title="Delete Row"
              >
                <ha-icon icon="mdi:delete"></ha-icon>
              </button>
              <button class="close-button" @click=${()=>this._showRowSettings=!1}>
                ×
              </button>
            </div>
          </div>

          ${this._renderRowPreview(e)}

          <div class="settings-tabs">
            <button
              class="settings-tab ${"general"===this._activeRowTab?"active":""}"
              @click=${()=>this._activeRowTab="general"}
            >
              General
            </button>
            <button
              class="settings-tab ${"logic"===this._activeRowTab?"active":""}"
              @click=${()=>this._activeRowTab="logic"}
            >
              Logic
            </button>
            <button
              class="settings-tab ${"design"===this._activeRowTab?"active":""}"
              @click=${()=>this._activeRowTab="design"}
            >
              Design
            </button>
          </div>

          <div class="settings-tab-content">
            ${"general"===this._activeRowTab?this._renderRowGeneralTab(e):""}
            ${"logic"===this._activeRowTab?this._renderRowLogicTab(e):""}
            ${"design"===this._activeRowTab?this._renderRowDesignTab(e):""}
          </div>

          <!-- Resize handle -->
          <div
            class="resize-handle"
            @mousedown=${t=>{const e=t.target.closest(".popup-content");e&&this._startPopupResize(t,e)}}
            title="Drag to resize"
          >
            <ha-icon icon="mdi:resize-bottom-right"></ha-icon>
          </div>
        </div>
      </div>
    `:q``}_renderColumnSettings(){var t,e,i,o;if(!this._selectedColumnForSettings)return q``;const{rowIndex:n,columnIndex:a}=this._selectedColumnForSettings,r=null===(e=null===(t=this.config.layout)||void 0===t?void 0:t.rows[n])||void 0===e?void 0:e.columns[a];return r?q`
      <div class="settings-popup">
        <div class="popup-overlay" @click=${()=>this._showColumnSettings=!1}></div>
        <div
          class="popup-content draggable-popup"
          id="column-popup-${null===(i=this._selectedColumnForSettings)||void 0===i?void 0:i.rowIndex}-${null===(o=this._selectedColumnForSettings)||void 0===o?void 0:o.columnIndex}"
        >
          <div
            class="popup-header"
            @mousedown=${t=>{const e=t.target.closest(".popup-content");e&&this._startPopupDrag(t,e)}}
          >
            <h3>Column Settings</h3>
            <div class="header-actions">
              <button
                class="action-button duplicate-button"
                @click=${()=>{this._selectedColumnForSettings&&(this._duplicateColumn(this._selectedColumnForSettings.rowIndex,this._selectedColumnForSettings.columnIndex),this._showColumnSettings=!1)}}
                title="Duplicate Column"
              >
                <ha-icon icon="mdi:content-copy"></ha-icon>
              </button>
              <button
                class="action-button delete-button"
                @click=${()=>{this._selectedColumnForSettings&&(this._deleteColumn(this._selectedColumnForSettings.rowIndex,this._selectedColumnForSettings.columnIndex),this._showColumnSettings=!1)}}
                title="Delete Column"
              >
                <ha-icon icon="mdi:delete"></ha-icon>
              </button>
              <button class="close-button" @click=${()=>this._showColumnSettings=!1}>
                ×
              </button>
            </div>
          </div>

          ${this._renderColumnPreview(r)}

          <div class="settings-tabs">
            <button
              class="settings-tab ${"general"===this._activeColumnTab?"active":""}"
              @click=${()=>this._activeColumnTab="general"}
            >
              General
            </button>
            <button
              class="settings-tab ${"logic"===this._activeColumnTab?"active":""}"
              @click=${()=>this._activeColumnTab="logic"}
            >
              Logic
            </button>
            <button
              class="settings-tab ${"design"===this._activeColumnTab?"active":""}"
              @click=${()=>this._activeColumnTab="design"}
            >
              Design
            </button>
          </div>

          <div class="settings-tab-content">
            ${"general"===this._activeColumnTab?this._renderColumnGeneralTab(r):""}
            ${"logic"===this._activeColumnTab?this._renderColumnLogicTab(r):""}
            ${"design"===this._activeColumnTab?this._renderColumnDesignTab(r):""}
          </div>

          <!-- Resize handle -->
          <div
            class="resize-handle"
            @mousedown=${t=>{const e=t.target.closest(".popup-content");e&&this._startPopupResize(t,e)}}
            title="Drag to resize"
          >
            <ha-icon icon="mdi:resize-bottom-right"></ha-icon>
          </div>
        </div>
      </div>
    `:q``}_renderRowGeneralTab(t){return q`
      <div class="settings-section">
        <ultra-color-picker
          .label=${"Row Background Color"}
          .value=${t.background_color||""}
          .defaultValue=${"var(--ha-card-background, var(--card-background-color, #fff))"}
          .hass=${this.hass}
          @value-changed=${t=>{const e=t.detail.value;this._updateRow({background_color:e})}}
        ></ultra-color-picker>
      </div>
      <div class="settings-section">
        <label>Column Gap (px):</label>
        <input
          type="number"
          min="0"
          max="50"
          .value=${t.gap||16}
          @change=${t=>this._updateRow({gap:Number(t.target.value)})}
        />
      </div>
    `}_renderRowLogicTab(t){const e=t.display_conditions||[],i=t.display_mode||"always",o=t.template_mode||!1;return q`
      <div class="logic-tab-content">
        <!-- Conditions Section (only shown when template mode is disabled) -->
        ${o?q`
              <div class="template-mode-notice">
                <p>
                  <em>Advanced Template Mode is enabled. Basic conditions above are ignored.</em>
                </p>
              </div>
            `:q`
              <div class="logic-section">
                <div class="section-header">
                  <h3>Display this Row</h3>
                </div>

                <div class="display-mode-selector">
                  <select
                    .value=${i}
                    @change=${t=>{const e=t.target.value;this._updateRow({display_mode:e})}}
                    class="display-mode-dropdown"
                  >
                    <option value="always">Always</option>
                    <option value="every">If EVERY condition below is met</option>
                    <option value="any">If ANY condition below is met</option>
                  </select>
                </div>
              </div>

              <!-- Conditions Section -->
              ${"always"!==i?q`
                    <div class="conditions-section">
                      <div class="conditions-header">
                        <h4>Conditions</h4>
                        <button
                          type="button"
                          class="add-condition-btn"
                          @click=${()=>this._addRowCondition(t)}
                        >
                          <ha-icon icon="mdi:plus"></ha-icon>
                          Add Condition
                        </button>
                      </div>

                      <div class="conditions-list">
                        ${e.map(((e,i)=>this._renderRowCondition(t,e,i)))}
                      </div>

                      ${0===e.length?q`
                            <div class="no-conditions">
                              <p>No conditions added yet. Click "Add Condition" to get started.</p>
                            </div>
                          `:""}
                    </div>
                  `:""}
            `}

        <!-- Advanced Template Mode Section -->
        <div class="template-section">
          <div class="switch-container">
            <span class="switch-label">Advanced Template Mode</span>
            <label class="switch">
              <input
                type="checkbox"
                .checked=${o}
                @change=${t=>{const e=t.target.checked;this._updateRow({template_mode:e,display_mode:e?"always":i})}}
              />
              <span class="slider"></span>
            </label>
          </div>
          <div class="template-description">
            Use Jinja2 templates for advanced conditional logic. When enabled, the conditions above
            are ignored.
          </div>

          ${o?q`
                <div class="template-content">
                  <textarea
                    .value=${t.template||""}
                    @input=${t=>this._updateRow({template:t.target.value})}
                    placeholder="{% if states('binary_sensor.example') == 'on' %}true{% else %}false{% endif %}"
                    class="template-editor"
                    rows="6"
                  ></textarea>
                  <div class="template-help">
                    <p><strong>Template should return a boolean value:</strong></p>
                    <ul>
                      <li>
                        <code>true</code>, <code>on</code>, <code>yes</code>, <code>1</code> → Show
                        row
                      </li>
                      <li>
                        <code>false</code>, <code>off</code>, <code>no</code>, <code>0</code> → Hide
                        row
                      </li>
                    </ul>
                  </div>
                </div>
              `:""}
        </div>
      </div>
    `}_renderRowDesignTab(t){var e,i,o,n,a,r,s,l,d,c,p,u,m,g,h,b,v,_,f,y,x,w,$,k,S,C,z,I,T,A,P,D;const L=Object.assign(Object.assign({},t.design),{background_color:(null===(e=t.design)||void 0===e?void 0:e.background_color)||t.background_color,padding_top:(null===(i=t.design)||void 0===i?void 0:i.padding_top)||(null===(o=t.padding)||void 0===o?void 0:o.toString()),padding_bottom:(null===(n=t.design)||void 0===n?void 0:n.padding_bottom)||(null===(a=t.padding)||void 0===a?void 0:a.toString()),padding_left:(null===(r=t.design)||void 0===r?void 0:r.padding_left)||(null===(s=t.padding)||void 0===s?void 0:s.toString()),padding_right:(null===(l=t.design)||void 0===l?void 0:l.padding_right)||(null===(d=t.padding)||void 0===d?void 0:d.toString()),border_radius:(null===(c=t.design)||void 0===c?void 0:c.border_radius)||(null===(p=t.border_radius)||void 0===p?void 0:p.toString()),border_color:(null===(u=t.design)||void 0===u?void 0:u.border_color)||t.border_color,border_width:(null===(m=t.design)||void 0===m?void 0:m.border_width)||(null===(g=t.border_width)||void 0===g?void 0:g.toString()),margin_top:(null===(h=t.design)||void 0===h?void 0:h.margin_top)||(null===(b=t.margin)||void 0===b?void 0:b.toString()),margin_bottom:(null===(v=t.design)||void 0===v?void 0:v.margin_bottom)||(null===(_=t.margin)||void 0===_?void 0:_.toString()),margin_left:(null===(f=t.design)||void 0===f?void 0:f.margin_left)||(null===(y=t.margin)||void 0===y?void 0:y.toString()),margin_right:(null===(x=t.design)||void 0===x?void 0:x.margin_right)||(null===(w=t.margin)||void 0===w?void 0:w.toString()),animation_type:null===($=t.design)||void 0===$?void 0:$.animation_type,animation_entity:null===(k=t.design)||void 0===k?void 0:k.animation_entity,animation_trigger_type:null===(S=t.design)||void 0===S?void 0:S.animation_trigger_type,animation_attribute:null===(C=t.design)||void 0===C?void 0:C.animation_attribute,animation_state:null===(z=t.design)||void 0===z?void 0:z.animation_state,animation_duration:null===(I=t.design)||void 0===I?void 0:I.animation_duration,intro_animation:null===(T=t.design)||void 0===T?void 0:T.intro_animation,outro_animation:null===(A=t.design)||void 0===A?void 0:A.outro_animation,animation_delay:null===(P=t.design)||void 0===P?void 0:P.animation_delay,animation_timing:null===(D=t.design)||void 0===D?void 0:D.animation_timing});return console.log("🔄 LayoutTab: Rendering row design tab with properties:",L),q`
      <ultra-global-design-tab
        .hass=${this.hass}
        .designProperties=${L}
        @design-changed=${e=>{console.log("🔄 LayoutTab: Received design-changed event for ROW:",e.detail),console.log("🔄 LayoutTab: Current row design before update:",t.design);const i=e.detail,o=Object.assign(Object.assign({},t.design),i);console.log("🔄 LayoutTab: Updated row design:",o),this._updateRow({design:o})}}
      ></ultra-global-design-tab>
    `}_renderColumnGeneralTab(t){return q`
      <div class="settings-section">
        <label>Vertical Alignment:</label>
        <select
          .value=${t.vertical_alignment||"center"}
          @change=${t=>this._updateColumn({vertical_alignment:t.target.value})}
        >
          <option value="top">Top</option>
          <option value="center">Center</option>
          <option value="bottom">Bottom</option>
          <option value="stretch">Stretch</option>
        </select>
      </div>
      <div class="settings-section">
        <label>Horizontal Alignment:</label>
        <select
          .value=${t.horizontal_alignment||"center"}
          @change=${t=>this._updateColumn({horizontal_alignment:t.target.value})}
        >
          <option value="left">Left</option>
          <option value="center">Center</option>
          <option value="right">Right</option>
          <option value="stretch">Stretch</option>
        </select>
      </div>
    `}_renderColumnLogicTab(t){const e=t.display_conditions||[],i=t.display_mode||"always",o=t.template_mode||!1;return q`
      <div class="logic-tab-content">
        <!-- Conditions Section (only shown when template mode is disabled) -->
        ${o?q`
              <div class="template-mode-notice">
                <p>
                  <em>Advanced Template Mode is enabled. Basic conditions above are ignored.</em>
                </p>
              </div>
            `:q`
              <div class="logic-section">
                <div class="section-header">
                  <h3>Display this Column</h3>
                </div>

                <div class="display-mode-selector">
                  <select
                    .value=${i}
                    @change=${t=>{const e=t.target.value;this._updateColumn({display_mode:e})}}
                    class="display-mode-dropdown"
                  >
                    <option value="always">Always</option>
                    <option value="every">If EVERY condition below is met</option>
                    <option value="any">If ANY condition below is met</option>
                  </select>
                </div>
              </div>

              <!-- Conditions Section -->
              ${"always"!==i?q`
                    <div class="conditions-section">
                      <div class="conditions-header">
                        <h4>Conditions</h4>
                        <button
                          type="button"
                          class="add-condition-btn"
                          @click=${()=>this._addColumnCondition(t)}
                        >
                          <ha-icon icon="mdi:plus"></ha-icon>
                          Add Condition
                        </button>
                      </div>

                      <div class="conditions-list">
                        ${e.map(((e,i)=>this._renderColumnCondition(t,e,i)))}
                      </div>

                      ${0===e.length?q`
                            <div class="no-conditions">
                              <p>No conditions added yet. Click "Add Condition" to get started.</p>
                            </div>
                          `:""}
                    </div>
                  `:""}
            `}

        <!-- Advanced Template Mode Section -->
        <div class="template-section">
          <div class="switch-container">
            <span class="switch-label">Advanced Template Mode</span>
            <label class="switch">
              <input
                type="checkbox"
                .checked=${o}
                @change=${t=>{const e=t.target.checked;this._updateColumn({template_mode:e,display_mode:e?"always":i})}}
              />
              <span class="slider"></span>
            </label>
          </div>
          <div class="template-description">
            Use Jinja2 templates for advanced conditional logic. When enabled, the conditions above
            are ignored.
          </div>

          ${o?q`
                <div class="template-content">
                  <textarea
                    .value=${t.template||""}
                    @input=${t=>this._updateColumn({template:t.target.value})}
                    placeholder="{% if states('binary_sensor.example') == 'on' %}true{% else %}false{% endif %}"
                    class="template-editor"
                    rows="6"
                  ></textarea>
                  <div class="template-help">
                    <p><strong>Template should return a boolean value:</strong></p>
                    <ul>
                      <li>
                        <code>true</code>, <code>on</code>, <code>yes</code>, <code>1</code> → Show
                        column
                      </li>
                      <li>
                        <code>false</code>, <code>off</code>, <code>no</code>, <code>0</code> → Hide
                        column
                      </li>
                    </ul>
                  </div>
                </div>
              `:""}
        </div>
      </div>
    `}_renderColumnDesignTab(t){var e,i,o,n,a,r,s,l,d,c,p,u,m,g,h,b,v,_,f,y,x,w,$,k,S,C,z,I,T,A,P,D;const L=Object.assign(Object.assign({},t.design),{background_color:(null===(e=t.design)||void 0===e?void 0:e.background_color)||t.background_color,padding_top:(null===(i=t.design)||void 0===i?void 0:i.padding_top)||(null===(o=t.padding)||void 0===o?void 0:o.toString()),padding_bottom:(null===(n=t.design)||void 0===n?void 0:n.padding_bottom)||(null===(a=t.padding)||void 0===a?void 0:a.toString()),padding_left:(null===(r=t.design)||void 0===r?void 0:r.padding_left)||(null===(s=t.padding)||void 0===s?void 0:s.toString()),padding_right:(null===(l=t.design)||void 0===l?void 0:l.padding_right)||(null===(d=t.padding)||void 0===d?void 0:d.toString()),border_radius:(null===(c=t.design)||void 0===c?void 0:c.border_radius)||(null===(p=t.border_radius)||void 0===p?void 0:p.toString()),border_color:(null===(u=t.design)||void 0===u?void 0:u.border_color)||t.border_color,border_width:(null===(m=t.design)||void 0===m?void 0:m.border_width)||(null===(g=t.border_width)||void 0===g?void 0:g.toString()),margin_top:(null===(h=t.design)||void 0===h?void 0:h.margin_top)||(null===(b=t.margin)||void 0===b?void 0:b.toString()),margin_bottom:(null===(v=t.design)||void 0===v?void 0:v.margin_bottom)||(null===(_=t.margin)||void 0===_?void 0:_.toString()),margin_left:(null===(f=t.design)||void 0===f?void 0:f.margin_left)||(null===(y=t.margin)||void 0===y?void 0:y.toString()),margin_right:(null===(x=t.design)||void 0===x?void 0:x.margin_right)||(null===(w=t.margin)||void 0===w?void 0:w.toString()),animation_type:null===($=t.design)||void 0===$?void 0:$.animation_type,animation_entity:null===(k=t.design)||void 0===k?void 0:k.animation_entity,animation_trigger_type:null===(S=t.design)||void 0===S?void 0:S.animation_trigger_type,animation_attribute:null===(C=t.design)||void 0===C?void 0:C.animation_attribute,animation_state:null===(z=t.design)||void 0===z?void 0:z.animation_state,animation_duration:null===(I=t.design)||void 0===I?void 0:I.animation_duration,intro_animation:null===(T=t.design)||void 0===T?void 0:T.intro_animation,outro_animation:null===(A=t.design)||void 0===A?void 0:A.outro_animation,animation_delay:null===(P=t.design)||void 0===P?void 0:P.animation_delay,animation_timing:null===(D=t.design)||void 0===D?void 0:D.animation_timing});return console.log("🔄 LayoutTab: Rendering column design tab with properties:",L),q`
      <ultra-global-design-tab
        .hass=${this.hass}
        .designProperties=${L}
        @design-changed=${e=>{console.log("🔄 LayoutTab: Received design-changed event for COLUMN:",e.detail),console.log("🔄 LayoutTab: Current column design before update:",t.design);const i=e.detail,o=Object.assign(Object.assign({},t.design),i);console.log("🔄 LayoutTab: Updated column design:",o),this._updateColumn({design:o})}}
      ></ultra-global-design-tab>
    `}_renderGeneralTab(t){const e=pe().getModule(t.type),i=q`
      <div class="settings-section">
        <label>Module Name:</label>
        <input
          type="text"
          .value=${t.module_name||""}
          @input=${t=>this._updateModule({module_name:t.target.value})}
          placeholder="Give this module a custom name to make it easier to identify in the editor."
          class="module-name-input"
        />
        <div class="field-help">
          Give this module a custom name to make it easier to identify in the editor.
        </div>
      </div>
    `;if(e){const o=e.renderGeneralTab(t,this.hass,this.config,(t=>this._updateModule(t)));return t.type,q` ${i} ${o} `}return q`
      ${i}
      <div class="settings-section">
        <div class="error-message">
          <ha-icon icon="mdi:alert-circle"></ha-icon>
          <span>No settings available for module type: ${t.type}</span>
        </div>
      </div>
    `}_renderActionsTab(t){const e=pe().getModule(t.type);return e&&"function"==typeof e.renderActionsTab?e.renderActionsTab(t,this.hass,this.config,(t=>this._updateModule(t))):q`
      <div class="settings-section">
        <div class="info-message">
          <ha-icon icon="mdi:information"></ha-icon>
          <span>This module does not have action settings</span>
        </div>
      </div>
    `}_renderOtherTab(t){const e=pe().getModule(t.type);return e&&"function"==typeof e.renderOtherTab?e.renderOtherTab(t,this.hass,this.config,(t=>this._updateModule(t))):q`
      <div class="settings-section">
        <div class="info-message">
          <ha-icon icon="mdi:information"></ha-icon>
          <span>This module does not have other settings</span>
        </div>
      </div>
    `}_addCondition(t){const e={id:`condition-${Date.now()}-${Math.random().toString(36).substr(2,9)}`,type:"entity_state",entity:"",operator:"=",value:"",enabled:!0},i=[...t.display_conditions||[],e];this._updateModule({display_conditions:i})}_addRowCondition(t){const e={id:`condition-${Date.now()}-${Math.random().toString(36).substr(2,9)}`,type:"entity_state",entity:"",operator:"=",value:"",enabled:!0},i=[...t.display_conditions||[],e];this._updateRow({display_conditions:i})}_addColumnCondition(t){const e={id:`condition-${Date.now()}-${Math.random().toString(36).substr(2,9)}`,type:"entity_state",entity:"",operator:"=",value:"",enabled:!0},i=[...t.display_conditions||[],e];this._updateColumn({display_conditions:i})}_removeCondition(t,e){const i=(t.display_conditions||[]).filter(((t,i)=>i!==e));this._updateModule({display_conditions:i})}_updateCondition(t,e,i){const o=(t.display_conditions||[]).map(((t,o)=>o===e?Object.assign(Object.assign({},t),i):t));this._updateModule({display_conditions:o})}_duplicateCondition(t,e){const i=t.display_conditions||[],o=i[e];if(o){const t=Object.assign(Object.assign({},o),{id:`condition-${Date.now()}-${Math.random().toString(36).substr(2,9)}`}),n=[...i.slice(0,e+1),t,...i.slice(e+1)];this._updateModule({display_conditions:n})}}_renderRowCondition(t,e,i){return this._renderConditionGeneric(e,i,(e=>{const o=(t.display_conditions||[]).map(((t,o)=>o===i?Object.assign(Object.assign({},t),e):t));this._updateRow({display_conditions:o})}),(()=>{const e=(t.display_conditions||[]).filter(((t,e)=>e!==i));this._updateRow({display_conditions:e})}))}_renderColumnCondition(t,e,i){return this._renderConditionGeneric(e,i,(e=>{const o=(t.display_conditions||[]).map(((t,o)=>o===i?Object.assign(Object.assign({},t),e):t));this._updateColumn({display_conditions:o})}),(()=>{const e=(t.display_conditions||[]).filter(((t,e)=>e!==i));this._updateColumn({display_conditions:e})}))}_renderConditionGeneric(t,e,i,o){return q`
      <div class="condition-item ${t.enabled?"enabled":"disabled"}">
        <div class="condition-header">
          <div class="condition-header-left">
            <button type="button" class="condition-toggle ${"expanded"}">
              <ha-icon icon="mdi:chevron-${"down"}"></ha-icon>
            </button>
            <span class="condition-label">
              ${"entity_state"===t.type?t.entity||"Select Entity State":"entity_attribute"===t.type?t.entity||"Select Entity Attribute":"time"===t.type?"Time Condition":"Template Condition"}
            </span>
          </div>

          <div class="condition-actions">
            <button
              type="button"
              class="condition-action-btn delete"
              @click=${o}
              title="Delete"
            >
              <ha-icon icon="mdi:delete"></ha-icon>
            </button>
          </div>
        </div>

        ${q`
              <div class="condition-content">
                <!-- Condition Type Selector -->
                <div class="condition-field">
                  <label>Condition Type:</label>
                  <select
                    .value=${t.type}
                    @change=${t=>{const e=t.target.value;i({type:e,entity:"",operator:"=",value:""})}}
                  >
                    <option value="entity_state">Entity State</option>
                    <option value="entity_attribute">Entity Attribute</option>
                    <option value="time">Date/Time</option>
                    <option value="template">Template</option>
                  </select>
                </div>

                ${"entity_state"===t.type?this._renderEntityConditionGeneric(t,i):""}
                ${"entity_attribute"===t.type?this._renderEntityAttributeConditionGeneric(t,i):""}

                <!-- Enable/Disable Toggle -->
                <div class="condition-field">
                  <label class="condition-enable-toggle">
                    <input
                      type="checkbox"
                      .checked=${!1!==t.enabled}
                      @change=${t=>i({enabled:t.target.checked})}
                    />
                    Enable this condition
                  </label>
                </div>
              </div>
            `}
      </div>
    `}_renderEntityConditionGeneric(t,e){return q`
      <div class="entity-condition-fields">
        <!-- Entity Picker -->
        <div class="condition-field">
          <label>Entity:</label>
          <ha-form
            .hass=${this.hass}
            .data=${{entity:t.entity||""}}
            .schema=${[{name:"entity",selector:{entity:{}}}]}
            @value-changed=${t=>e({entity:t.detail.value.entity})}
          ></ha-form>
        </div>

        <!-- Operator -->
        <div class="condition-field">
          <label>Operator:</label>
          <select
            .value=${t.operator||"="}
            @change=${t=>e({operator:t.target.value})}
          >
            <option value="=">=</option>
            <option value="!=">!=</option>
            <option value=">">&gt;</option>
            <option value=">=">&gt;=</option>
            <option value="<">&lt;</option>
            <option value="<=">&lt;=</option>
            <option value="has_value">Has a value</option>
            <option value="no_value">Doesn't have a value</option>
          </select>
        </div>

        <!-- Value (if not has_value/no_value) -->
        ${"has_value"!==t.operator&&"no_value"!==t.operator?q`
              <div class="condition-field">
                <label>Value:</label>
                <input
                  type="text"
                  .value=${t.value||""}
                  @input=${t=>e({value:t.target.value})}
                  placeholder="Enter value to compare"
                />
              </div>
            `:""}
      </div>
    `}_renderEntityAttributeConditionGeneric(t,e){return q`
      <div class="entity-attribute-fields">
        <!-- Entity Picker -->
        <div class="condition-field">
          <label>Entity:</label>
          <ha-form
            .hass=${this.hass}
            .data=${{entity:t.entity||""}}
            .schema=${[{name:"entity",selector:{entity:{}}}]}
            @value-changed=${t=>e({entity:t.detail.value.entity})}
          ></ha-form>
        </div>

        <!-- Attribute Selector -->
        <div class="condition-field">
          <label>Attribute Name:</label>
          <input
            type="text"
            .value=${t.attribute||""}
            @input=${t=>e({attribute:t.target.value})}
            placeholder="Enter attribute name (e.g., battery_level, friendly_name)"
          />
          <div class="field-help">
            Enter the exact attribute name from the entity. Common examples: battery_level,
            friendly_name, unit_of_measurement
          </div>
        </div>

        <!-- Operator -->
        <div class="condition-field">
          <label>Operator:</label>
          <select
            .value=${t.operator||"="}
            @change=${t=>e({operator:t.target.value})}
          >
            <option value="=">=</option>
            <option value="!=">!=</option>
            <option value=">">&gt;</option>
            <option value=">=">&gt;=</option>
            <option value="<">&lt;</option>
            <option value="<=">&lt;=</option>
            <option value="has_value">Has a value</option>
            <option value="no_value">Doesn't have a value</option>
          </select>
        </div>

        <!-- Value (if not has_value/no_value) -->
        ${"has_value"!==t.operator&&"no_value"!==t.operator?q`
              <div class="condition-field">
                <label>Value:</label>
                <input
                  type="text"
                  .value=${t.value||""}
                  @input=${t=>e({value:t.target.value})}
                  placeholder="Enter value to compare"
                />
              </div>
            `:""}
      </div>
    `}_renderCondition(t,e,i){return q`
      <div class="condition-item ${e.enabled?"enabled":"disabled"}">
        <div class="condition-header">
          <div class="condition-header-left">
            <button
              type="button"
              class="condition-toggle ${"expanded"}"
              @click=${()=>{}}
            >
              <ha-icon icon="mdi:chevron-${"down"}"></ha-icon>
            </button>
            <span class="condition-label">
              ${"entity_state"===e.type?e.entity||"Select Entity State":"entity_attribute"===e.type?e.entity||"Select Entity Attribute":"time"===e.type?"Time Condition":"Template Condition"}
            </span>
          </div>

          <div class="condition-actions">
            <button
              type="button"
              class="condition-action-btn"
              @click=${()=>this._duplicateCondition(t,i)}
              title="Duplicate"
            >
              <ha-icon icon="mdi:content-copy"></ha-icon>
            </button>
            <button
              type="button"
              class="condition-action-btn delete"
              @click=${()=>this._removeCondition(t,i)}
              title="Delete"
            >
              <ha-icon icon="mdi:delete"></ha-icon>
            </button>
            <button type="button" class="condition-drag-handle" title="Drag to reorder">
              <ha-icon icon="mdi:drag"></ha-icon>
            </button>
          </div>
        </div>

        ${q`
              <div class="condition-content">
                <!-- Condition Type Selector -->
                <div class="condition-field">
                  <label>Condition Type:</label>
                  <select
                    .value=${e.type}
                    @change=${e=>{const o=e.target.value;this._updateCondition(t,i,{type:o,entity:"",operator:"=",value:""})}}
                  >
                    <option value="entity_state">Entity State</option>
                    <option value="entity_attribute">Entity Attribute</option>
                    <option value="time">Date/Time</option>
                    <option value="template">Template</option>
                  </select>
                </div>

                ${"entity_state"===e.type?this._renderEntityCondition(t,e,i):""}
                ${"entity_attribute"===e.type?this._renderEntityAttributeCondition(t,e,i):""}
                ${"time"===e.type?this._renderTimeCondition(t,e,i):""}
                ${"template"===e.type?this._renderTemplateCondition(t,e,i):""}

                <!-- Enable/Disable Toggle -->
                <div class="condition-field">
                  <label class="condition-enable-toggle">
                    <input
                      type="checkbox"
                      .checked=${!1!==e.enabled}
                      @change=${e=>this._updateCondition(t,i,{enabled:e.target.checked})}
                    />
                    Enable this condition
                  </label>
                </div>
              </div>
            `}
      </div>
    `}_renderEntityCondition(t,e,i){return q`
      <div class="entity-condition-fields">
        <!-- Entity Picker -->
        <div class="condition-field">
          <label>Entity:</label>
          <ha-form
            .hass=${this.hass}
            .data=${{entity:e.entity||""}}
            .schema=${[{name:"entity",selector:{entity:{}}}]}
            @value-changed=${e=>this._updateCondition(t,i,{entity:e.detail.value.entity})}
          ></ha-form>
        </div>

        <!-- Operator -->
        <div class="condition-field">
          <label>Operator:</label>
          <select
            .value=${e.operator||"="}
            @change=${e=>this._updateCondition(t,i,{operator:e.target.value})}
          >
            <option value="=">=</option>
            <option value="!=">!=</option>
            <option value=">">&gt;</option>
            <option value=">=">&gt;=</option>
            <option value="<">&lt;</option>
            <option value="<=">&lt;=</option>
            <option value="has_value">Has a value</option>
            <option value="no_value">Doesn't have a value</option>
          </select>
        </div>

        <!-- Value (if not has_value/no_value) -->
        ${"has_value"!==e.operator&&"no_value"!==e.operator?q`
              <div class="condition-field">
                <label>Value:</label>
                <input
                  type="text"
                  .value=${e.value||""}
                  @input=${e=>this._updateCondition(t,i,{value:e.target.value})}
                  placeholder="Enter value to compare"
                />
              </div>
            `:""}
      </div>
    `}_renderEntityAttributeCondition(t,e,i){return q`
      <div class="entity-attribute-fields">
        <!-- Entity Picker -->
        <div class="condition-field">
          <label>Entity:</label>
          <ha-form
            .hass=${this.hass}
            .data=${{entity:e.entity||""}}
            .schema=${[{name:"entity",selector:{entity:{}}}]}
            @value-changed=${e=>this._updateCondition(t,i,{entity:e.detail.value.entity})}
          ></ha-form>
        </div>

        <!-- Attribute Selector -->
        <div class="condition-field">
          <label>Attribute Name:</label>
          <input
            type="text"
            .value=${e.attribute||""}
            @input=${e=>this._updateCondition(t,i,{attribute:e.target.value})}
            placeholder="Enter attribute name (e.g., battery_level, friendly_name)"
          />
          <div class="field-help">
            Enter the exact attribute name from the entity. Common examples: battery_level,
            friendly_name, unit_of_measurement
          </div>
        </div>

        <!-- Operator -->
        <div class="condition-field">
          <label>Operator:</label>
          <select
            .value=${e.operator||"="}
            @change=${e=>this._updateCondition(t,i,{operator:e.target.value})}
          >
            <option value="=">=</option>
            <option value="!=">!=</option>
            <option value=">">&gt;</option>
            <option value=">=">&gt;=</option>
            <option value="<">&lt;</option>
            <option value="<=">&lt;=</option>
            <option value="has_value">Has a value</option>
            <option value="no_value">Doesn't have a value</option>
          </select>
        </div>

        <!-- Value (if not has_value/no_value) -->
        ${"has_value"!==e.operator&&"no_value"!==e.operator?q`
              <div class="condition-field">
                <label>Value:</label>
                <input
                  type="text"
                  .value=${e.value||""}
                  @input=${e=>this._updateCondition(t,i,{value:e.target.value})}
                  placeholder="Enter value to compare"
                />
              </div>
            `:""}
      </div>
    `}_renderTimeCondition(t,e,i){return q`
      <div class="time-condition-fields">
        <p class="condition-info">Local time is ${(new Date).toLocaleString()}</p>

        <div class="time-inputs">
          <div class="condition-field">
            <label>From Time:</label>
            <input
              type="time"
              .value=${e.time_from||""}
              @input=${e=>this._updateCondition(t,i,{time_from:e.target.value})}
            />
          </div>

          <div class="condition-field">
            <label>To Time:</label>
            <input
              type="time"
              .value=${e.time_to||""}
              @input=${e=>this._updateCondition(t,i,{time_to:e.target.value})}
            />
          </div>
        </div>
      </div>
    `}_renderTemplateCondition(t,e,i){return q`
      <div class="template-condition">
        <div class="condition-field">
          <label>Template:</label>
          <textarea
            .value=${e.template||""}
            @input=${e=>this._updateCondition(t,i,{template:e.target.value})}
            placeholder="{% if states('sensor.example') == 'on' %}true{% else %}false{% endif %}"
            rows="3"
          ></textarea>
        </div>
        <div class="template-help">Template should return 'true' or 'false'</div>
      </div>
    `}_renderLogicTab(t){const e=t.display_conditions||[],i=t.display_mode||"always",o=t.template_mode||!1;return q`
      <div class="logic-tab-content">
        <!-- Basic Conditions Section -->
        <div
          class="logic-section"
          style="opacity: ${o?"0.5":"1"}; pointer-events: ${o?"none":"auto"}"
        >
          <div class="section-header">
            <h3>Display this Element</h3>
            ${o?q`<span class="disabled-note">Disabled - Using Advanced Template Mode</span>`:""}
          </div>

          <div class="display-mode-selector">
            <select
              .value=${i}
              @change=${t=>{const e=t.target.value;this._updateModule({display_mode:e})}}
              class="display-mode-dropdown"
              .disabled=${o}
            >
              <option value="always">Always</option>
              <option value="every">If EVERY condition below is met</option>
              <option value="any">If ANY condition below is met</option>
            </select>
          </div>
        </div>

        <!-- Conditions Section -->
        ${"always"!==i?q`
              <div
                class="conditions-section"
                style="opacity: ${o?"0.5":"1"}; pointer-events: ${o?"none":"auto"}"
              >
                <div class="conditions-header">
                  <h4>Conditions</h4>
                  ${o?q`<span class="disabled-note"
                        >Disabled - Using Advanced Template Mode</span
                      >`:""}
                  <button
                    type="button"
                    class="add-condition-btn"
                    @click=${()=>this._addCondition(t)}
                    .disabled=${o}
                  >
                    <ha-icon icon="mdi:plus"></ha-icon>
                    Add Condition
                  </button>
                </div>

                <div class="conditions-list">
                  ${e.map(((e,i)=>this._renderCondition(t,e,i)))}
                </div>

                ${0===e.length?q`
                      <div class="no-conditions">
                        <p>No conditions added yet. Click "Add Condition" to get started.</p>
                      </div>
                    `:""}
              </div>
            `:""}

        <!-- Advanced Template Mode Section -->
        <div class="template-section">
          <div class="template-header">
            <div class="switch-container">
              <label class="switch-label">Advanced Template Mode</label>
              <label class="switch">
                <input
                  type="checkbox"
                  .checked=${o}
                  @change=${t=>{const e=t.target.checked;this._updateModule({template_mode:e,display_mode:e?"always":i})}}
                />
                <span class="slider round"></span>
              </label>
            </div>
            <div class="template-description">
              Use Jinja2 templates for advanced conditional logic. When enabled, the conditions
              above are ignored.
            </div>
          </div>

          ${o?q`
                <div class="template-content">
                  <textarea
                    .value=${t.template||""}
                    @input=${t=>this._updateModule({template:t.target.value})}
                    placeholder="{% if states('binary_sensor.example') == 'on' %}true{% else %}false{% endif %}"
                    class="template-editor"
                    rows="6"
                  ></textarea>
                  <div class="template-help">
                    <p><strong>Template should return a boolean value:</strong></p>
                    <ul>
                      <li>
                        <code>true</code>, <code>on</code>, <code>yes</code>, <code>1</code> → Show
                        element
                      </li>
                      <li>
                        <code>false</code>, <code>off</code>, <code>no</code>, <code>0</code> → Hide
                        element
                      </li>
                    </ul>
                    <p><strong>Examples:</strong></p>
                    <ul>
                      <li><code>{{ states('sensor.temperature') | float > 20 }}</code></li>
                      <li>
                        <code>{% if is_state('binary_sensor.motion', 'on') %}true{% endif %}</code>
                      </li>
                      <li><code>{{ state_attr('sensor.weather', 'humidity') > 50 }}</code></li>
                    </ul>
                  </div>
                </div>
              `:""}
        </div>
      </div>
    `}_renderDesignTab(t){var e,i,o,n,a,r,s,l,d,c,p,u,m,g,h,b,v,_,f,y,x,w,$,k;const S={color:t.color,text_align:(()=>{var e;return void 0!==t.text_align?t.text_align:void 0!==t.alignment?t.alignment:void 0!==(null===(e=t.design)||void 0===e?void 0:e.text_align)?t.design.text_align:void 0})(),font_size:(()=>{const e=t.font_size;return void 0!==e?e.toString():void 0})(),line_height:null===(e=t.line_height)||void 0===e?void 0:e.toString(),letter_spacing:t.letter_spacing,font_family:t.font_family,font_weight:(()=>{const e=t.font_weight;return void 0!==e?e:void 0})(),text_transform:(()=>{const e=t.text_transform;return void 0!==e?e:void 0})(),font_style:t.font_style,background_color:t.background_color,background_image:t.background_image,background_image_type:t.background_image_type,background_image_entity:t.background_image_entity,backdrop_filter:t.backdrop_filter,width:t.width,height:t.height,max_width:t.max_width,max_height:t.max_height,min_width:t.min_width,min_height:t.min_height,margin_top:(null===(o=null===(i=t.margin)||void 0===i?void 0:i.top)||void 0===o?void 0:o.toString())||t.margin_top,margin_bottom:(null===(a=null===(n=t.margin)||void 0===n?void 0:n.bottom)||void 0===a?void 0:a.toString())||t.margin_bottom,margin_left:(null===(s=null===(r=t.margin)||void 0===r?void 0:r.left)||void 0===s?void 0:s.toString())||t.margin_left,margin_right:(null===(d=null===(l=t.margin)||void 0===l?void 0:l.right)||void 0===d?void 0:d.toString())||t.margin_right,padding_top:(null===(p=null===(c=t.padding)||void 0===c?void 0:c.top)||void 0===p?void 0:p.toString())||t.padding_top,padding_bottom:(null===(m=null===(u=t.padding)||void 0===u?void 0:u.bottom)||void 0===m?void 0:m.toString())||t.padding_bottom,padding_left:(null===(h=null===(g=t.padding)||void 0===g?void 0:g.left)||void 0===h?void 0:h.toString())||t.padding_left,padding_right:(null===(v=null===(b=t.padding)||void 0===b?void 0:b.right)||void 0===v?void 0:v.toString())||t.padding_right,border_radius:(null===(f=null===(_=t.border)||void 0===_?void 0:_.radius)||void 0===f?void 0:f.toString())||(null===(y=t.border_radius)||void 0===y?void 0:y.toString()),border_style:(null===(x=t.border)||void 0===x?void 0:x.style)||t.border_style,border_width:(null===($=null===(w=t.border)||void 0===w?void 0:w.width)||void 0===$?void 0:$.toString())||t.border_width,border_color:(null===(k=t.border)||void 0===k?void 0:k.color)||t.border_color,position:t.position,top:t.top,bottom:t.bottom,left:t.left,right:t.right,z_index:t.z_index,text_shadow_h:t.text_shadow_h,text_shadow_v:t.text_shadow_v,text_shadow_blur:t.text_shadow_blur,text_shadow_color:t.text_shadow_color,box_shadow_h:t.box_shadow_h,box_shadow_v:t.box_shadow_v,box_shadow_blur:t.box_shadow_blur,box_shadow_spread:t.box_shadow_spread,box_shadow_color:t.box_shadow_color,overflow:t.overflow,clip_path:t.clip_path,animation_type:t.animation_type,animation_entity:t.animation_entity,animation_trigger_type:t.animation_trigger_type,animation_attribute:t.animation_attribute,animation_state:t.animation_state,intro_animation:t.intro_animation,outro_animation:t.outro_animation,animation_duration:t.animation_duration,animation_delay:t.animation_delay,animation_timing:t.animation_timing};return console.log("🔄 LayoutTab: Rendering module design tab with properties:",S),q`
      <ultra-global-design-tab
        .hass=${this.hass}
        .designProperties=${S}
        .onUpdate=${t=>{console.log("🔄 LayoutTab: Received onUpdate callback for MODULE:",t),console.log("🔄 LayoutTab: Current selected module:",this._selectedModule),this._updateModuleDesign(t)}}
      ></ultra-global-design-tab>
    `}_renderTextDesignTab(t){if("text"===t.type){const e=t;return q`
        <!-- Text Color Section -->
        <div class="settings-section">
          <ultra-color-picker
            .label=${"Text Color"}
            .value=${e.color||""}
            .defaultValue=${"var(--primary-text-color)"}
            .hass=${this.hass}
            @value-changed=${t=>{const i=t.detail.value;this._updateModule({color:i}),this._loadGoogleFont(e.font_family)}}
          ></ultra-color-picker>
        </div>

        <!-- Font Family Dropdown -->
        <div class="settings-section">
          <label>Font:</label>
          <select
            .value=${e.font_family||"default"}
            @change=${t=>{const e=t.target.value;this._updateModule({font_family:e}),this._loadGoogleFont(e)}}
            class="font-dropdown"
          >
            ${ke.map((t=>q`
                <option value="${t.value}" ?selected=${e.font_family===t.value}>
                  ${t.label}
                </option>
              `))}
            <optgroup label="Fonts from Typography settings">
              ${Se.map((t=>q`
                  <option value="${t.value}" ?selected=${e.font_family===t.value}>
                    ${t.label}
                  </option>
                `))}
            </optgroup>
            <optgroup label="Web safe font combinations (do not need to be loaded)">
              ${Ce.map((t=>q`
                  <option value="${t.value}" ?selected=${e.font_family===t.value}>
                    ${t.label}
                  </option>
                `))}
            </optgroup>
          </select>
        </div>

        <!-- Font Size -->
        <div class="settings-section">
          <label>Font Size (px):</label>
          <input
            type="number"
            min="8"
            max="72"
            .value=${e.font_size||16}
            @input=${t=>this._updateModule({font_size:Number(t.target.value)})}
            class="font-size-input"
          />
        </div>

        <!-- Text Alignment -->
        <div class="settings-section">
          <label>Text Alignment:</label>
          <div class="alignment-buttons">
            ${["left","center","right"].map((t=>q`
                <button
                  class="alignment-btn ${e.alignment===t?"active":""}"
                  @click=${()=>this._updateModule({alignment:t})}
                >
                  <ha-icon icon="mdi:format-align-${t}"></ha-icon>
                </button>
              `))}
          </div>
        </div>

        <!-- Text Formatting -->
        <div class="settings-section">
          <label>Text Formatting:</label>
          <div class="format-buttons">
            <button
              class="format-btn ${e.bold?"active":""}"
              @click=${()=>this._updateModule({bold:!e.bold})}
            >
              <ha-icon icon="mdi:format-bold"></ha-icon>
            </button>
            <button
              class="format-btn ${e.italic?"active":""}"
              @click=${()=>this._updateModule({italic:!e.italic})}
            >
              <ha-icon icon="mdi:format-italic"></ha-icon>
            </button>
            <button
              class="format-btn ${e.uppercase?"active":""}"
              @click=${()=>this._updateModule({uppercase:!e.uppercase})}
            >
              <ha-icon icon="mdi:format-letter-case-upper"></ha-icon>
            </button>
            <button
              class="format-btn ${e.strikethrough?"active":""}"
              @click=${()=>this._updateModule({strikethrough:!e.strikethrough})}
            >
              <ha-icon icon="mdi:format-strikethrough"></ha-icon>
            </button>
          </div>
        </div>
      `}if("separator"===t.type)return q`
        <div class="settings-section">
          <ultra-color-picker
            .label=${"Separator Color"}
            .value=${t.color||""}
            .defaultValue=${"var(--divider-color)"}
            .hass=${this.hass}
            @value-changed=${t=>{const e=t.detail.value;this._updateModule({color:e})}}
          ></ultra-color-picker>
        </div>
      `;if("bar"===t.type){const e=t;return q`
        <!-- Bar Colors -->
        <div class="settings-section">
          <ultra-color-picker
            .label=${"Bar Color"}
            .value=${e.bar_color||""}
            .defaultValue=${"var(--primary-color)"}
            .hass=${this.hass}
            @value-changed=${t=>{const e=t.detail.value;this._updateModule({bar_color:e})}}
          ></ultra-color-picker>
        </div>

        <div class="settings-section">
          <ultra-color-picker
            .label=${"Background Color"}
            .value=${e.background_color||""}
            .defaultValue=${"var(--secondary-background-color)"}
            .hass=${this.hass}
            @value-changed=${t=>{const e=t.detail.value;this._updateModule({background_color:e})}}
          ></ultra-color-picker>
        </div>

        <!-- Bar Dimensions -->
        <div class="settings-section">
          <label>Bar Height (px):</label>
          <input
            type="number"
            min="10"
            max="100"
            step="5"
            .value=${e.height||20}
            @input=${t=>this._updateModule({height:Number(t.target.value)})}
            class="number-input"
          />
        </div>

        <div class="settings-section">
          <label>Border Radius (px):</label>
          <input
            type="number"
            min="0"
            max="50"
            .value=${e.border_radius||10}
            @input=${t=>this._updateModule({border_radius:Number(t.target.value)})}
            class="number-input"
          />
        </div>

        <!-- Value Display Options -->
        <div class="settings-section">
          <label class="checkbox-wrapper">
            <input
              type="checkbox"
              .checked=${!1!==e.show_value}
              @change=${t=>this._updateModule({show_value:t.target.checked})}
            />
            Show Value
          </label>
        </div>

        ${e.show_value?q`
              <div class="settings-section">
                <label>Value Position:</label>
                <div class="value-position-buttons">
                  ${["inside","outside","none"].map((t=>q`
                      <button
                        class="position-btn ${e.value_position===t?"active":""}"
                        @click=${()=>this._updateModule({value_position:t})}
                      >
                        ${t.charAt(0).toUpperCase()+t.slice(1)}
                      </button>
                    `))}
                </div>
              </div>
            `:""}

        <div class="settings-section">
          <label class="checkbox-wrapper">
            <input
              type="checkbox"
              .checked=${!1!==e.show_percentage}
              @change=${t=>this._updateModule({show_percentage:t.target.checked})}
            />
            Show as Percentage
          </label>
        </div>

        <div class="settings-section">
          <label class="checkbox-wrapper">
            <input
              type="checkbox"
              .checked=${!1!==e.animation}
              @change=${t=>this._updateModule({animation:t.target.checked})}
            />
            Animation
          </label>
        </div>
      `}if("image"===t.type){const e=t;return q`
        <!-- Image Alignment -->
        <div class="settings-section">
          <label>Image Alignment:</label>
          <div class="alignment-buttons">
            ${["left","center","right"].map((t=>q`
                <button
                  class="alignment-btn ${e.alignment===t?"active":""}"
                  @click=${()=>this._updateModule({alignment:t})}
                >
                  <ha-icon icon="mdi:format-align-${t}"></ha-icon>
                </button>
              `))}
          </div>
        </div>

        <!-- Image Dimensions -->
        <div class="settings-section">
          <label>Width (px):</label>
          <input
            type="number"
            min="50"
            max="500"
            step="10"
            .value=${e.image_width||100}
            @input=${t=>this._updateModule({image_width:Number(t.target.value)})}
            class="number-input"
          />
        </div>

        <div class="settings-section">
          <label>Height (px):</label>
          <input
            type="number"
            min="50"
            max="500"
            step="10"
            .value=${e.image_height||100}
            @input=${t=>this._updateModule({image_height:Number(t.target.value)})}
            class="number-input"
          />
        </div>

        <div class="settings-section">
          <label>Border Radius (px):</label>
          <input
            type="number"
            min="0"
            max="50"
            .value=${e.border_radius||8}
            @input=${t=>this._updateModule({border_radius:Number(t.target.value)})}
            class="number-input"
          />
        </div>

        <div class="settings-section">
          <label>Image Fit:</label>
          <div class="value-position-buttons">
            ${["cover","contain","fill","none"].map((t=>q`
                <button
                  class="position-btn ${e.image_fit===t?"active":""}"
                  @click=${()=>this._updateModule({image_fit:t})}
                >
                  ${t.charAt(0).toUpperCase()+t.slice(1)}
                </button>
              `))}
          </div>
        </div>
      `}return q`<div class="settings-section">
      <p>Design options not available for ${t.type} modules.</p>
    </div>`}_renderBackgroundDesignTab(t){return q`
      <div class="settings-section">
        <ultra-color-picker
          .label=${"Background Color"}
          .value=${t.background_color||""}
          .defaultValue=${"var(--ha-card-background, var(--card-background-color, #fff))"}
          .hass=${this.hass}
          @value-changed=${t=>{const e=t.detail.value;this._updateModule({background_color:e})}}
        ></ultra-color-picker>
      </div>
    `}_renderSpacingDesignTab(t){var e,i,o,n,a,r,s,l;return q`
      <div class="spacing-grid">
        <div class="spacing-section">
          <h4>Margin</h4>
          <div class="spacing-cross">
            <input
              type="number"
              placeholder="Top"
              .value=${(null===(e=t.margin)||void 0===e?void 0:e.top)||0}
              @input=${e=>this._updateModule({margin:Object.assign(Object.assign({},t.margin),{top:Number(e.target.value)})})}
            />
            <div class="spacing-row">
              <input
                type="number"
                placeholder="Left"
                .value=${(null===(i=t.margin)||void 0===i?void 0:i.left)||0}
                @input=${e=>this._updateModule({margin:Object.assign(Object.assign({},t.margin),{left:Number(e.target.value)})})}
              />
              <span class="spacing-center">M</span>
              <input
                type="number"
                placeholder="Right"
                .value=${(null===(o=t.margin)||void 0===o?void 0:o.right)||0}
                @input=${e=>this._updateModule({margin:Object.assign(Object.assign({},t.margin),{right:Number(e.target.value)})})}
              />
            </div>
            <input
              type="number"
              placeholder="Bottom"
              .value=${(null===(n=t.margin)||void 0===n?void 0:n.bottom)||0}
              @input=${e=>this._updateModule({margin:Object.assign(Object.assign({},t.margin),{bottom:Number(e.target.value)})})}
            />
          </div>
        </div>

        <div class="spacing-section">
          <h4>Padding</h4>
          <div class="spacing-cross">
            <input
              type="number"
              placeholder="Top"
              .value=${(null===(a=t.padding)||void 0===a?void 0:a.top)||0}
              @input=${e=>this._updateModule({padding:Object.assign(Object.assign({},t.padding),{top:Number(e.target.value)})})}
            />
            <div class="spacing-row">
              <input
                type="number"
                placeholder="Left"
                .value=${(null===(r=t.padding)||void 0===r?void 0:r.left)||0}
                @input=${e=>this._updateModule({padding:Object.assign(Object.assign({},t.padding),{left:Number(e.target.value)})})}
              />
              <span class="spacing-center">P</span>
              <input
                type="number"
                placeholder="Right"
                .value=${(null===(s=t.padding)||void 0===s?void 0:s.right)||0}
                @input=${e=>this._updateModule({padding:Object.assign(Object.assign({},t.padding),{right:Number(e.target.value)})})}
              />
            </div>
            <input
              type="number"
              placeholder="Bottom"
              .value=${(null===(l=t.padding)||void 0===l?void 0:l.bottom)||0}
              @input=${e=>this._updateModule({padding:Object.assign(Object.assign({},t.padding),{bottom:Number(e.target.value)})})}
            />
          </div>
        </div>
      </div>
    `}firstUpdated(t){super.firstUpdated(t)}updated(t){super.updated(t)}_renderBorderDesignTab(t){var e;return q`
      <div class="settings-section">
        <label>Border Radius (px):</label>
        <input
          type="number"
          min="0"
          max="50"
          .value=${(null===(e=t.border)||void 0===e?void 0:e.radius)||0}
          @input=${e=>this._updateModule({border:Object.assign(Object.assign({},t.border),{radius:Number(e.target.value)})})}
        />
      </div>
    `}render(){const t=this._ensureLayout();return q`
      <div class="layout-builder">
        <div class="builder-header">
          <h3>Layout Builder</h3>
          <button
            class="add-row-btn"
            @click=${t=>{t.stopPropagation(),this._addRow()}}
          >
            <ha-icon icon="mdi:plus"></ha-icon>
            Add Row
          </button>
        </div>

        <div class="rows-container">
          ${t.rows.map(((t,e)=>{var i,o;return q`
              <div
                class="row-builder"
                draggable="true"
                @dragstart=${t=>this._onDragStart(t,"row",e)}
                @dragend=${this._onDragEnd}
                @dragover=${this._onDragOver}
                @dragenter=${t=>this._onDragEnter(t,"row",e)}
                @dragleave=${this._onDragLeave}
                @drop=${t=>this._onDrop(t,"row",e)}
                class="${"row"===(null===(i=this._dropTarget)||void 0===i?void 0:i.type)&&(null===(o=this._dropTarget)||void 0===o?void 0:o.rowIndex)===e?"drop-target":""}"
              >
                <div class="row-header">
                  <div class="row-title">
                    <div class="row-drag-handle" title="Drag to move row">
                      <ha-icon icon="mdi:drag"></ha-icon>
                    </div>
                    <span>Row ${e+1}</span>
                    <button
                      class="column-layout-btn"
                      @click=${t=>{t.stopPropagation(),this._openColumnLayoutSelector(e)}}
                      @mousedown=${t=>t.stopPropagation()}
                      @dragstart=${t=>t.preventDefault()}
                      title="Change Column Layout"
                    >
                      <span class="layout-icon">${this._getCurrentLayoutDisplay(t)}</span>
                    </button>
                  </div>
                  <div class="row-actions">
                    <button
                      class="row-add-column-btn"
                      @click=${t=>{t.stopPropagation(),this._addColumn(e)}}
                      @mousedown=${t=>t.stopPropagation()}
                      @dragstart=${t=>t.preventDefault()}
                      title="Add Column to Row"
                    >
                      <ha-icon icon="mdi:plus"></ha-icon>
                    </button>
                    <button
                      class="row-duplicate-btn"
                      @click=${t=>{t.stopPropagation(),this._duplicateRow(e)}}
                      @mousedown=${t=>t.stopPropagation()}
                      @dragstart=${t=>t.preventDefault()}
                      title="Duplicate Row"
                    >
                      <ha-icon icon="mdi:content-copy"></ha-icon>
                    </button>
                    <button
                      class="row-settings-btn"
                      @click=${t=>{t.stopPropagation(),this._openRowSettings(e)}}
                      @mousedown=${t=>t.stopPropagation()}
                      @dragstart=${t=>t.preventDefault()}
                      title="Row Settings"
                    >
                      <ha-icon icon="mdi:cog"></ha-icon>
                    </button>
                    <button
                      class="delete-row-btn"
                      @click=${t=>{t.stopPropagation(),this._deleteRow(e)}}
                      @mousedown=${t=>t.stopPropagation()}
                      @dragstart=${t=>t.preventDefault()}
                      title="Delete Row"
                    >
                      <ha-icon icon="mdi:delete"></ha-icon>
                    </button>
                  </div>
                </div>
                <div class="columns-container" data-layout="${t.column_layout||"1-2-1-2"}">
                  ${t.columns&&t.columns.length>0?t.columns.map(((t,i)=>{var o,n,a,r,s,l;return q`
                          <div
                            class="column-builder"
                            draggable="true"
                            @dragstart=${t=>this._onDragStart(t,"column",e,i)}
                            @dragend=${this._onDragEnd}
                            @dragover=${this._onDragOver}
                            @dragenter=${t=>this._onDragEnter(t,"column",e,i)}
                            @dragleave=${this._onDragLeave}
                            @drop=${t=>this._onDrop(t,"column",e,i)}
                            class="${"column"===(null===(o=this._dropTarget)||void 0===o?void 0:o.type)&&(null===(n=this._dropTarget)||void 0===n?void 0:n.rowIndex)===e&&(null===(a=this._dropTarget)||void 0===a?void 0:a.columnIndex)===i?"drop-target":""}"
                          >
                            <div class="column-header">
                              <div class="column-title">
                                <div class="column-drag-handle" title="Drag to move column">
                                  <ha-icon icon="mdi:drag"></ha-icon>
                                </div>
                                <span>Column ${i+1}</span>
                              </div>
                              <div class="column-actions">
                                <button
                                  class="column-add-module-btn"
                                  @click=${t=>{t.stopPropagation(),this._openModuleSelector(e,i)}}
                                  @mousedown=${t=>t.stopPropagation()}
                                  @dragstart=${t=>t.preventDefault()}
                                  title="Add Module to Column"
                                >
                                  <ha-icon icon="mdi:plus"></ha-icon>
                                </button>
                                <button
                                  class="column-duplicate-btn"
                                  @click=${t=>{t.stopPropagation(),this._duplicateColumn(e,i)}}
                                  @mousedown=${t=>t.stopPropagation()}
                                  @dragstart=${t=>t.preventDefault()}
                                  title="Duplicate Column"
                                >
                                  <ha-icon icon="mdi:content-copy"></ha-icon>
                                </button>
                                <button
                                  class="column-settings-btn"
                                  @click=${t=>{t.stopPropagation(),this._openColumnSettings(e,i)}}
                                  @mousedown=${t=>t.stopPropagation()}
                                  @dragstart=${t=>t.preventDefault()}
                                  title="Column Settings"
                                >
                                  <ha-icon icon="mdi:cog"></ha-icon>
                                </button>
                                <button
                                  class="column-delete-btn"
                                  @click=${t=>{t.stopPropagation(),this._deleteColumn(e,i)}}
                                  @mousedown=${t=>t.stopPropagation()}
                                  @dragstart=${t=>t.preventDefault()}
                                  title="Delete Column"
                                >
                                  <ha-icon icon="mdi:delete"></ha-icon>
                                </button>
                              </div>
                            </div>
                            <div
                              class="modules-container ${"column"===(null===(r=this._dropTarget)||void 0===r?void 0:r.type)&&(null===(s=this._dropTarget)||void 0===s?void 0:s.rowIndex)===e&&(null===(l=this._dropTarget)||void 0===l?void 0:l.columnIndex)===i?"drop-target":""}"
                              @dragover=${this._onDragOver}
                              @dragenter=${t=>this._onDragEnter(t,"column",e,i)}
                              @dragleave=${this._onDragLeave}
                              @drop=${t=>this._onDrop(t,"column",e,i)}
                            >
                              ${t.modules.map(((t,o)=>{var n,a,r,s;return q`
                                  <div
                                    class="module-item"
                                    draggable="true"
                                    @dragstart=${t=>this._onDragStart(t,"module",e,i,o)}
                                    @dragend=${this._onDragEnd}
                                    @dragover=${this._onDragOver}
                                    @dragenter=${t=>this._onDragEnter(t,"module",e,i,o)}
                                    @dragleave=${this._onDragLeave}
                                    @drop=${t=>this._onDrop(t,"module",e,i,o)}
                                    class="${"module"===(null===(n=this._dropTarget)||void 0===n?void 0:n.type)&&(null===(a=this._dropTarget)||void 0===a?void 0:a.rowIndex)===e&&(null===(r=this._dropTarget)||void 0===r?void 0:r.columnIndex)===i&&(null===(s=this._dropTarget)||void 0===s?void 0:s.moduleIndex)===o?"drop-target":""}"
                                  >
                                    <div
                                      class="module-content"
                                      @click=${()=>this._openModuleSettings(e,i,o)}
                                    >
                                      ${this._renderSingleModule(t,e,i,o)}
                                    </div>
                                  </div>
                                `}))}
                              <button
                                class="add-module-btn"
                                @click=${t=>{t.stopPropagation(),this._openModuleSelector(e,i)}}
                              >
                                <ha-icon icon="mdi:plus"></ha-icon>
                                Add Module
                              </button>
                            </div>
                          </div>
                        `})):q`
                        <div class="empty-row-message">
                          <p>This row has no columns.</p>
                          <button
                            class="add-module-btn"
                            @click=${t=>{t.stopPropagation(),this._openModuleSelector(e,0)}}
                            style="margin-top: 8px;"
                          >
                            <ha-icon icon="mdi:plus"></ha-icon>
                            Add Module (will create column automatically)
                          </button>
                        </div>
                      `}
                  <div class="add-column-container">
                    <button
                      class="add-column-btn"
                      @click=${t=>{t.stopPropagation(),this._addColumn(e)}}
                      title="Add Column"
                    >
                      <ha-icon icon="mdi:plus"></ha-icon>
                      Add Column
                    </button>
                  </div>
                </div>
              </div>
            `}))}
        </div>

        ${this._showModuleSelector?this._renderModuleSelector():""}
        ${this._showModuleSettings?this._renderModuleSettings():""}
        ${this._showLayoutChildSettings?this._renderLayoutChildSettings():""}
        ${this._showRowSettings?this._renderRowSettings():""}
        ${this._showColumnSettings?this._renderColumnSettings():""}
        ${this._showColumnLayoutSelector?this._renderColumnLayoutSelector():""}
      </div>
    `}_renderModuleSelector(){const t=pe().getAllModules(),e=this._selectedLayoutModuleIndex>=0,i=t.filter((t=>"layout"===t.metadata.category)),o=t.filter((t=>"layout"!==t.metadata.category));return q`
      <div class="module-selector-popup">
        <div class="popup-overlay" @click=${()=>this._showModuleSelector=!1}></div>
        <div class="selector-content draggable-popup" id="module-selector-popup">
          <div
            class="selector-header"
            @mousedown=${t=>{const e=t.target.closest(".selector-content");e&&this._startPopupDrag(t,e)}}
          >
            <div class="selector-header-top">
              <h3>Add Module</h3>
              <button
                class="close-button"
                title="Close"
                @mousedown=${t=>t.stopPropagation()}
                @click=${()=>this._showModuleSelector=!1}
              >
                ×
              </button>
            </div>
            ${e?q`<p class="selector-subtitle">
                  Adding to layout module (only content modules allowed)
                </p>`:""}
          </div>

          ${!e&&i.length>0?q`
                <div class="module-category">
                  <h4 class="category-title">Layout Containers</h4>
                  <p class="category-description">Create containers to organize your modules</p>
                  <div class="module-types layout-modules">
                    ${i.map((t=>{const e=t.metadata,i="horizontal"===e.type,o="vertical"===e.type;return q`
                        <button
                          class="module-type-btn layout-module ${i?"horizontal-layout":""} ${o?"vertical-layout":""}"
                          @click=${()=>this._addModule(e.type)}
                          title="${e.description}"
                        >
                          <div class="layout-badge">Layout</div>
                          <ha-icon icon="${e.icon}"></ha-icon>
                          <div class="module-info">
                            <span class="module-title">${e.title}</span>
                            <span class="module-description">${e.description}</span>
                          </div>
                        </button>
                      `}))}
                  </div>
                </div>
              `:""}
          ${o.length>0?q`
                <div class="module-category">
                  <h4 class="category-title">Content Modules</h4>
                  <p class="category-description">Add content and interactive elements</p>
                  <div class="module-types content-modules">
                    ${o.map((t=>{const e=t.metadata;return q`
                        <button
                          class="module-type-btn content-module"
                          @click=${()=>this._addModule(e.type)}
                          title="${e.description}"
                        >
                          <ha-icon icon="${e.icon}"></ha-icon>
                          <div class="module-info">
                            <span class="module-title">${e.title}</span>
                            <span class="module-description">${e.description}</span>
                          </div>
                        </button>
                      `}))}
                  </div>
                </div>
              `:""}

          <!-- Resize handle -->
          <div
            class="resize-handle"
            @mousedown=${t=>{const e=t.target.closest(".selector-content");e&&this._startPopupResize(t,e)}}
            title="Drag to resize"
          >
            <ha-icon icon="mdi:resize-bottom-right"></ha-icon>
          </div>
        </div>
      </div>
    `}_formatCategoryTitle(t){return t.charAt(0).toUpperCase()+t.slice(1)}_isLayoutModule(t){return["horizontal","vertical"].includes(t)}_shouldAutoOpenSettings(t){return!this._isLayoutModule(t)}_getLayoutModuleColor(t){return this._isLayoutModule(t)?"var(--success-color, #4caf50)":"var(--accent-color, var(--orange-color, #ff9800))"}_renderColumnLayoutSelector(){const t=this._ensureLayout().rows[this._selectedRowForLayout],e=t?t.columns.length:1,i=(null==t?void 0:t.column_layout)||"1-col",o=this._migrateLegacyLayoutId(i),n=this._getLayoutsForColumnCount(e);return q`
      <div class="column-layout-selector-popup">
        <div class="popup-overlay" @click=${()=>this._showColumnLayoutSelector=!1}></div>
        <div class="selector-content draggable-popup" id="column-layout-selector-popup">
          <div
            class="selector-header"
            @mousedown=${t=>{const e=t.target.closest(".selector-content");e&&this._startPopupDrag(t,e)}}
          >
            <h3>Choose Column Layout</h3>
            <p>
              Select any layout for ${e}
              column${1!==e?"s":""} (Currently: ${e}
              column${1!==e?"s":""})
            </p>
          </div>

          <div class="layout-options">
            ${n.map((t=>q`
                <button
                  class="layout-option-btn ${t.id===i||t.id===o?"current":""}"
                  @click=${()=>this._changeColumnLayout(t.id)}
                  title="${t.name}"
                >
                  <div class="layout-visual">
                    <div class="layout-icon-large">
                      ${fe(this._createColumnIconHTML(t.proportions))}
                    </div>
                  </div>
                  <div class="layout-name">${t.name}</div>
                  ${t.id===i||t.id===o?q`<div class="current-badge">Current</div>`:""}
                </button>
              `))}
          </div>

          <!-- Resize handle -->
          <div
            class="resize-handle"
            @mousedown=${t=>{const e=t.target.closest(".selector-content");e&&this._startPopupResize(t,e)}}
            title="Drag to resize"
          >
            <ha-icon icon="mdi:resize-bottom-right"></ha-icon>
          </div>
        </div>
      </div>
    `}static get styles(){return l`
      :host {
        --accent-color: var(--orange-color, #ff9800);
        --orange-color: #ff9800;
        --secondary-color: var(--orange-color, #ff9800);
      }

      .layout-builder {
        padding: 12px;
        background: var(--card-background-color);
        border-radius: 8px;
        width: 100%;
        max-width: 100%;
        box-sizing: border-box;
        height: 100%;
        display: flex;
        flex-direction: column;
      }

      .builder-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 12px;
        padding-bottom: 12px;
        border-bottom: 1px solid var(--divider-color);
        flex-wrap: wrap;
        gap: 8px;
        flex-shrink: 0;
      }

      .builder-header h3 {
        margin: 0;
        flex: 1;
        min-width: 120px;
        font-size: 18px;
      }

      .add-row-btn {
        display: flex;
        align-items: center;
        gap: 8px;
        padding: 10px 20px;
        background: var(--primary-color);
        color: white;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        white-space: nowrap;
        font-weight: 500;
        transition: all 0.2s ease;
        min-height: 40px;
      }

      .add-row-btn:hover {
        background: var(--primary-color-dark, var(--primary-color));
        transform: translateY(-1px);
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
      }

      .row-builder {
        margin-bottom: 16px;
        border: 2px solid var(--primary-color);
        border-radius: 8px;
        background: var(--card-background-color);
        width: 100%;
        box-sizing: border-box;
        position: static;
        transition: all 0.2s ease;
        overflow: visible;
      }

      .row-builder:last-child {
        margin-bottom: 0;
      }

      .row-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 10px 12px;
        background: var(--primary-color);
        color: white;
        font-weight: 500;
        border-bottom: 2px solid var(--primary-color);
        position: static;
        z-index: 2;
        border-radius: 8px 8px 0px 0px;
      }

      .row-title {
        display: flex;
        align-items: center;
        gap: 8px;
      }

      .row-drag-handle {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 20px;
        height: 20px;
        color: rgba(255, 255, 255, 0.7);
        cursor: grab;
        opacity: 0.8;
        transition: opacity 0.2s ease;
        --mdc-icon-size: 16px;
      }

      .row-drag-handle:hover {
        opacity: 1;
      }

      .row-drag-handle:active {
        cursor: grabbing;
      }

      .column-layout-btn {
        background: rgba(255, 255, 255, 0.2);
        border: 1px solid rgba(255, 255, 255, 0.3);
        border-radius: 4px;
        padding: 4px 8px;
        cursor: pointer;
        color: white;
        font-size: 14px;
        transition: all 0.2s ease;
        min-width: 32px;
        height: 24px;
        display: flex;
        align-items: center;
        justify-content: center;
      }

      .column-layout-btn:hover {
        background: rgba(255, 255, 255, 0.3);
        border-color: rgba(255, 255, 255, 0.5);
      }

      .layout-icon {
        font-family: monospace;
        font-weight: bold;
        letter-spacing: 1px;
      }

      .row-actions {
        display: flex;
        gap: 8px;
        align-items: center;
      }

      .row-duplicate-btn {
        background: none;
        border: none;
        color: rgba(255, 255, 255, 0.8);
        cursor: pointer;
        padding: 4px;
        border-radius: 4px;
        transition: all 0.2s ease;
      }

      .row-duplicate-btn:hover {
        background: rgba(255, 255, 255, 0.2);
        color: white;
      }

      .row-add-column-btn {
        background: none;
        border: none;
        color: rgba(255, 255, 255, 0.8);
        cursor: pointer;
        padding: 4px;
        border-radius: 4px;
        transition: all 0.2s ease;
      }

      .row-add-column-btn:hover {
        background: rgba(255, 255, 255, 0.2);
        color: white;
      }

      .row-settings-btn {
        background: none;
        border: none;
        color: rgba(255, 255, 255, 0.8);
        cursor: pointer;
        padding: 4px;
        border-radius: 4px;
        transition: background-color 0.2s ease;
      }

      .row-settings-btn:hover {
        background: rgba(255, 255, 255, 0.2);
        color: white;
      }

      .delete-row-btn {
        background: none;
        border: none;
        color: rgba(255, 255, 255, 0.8);
        cursor: pointer;
        padding: 4px;
        border-radius: 4px;
        transition: all 0.2s ease;
      }

      .delete-row-btn:hover {
        background: rgba(255, 100, 100, 0.8);
        color: white;
      }

      .rows-container {
        flex: 1;
        min-height: 0;
        width: 100%;
        box-sizing: border-box;
      }

      .columns-container {
        display: flex;
        flex-direction: column;
        gap: 8px;
        width: 100%;
        padding: 12px;
        box-sizing: border-box;
        background: var(--card-background-color);
        border-top: 1px solid var(--primary-color);
      }

      /* Editor view: Force single column layout for better usability */
      .columns-container[data-layout='1-col'],
      .columns-container[data-layout='1-2-1-2'],
      .columns-container[data-layout='1-3-2-3'],
      .columns-container[data-layout='2-3-1-3'],
      .columns-container[data-layout='2-5-3-5'],
      .columns-container[data-layout='3-5-2-5'],
      .columns-container[data-layout='1-3-1-3-1-3'],
      .columns-container[data-layout='1-4-1-2-1-4'],
      .columns-container[data-layout='1-5-3-5-1-5'],
      .columns-container[data-layout='1-6-2-3-1-6'],
      .columns-container[data-layout='1-4-1-4-1-4-1-4'],
      .columns-container[data-layout='1-5-1-5-1-5-1-5'],
      .columns-container[data-layout='1-6-1-6-1-6-1-6'],
      .columns-container[data-layout='1-8-1-4-1-4-1-8'],
      .columns-container[data-layout='1-5-1-5-1-5-1-5'],
      .columns-container[data-layout='1-6-1-6-1-3-1-6-1-6'],
      .columns-container[data-layout='1-8-1-4-1-4-1-4-1-8'],
      .columns-container[data-layout='1-6-1-6-1-6-1-6-1-6-1-6'],
      /* Legacy support */
      .columns-container[data-layout='50-50'],
      .columns-container[data-layout='30-70'],
      .columns-container[data-layout='70-30'],
      .columns-container[data-layout='33-33-33'],
      .columns-container[data-layout='25-50-25'],
      .columns-container[data-layout='20-60-20'],
      .columns-container[data-layout='25-25-25-25'] {
        display: flex;
        flex-direction: column;
        gap: 8px;
        border: 1px solid var(--primary-color);
        margin-bottom: 16px;
        border-radius: 0px 0px 8px 8px;
      }

      .column-builder {
        border: 2px solid var(--accent-color, var(--orange-color, #ff9800));
        border-radius: 0px 0px 6px 6px;
        background: var(--card-background-color);
        width: 100%;
        box-sizing: border-box;
        overflow: visible;

        position: static;
      }

      .column-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        font-size: 14px;
        font-weight: 500;
        padding: 8px 12px;
        background: var(--accent-color, var(--orange-color, #ff9800));
        color: white;
        border-bottom: 2px solid var(--accent-color, var(--orange-color, #ff9800));
        position: static;
        z-index: 2;
        border-radius: 6px 6px 0px 0px;
      }

      .column-actions {
        display: flex;
        gap: 4px;
        align-items: center;
      }

      .column-add-module-btn,
      .column-duplicate-btn,
      .column-settings-btn,
      .column-delete-btn {
        background: none;
        border: none;
        color: rgba(255, 255, 255, 0.9);
        cursor: pointer;
        padding: 6px 8px;
        border-radius: 4px;
        transition: all 0.2s ease;
        font-size: 12px;
        min-width: 28px;
        min-height: 28px;
        display: flex;
        align-items: center;
        justify-content: center;
        position: relative;
      }

      .column-add-module-btn:hover,
      .column-duplicate-btn:hover,
      .column-settings-btn:hover {
        background: rgba(255, 255, 255, 0.25);
        color: white;
        transform: scale(1.05);
      }

      .column-delete-btn:hover:not([disabled]) {
        background: rgba(255, 100, 100, 0.9);
        color: white;
        transform: scale(1.05);
      }

      .column-delete-btn[disabled] {
        opacity: 0.4;
        cursor: not-allowed;
        transform: none;
      }

      .column-delete-btn[disabled]:hover {
        background: none;
        transform: none;
      }

      .column-actions ha-icon {
        --mdc-icon-size: 16px;
      }

      .column-title {
        display: flex;
        align-items: center;
        gap: 8px;
      }

      .column-drag-handle {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 18px;
        height: 18px;
        color: rgba(255, 255, 255, 0.7);
        cursor: grab;
        opacity: 0.8;
        transition: opacity 0.2s ease;
        --mdc-icon-size: 14px;
      }

      .column-drag-handle:hover {
        opacity: 1;
      }

      .column-drag-handle:active {
        cursor: grabbing;
      }

      .modules-container {
        display: flex;
        flex-direction: column;
        gap: 6px;
        width: 100%;
        box-sizing: border-box;
        padding: 12px;
        background: var(--card-background-color);
        border: 1px solid var(--secondary-color, var(--accent-color, #ff9800));
        border-top: none;
        border-radius: 0px 0px 6px 6px;
        margin-top: 0;

        position: static;
        overflow: visible;
      }

      .module-item {
        position: relative;
        border: 1px solid var(--divider-color);
        border-radius: 4px;
        background: var(--card-background-color);
        margin-bottom: 8px;
        width: 100%;
        min-height: 60px;
        transition: border-color 0.2s ease;
        box-sizing: border-box;
        overflow: visible;
      }

      .module-item:hover {
        border-color: var(--primary-color);
        box-shadow: 0 2px 12px rgba(var(--rgb-primary-color), 0.2);
        transform: translateY(-1px);
      }

      .module-content {
        padding: 8px;
        cursor: pointer;
        width: 100%;
        box-sizing: border-box;
        overflow: hidden;
        word-wrap: break-word;
        word-break: break-word;
        pointer-events: auto;
        position: relative;
        z-index: 1;

        /* Ensure content doesn't interfere with hover actions positioning */
        contain: layout style;
      }

      /* Simplified Module Styles */
      .simplified-module {
        padding: 12px;
        border-radius: 6px;
        background: var(--card-background-color, #fff);
        border: 1px solid var(--divider-color, #e0e0e0);
        width: 100%;
        box-sizing: border-box;
      }

      .simplified-module-header {
        display: flex;
        align-items: center;
        gap: 8px;
        width: 100%;
      }

      .simplified-module-drag-handle {
        flex-shrink: 0;
        width: 20px;
        height: 20px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: var(--secondary-text-color, #757575);
        cursor: grab;
        opacity: 0.6;
        transition: opacity 0.2s ease;
        --mdc-icon-size: 16px;
      }

      .simplified-module:hover .simplified-module-drag-handle {
        opacity: 1;
      }

      .simplified-module-drag-handle:active {
        cursor: grabbing;
      }

      .simplified-module-icon {
        flex-shrink: 0;
        width: 32px;
        height: 32px;
        display: flex;
        align-items: center;
        justify-content: center;
        background: var(--primary-color, #2196f3);
        color: white;
        border-radius: 6px;
        --mdc-icon-size: 20px;
      }

      .simplified-module-content {
        flex: 1;
        min-width: 0;
        display: flex;
        flex-direction: column;
        gap: 2px;
      }

      .simplified-module-title {
        font-size: 14px;
        font-weight: 600;
        color: var(--primary-text-color, #212121);
        line-height: 1.3;
        margin: 0;
        word-wrap: break-word;
        overflow-wrap: break-word;
      }

      .simplified-module-info {
        font-size: 12px;
        color: var(--secondary-text-color, #757575);
        line-height: 1.2;
        margin: 0;
        opacity: 0.8;
        word-wrap: break-word;
        overflow-wrap: break-word;
      }

      .simplified-module-actions {
        display: flex;
        gap: 4px;
        align-items: center;
        flex-shrink: 0;
      }

      .simplified-action-btn {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 24px;
        height: 24px;
        background: var(--card-background-color);
        border: 1px solid var(--divider-color, #e0e0e0);
        border-radius: 4px;
        cursor: pointer;
        transition: all 0.2s ease;
        padding: 0;
      }

      .simplified-action-btn:hover {
        transform: scale(1.05);
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      }

      .simplified-action-btn.edit-btn {
        color: var(--primary-color, #2196f3);
        border-color: var(--primary-color, #2196f3);
      }

      .simplified-action-btn.edit-btn:hover {
        background: var(--primary-color, #2196f3);
        color: white;
      }

      .simplified-action-btn.duplicate-btn {
        color: var(--info-color, #2196f3);
        border-color: var(--info-color, #2196f3);
      }

      .simplified-action-btn.duplicate-btn:hover {
        background: var(--info-color, #2196f3);
        color: white;
      }

      .simplified-action-btn.delete-btn {
        color: var(--error-color, #f44336);
        border-color: var(--error-color, #f44336);
      }

      .simplified-action-btn.delete-btn:hover {
        background: var(--error-color, #f44336);
        color: white;
      }

      .simplified-action-btn ha-icon {
        --mdc-icon-size: 14px;
      }

      /* Disable animations within layout builder modules */
      .module-content * {
        max-width: 100%;
        box-sizing: border-box;
        animation: none !important;
        transition: none !important;
      }

      .module-content *:hover {
        transform: none !important;
        animation: none !important;
        transition: none !important;
      }

      .module-content img {
        max-width: 100%;
        height: auto;
        display: block;
      }

      .add-module-btn {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 6px;
        padding: 10px;
        border: 2px dashed var(--divider-color);
        border-radius: 4px;
        background: none;
        color: var(--secondary-text-color);
        cursor: pointer;
        transition: all 0.2s ease;
        width: 100%;
        box-sizing: border-box;
        font-size: 13px;
        min-height: 36px;
      }

      .add-module-btn:hover {
        border-color: var(--primary-color);
        color: var(--primary-color);
      }

      .add-column-container {
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 8px 12px 12px 12px;
        width: 100%;
        box-sizing: border-box;
      }

      .add-column-btn {
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: center;
        gap: 6px;
        padding: 10px 12px;
        border: 2px dashed var(--secondary-text-color);
        border-radius: 6px;
        background: none;
        color: var(--secondary-text-color);
        cursor: pointer;
        transition: all 0.2s ease;
        font-size: 13px;
        width: 100%;
        min-height: 40px;
        box-sizing: border-box;
      }

      .add-column-btn:hover {
        border-color: var(--primary-color);
        color: var(--primary-color);
        background: var(--primary-color-light, rgba(33, 150, 243, 0.05));
      }

      .add-column-btn ha-icon {
        --mdc-icon-size: 20px;
      }

      /* Empty Row Message */
      .empty-row-message {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 32px 16px;
        border: 2px dashed var(--divider-color);
        border-radius: 8px;
        background: var(--card-background-color);
        color: var(--secondary-text-color);
        text-align: center;
        min-height: 120px;
      }

      .empty-row-message p {
        margin: 0 0 8px 0;
        font-size: 14px;
        opacity: 0.8;
      }

      /* Module Selector Popup */
      .module-selector-popup {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        z-index: 1000;
        display: flex;
        align-items: center;
        justify-content: center;
      }

      .popup-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.5);
      }

      .selector-content {
        position: relative;
        background: var(--card-background-color);
        border-radius: 8px;
        padding: 24px;
        max-width: 500px;
        width: 90%;
        max-height: 80vh;
        overflow-x: hidden; /* prevent bleed */
        overflow-y: auto; /* allow vertical scrolling when content exceeds height */
      }

      .selector-content.draggable-popup {
        position: relative !important; /* avoid transform so fixed menus anchor correctly */
        width: min(700px, 95vw);
        height: min(750px, 90vh);
        transform: none !important;
        top: auto !important;
        left: auto !important;
        margin: 0 auto;
      }

      /* Mobile optimization for selector popup */
      @media (max-width: 768px) {
        .selector-content.draggable-popup {
          width: 95vw;
          height: 90vh;
        }
      }

      .selector-header {
        position: relative; /* for header layout */
        padding-bottom: 16px;
        border-bottom: 1px solid var(--divider-color);
        margin-bottom: 16px;
        cursor: move;
        user-select: none;
      }

      .selector-header-top {
        display: flex;
        align-items: center;
        gap: 12px;
        width: 100%;
        white-space: nowrap;
      }

      .selector-header h3 {
        margin: 0; /* align vertically with X */
        flex: 1; /* push the X to the far right */
      }

      .selector-header .close-button {
        margin-left: auto; /* ensure it sits on the same row to the right */
        background: none;
        border: none;
        font-size: 24px;
        line-height: 1;
        cursor: pointer;
        color: var(--secondary-text-color);
      }

      .selector-header .close-button:hover {
        color: var(--primary-color);
      }

      .module-stats {
        font-size: 12px;
        color: var(--secondary-text-color);
      }

      .module-category {
        margin-bottom: 20px;
      }

      .category-title {
        font-size: 14px;
        font-weight: 600;
        margin: 0 0 8px 0;
        color: var(--primary-text-color);
        text-transform: uppercase;
        letter-spacing: 0.5px;
      }

      .module-types {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 12px;
      }

      .module-type-btn {
        display: flex;
        align-items: center;
        gap: 16px;
        padding: 16px;
        border: 1px solid var(--divider-color);
        border-radius: 8px;
        background: var(--card-background-color);
        cursor: pointer;
        transition: all 0.2s ease;
        text-align: left;
        width: 100%;
        min-height: 60px;
      }

      .module-type-btn:hover {
        border-color: var(--primary-color);
        background: var(--primary-color);
        color: white;
      }

      /* Ensure text elements are white on hover */
      .module-type-btn:hover .module-title,
      .module-type-btn:hover .module-description {
        color: white !important;
      }

      .module-type-btn ha-icon {
        font-size: 32px;
        flex-shrink: 0;
        width: 48px;
        height: 48px;
        display: flex;
        align-items: center;
        justify-content: center;
        background: var(--primary-color);
        color: white;
        border-radius: 8px;
      }

      .module-type-btn:hover ha-icon {
        background: white;
        color: var(--primary-color);
      }

      .module-info {
        display: flex;
        flex-direction: column;
        gap: 4px;
        min-width: 0;
        flex: 1;
      }

      .module-title {
        font-weight: 500;
        font-size: 16px;
        color: var(--primary-text-color);
      }

      .module-description {
        font-size: 14px;
        color: var(--secondary-text-color);
        line-height: 1.3;
      }

      .module-author,
      .module-version {
        display: none; /* Hide for cleaner look */
      }

      /* Module Category Styles */
      .module-category {
        margin-bottom: 24px;
      }

      .category-title {
        font-size: 16px;
        font-weight: 600;
        margin: 0 0 8px 0;
        color: var(--primary-text-color);
        display: flex;
        align-items: center;
        gap: 8px;
      }

      .category-description {
        font-size: 14px;
        color: var(--secondary-text-color);
        margin: 0 0 16px 0;
        line-height: 1.4;
      }

      /* Layout Module Specific Styles */
      .layout-modules .module-type-btn.layout-module {
        position: relative;
        border: 2px solid var(--success-color, #4caf50);
        background: linear-gradient(135deg, rgba(76, 175, 80, 0.1), rgba(76, 175, 80, 0.1));
      }

      .layout-modules .module-type-btn.horizontal-layout {
        border-color: var(--success-color, #4caf50);
      }

      .layout-modules .module-type-btn.vertical-layout {
        border-color: var(--success-color, #4caf50);
      }

      .layout-modules .module-type-btn.layout-module:hover {
        border-color: var(--success-color, #4caf50);
        background: var(--success-color, #4caf50);
        color: white;
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(76, 175, 80, 0.3);
      }

      .layout-modules .module-type-btn.horizontal-layout:hover {
        border-color: var(--success-color, #4caf50);
        background: var(--success-color, #4caf50);
        color: white;
        box-shadow: 0 4px 12px rgba(76, 175, 80, 0.3);
      }

      .layout-modules .module-type-btn.vertical-layout:hover {
        border-color: var(--success-color, #4caf50);
        background: var(--success-color, #4caf50);
        color: white;
        box-shadow: 0 4px 12px rgba(76, 175, 80, 0.3);
      }

      /* Ensure layout module text is white on hover */
      .layout-modules .module-type-btn.layout-module:hover .module-title,
      .layout-modules .module-type-btn.layout-module:hover .module-description,
      .layout-modules .module-type-btn.horizontal-layout:hover .module-title,
      .layout-modules .module-type-btn.horizontal-layout:hover .module-description,
      .layout-modules .module-type-btn.vertical-layout:hover .module-title,
      .layout-modules .module-type-btn.vertical-layout:hover .module-description {
        color: white !important;
      }

      .layout-modules .module-type-btn.layout-module ha-icon {
        background: var(--success-color, #4caf50);
        color: white;
        border: 2px solid rgba(255, 255, 255, 0.2);
      }

      .layout-modules .module-type-btn.horizontal-layout ha-icon {
        background: var(--success-color, #4caf50);
      }

      .layout-modules .module-type-btn.vertical-layout ha-icon {
        background: var(--success-color, #4caf50);
      }

      .layout-modules .module-type-btn.layout-module:hover ha-icon {
        background: white;
        color: var(--success-color, #4caf50);
        border-color: rgba(0, 0, 0, 0.1);
      }

      .layout-modules .module-type-btn.horizontal-layout:hover ha-icon {
        color: var(--success-color, #4caf50);
      }

      .layout-modules .module-type-btn.vertical-layout:hover ha-icon {
        color: var(--success-color, #4caf50);
      }

      .layout-badge {
        position: absolute;
        top: 8px;
        right: 8px;
        background: var(--success-color, #4caf50);
        color: white;
        font-size: 9px;
        font-weight: 600;
        padding: 2px 6px;
        border-radius: 8px;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        opacity: 0.9;
      }

      .layout-modules .module-type-btn.horizontal-layout .layout-badge {
        background: var(--success-color, #4caf50);
      }

      .layout-modules .module-type-btn.vertical-layout .layout-badge {
        background: var(--success-color, #4caf50);
      }

      .layout-modules .module-type-btn.layout-module:hover .layout-badge {
        background: rgba(255, 255, 255, 0.2);
        opacity: 1;
      }

      /* Content Module Styles */
      .content-modules .module-type-btn.content-module {
        border: 1px solid var(--divider-color);
      }

      .content-modules .module-type-btn.content-module:hover {
        border-color: var(--primary-color);
        background: var(--primary-color);
        color: white;
      }

      /* Ensure content module text is white on hover */
      .content-modules .module-type-btn.content-module:hover .module-title,
      .content-modules .module-type-btn.content-module:hover .module-description {
        color: white !important;
      }

      /* Column Layout Selector Popup */
      .column-layout-selector-popup {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        z-index: 1001;
        display: flex;
        align-items: center;
        justify-content: center;
      }

      .layout-options {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 12px;
        margin-top: 16px;
      }

      .layout-option-btn {
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 16px 12px;
        border: 2px solid var(--divider-color);
        border-radius: 8px;
        background: var(--card-background-color);
        cursor: pointer;
        transition: all 0.2s ease;
        text-align: center;
        min-height: 80px;
        gap: 8px;
      }

      .layout-option-btn:hover {
        border-color: var(--primary-color);
        background: var(--primary-color-light, rgba(33, 150, 243, 0.1));
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
      }

      .layout-option-btn.current {
        border-color: var(--primary-color);
        background: var(--primary-color-light, rgba(33, 150, 243, 0.1));
        position: relative;
      }

      .layout-option-btn.current .layout-icon-large {
        color: var(--primary-color);
      }

      .current-badge {
        position: absolute;
        top: 4px;
        right: 4px;
        background: var(--primary-color);
        color: white;
        font-size: 8px;
        font-weight: 600;
        padding: 2px 6px;
        border-radius: 8px;
        text-transform: uppercase;
        letter-spacing: 0.5px;
      }

      .layout-visual {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 100%;
        height: 32px;
      }

      .layout-icon-large {
        font-family: monospace;
        font-weight: bold;
        font-size: 20px;
        letter-spacing: 2px;
        color: var(--primary-color);
        width: 100%;
        height: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
      }

      .layout-name {
        font-size: 12px;
        font-weight: 500;
        color: var(--primary-text-color);
        line-height: 1.2;
      }

      .module-placeholder {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
        padding: 16px;
        border: 1px dashed var(--divider-color);
        border-radius: 4px;
        color: var(--secondary-text-color);
        font-style: italic;
      }

      .error-message {
        display: flex;
        align-items: center;
        gap: 8px;
        padding: 12px;
        background: var(--error-color);
        color: white;
        border-radius: 4px;
        font-size: 14px;
      }

      /* General Settings Popup Styles */
      .settings-popup {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        z-index: 1002;
        display: flex;
        align-items: flex-start;
        justify-content: center;
        padding: 20px;
        overflow-y: auto;
        overflow-x: visible;
      }

      .settings-tabs {
        display: flex;
        border-bottom: 1px solid var(--divider-color);
      }

      .settings-tab {
        flex: 1;
        padding: 12px 16px;
        background: none;
        border: none;
        cursor: pointer;
        color: var(--secondary-text-color);
        font-size: 14px;
        border-bottom: 2px solid transparent;
        transition: all 0.2s ease;
      }

      .settings-tab:hover {
        color: var(--primary-color);
      }

      .settings-tab.active {
        color: var(--primary-color);
        border-bottom-color: var(--primary-color);
      }

      .settings-tab-content {
        padding: 24px;
        flex: 1 1 auto;
        min-height: 0; /* allow parent to control height */
        overflow-y: auto;
      }

      /* Module Settings Popup */
      .module-settings-popup {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        z-index: 1001;
        display: flex;
        align-items: flex-start;
        justify-content: center;
        padding: 20px;
        overflow-y: auto;
        overflow-x: visible;
      }

      .popup-content {
        position: relative;
        background: var(--card-background-color);
        border-radius: 8px;
        width: 720px;
        min-height: 480px;
        max-width: 98vw;
        max-height: 98vh;
        overflow: visible; /* allow children to overflow for menus */
        display: flex;
        flex-direction: column;
      }

      /* Dropdown positioning fixes for popup context -
         ensure menus anchor to fields inside transformed draggable popups */
      .popup-content ha-select,
      .selector-content ha-select {
        position: relative !important;
        overflow: visible !important;
        z-index: 9999 !important;
      }

      .popup-content ha-select .mdc-select__menu,
      .popup-content ha-select mwc-menu,
      .popup-content ha-select .mdc-menu,
      .popup-content ha-select ha-menu,
      .selector-content ha-select .mdc-select__menu,
      .selector-content ha-select mwc-menu,
      .selector-content ha-select .mdc-menu,
      .selector-content ha-select ha-menu {
        position: fixed !important; /* fixed to viewport to avoid transform offset */
        z-index: 10001 !important;
        max-height: 300px !important;
        overflow-y: auto !important;
      }

      .popup-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 20px 24px;
        border-bottom: 1px solid var(--divider-color);
      }

      .close-button {
        background: none;
        border: none;
        font-size: 32px;
        cursor: pointer;
        color: var(--secondary-text-color);
        padding: 0;
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
      }

      .close-button:hover {
        color: var(--primary-color);
      }

      .action-button {
        background: none;
        border: none;
        cursor: pointer;
        padding: 8px;
        width: 36px;
        height: 36px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 4px;
        transition: all 0.2s ease;
      }

      .action-button ha-icon {
        --mdc-icon-size: 20px;
      }

      .duplicate-button {
        color: var(--primary-color);
      }

      .duplicate-button:hover {
        background: var(--primary-color);
        color: white;
      }

      .delete-button {
        color: var(--error-color);
      }

      .delete-button:hover {
        background: var(--error-color);
        color: white;
      }

      .header-actions {
        display: flex;
        align-items: center;
        gap: 8px;
      }

      /* Drag and Resize Functionality */
      .draggable-popup {
        position: absolute;
        transform: none;
        max-width: none;
        max-height: none;
        width: min(700px, 95vw);
        height: min(750px, 90vh);
        /* Center the popup initially */
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        z-index: 1000;
      }

      /* During drag/resize, remove centering transform and use absolute positioning */
      .draggable-popup.popup-dragging,
      .draggable-popup.popup-resizing {
        position: absolute;
        transform: none;
        /* left and top will be set by JavaScript during drag */
      }

      /* Mobile optimization for module popups */
      @media (max-width: 768px) {
        .draggable-popup {
          width: 95vw;
          height: 90vh;
        }
      }

      .popup-header {
        cursor: move;
        user-select: none;
      }

      .resize-handle {
        position: absolute;
        bottom: 0;
        right: 0;
        width: 20px;
        height: 20px;
        cursor: se-resize;
        display: flex;
        align-items: center;
        justify-content: center;
        color: var(--secondary-text-color);
        background: var(--card-background-color);
        border-radius: 8px 0 8px 0;
        transition: all 0.2s ease;
      }

      .resize-handle:hover {
        color: var(--primary-color);
        background: var(--divider-color);
      }

      .resize-handle ha-icon {
        --mdc-icon-size: 16px;
      }

      .popup-dragging {
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3) !important;
        z-index: 1010 !important;
      }

      .popup-resizing {
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3) !important;
        transition: none !important;
      }

      .popup-resizing * {
        transition: none !important;
      }

      /* Override any conflicting styles for resizable elements */
      .draggable-popup.popup-resizing {
        max-width: none !important;
        max-height: none !important;
        width: auto !important;
        height: auto !important;
      }

      .popup-dragging .popup-header,
      .popup-resizing .popup-header {
        cursor: move;
      }

      .popup-dragging .resize-handle,
      .popup-resizing .resize-handle {
        pointer-events: none;
      }

      /* Module Preview */
      .module-preview {
        margin: 16px 24px;
        border: 1px solid var(--divider-color);
        border-radius: 8px;
        overflow: hidden;
      }

      .preview-header {
        padding: 12px 16px;
        background: var(--secondary-background-color);
        font-weight: 500;
        font-size: 14px;
      }

      .preview-content {
        padding: 16px;
        min-height: 60px;
        display: block;
      }

      /* Module Tabs */
      .module-tabs {
        display: flex;
        border-bottom: 1px solid var(--divider-color);
      }

      .module-tab {
        flex: 1;
        padding: 12px 16px;
        background: none;
        border: none;
        cursor: pointer;
        color: var(--secondary-text-color);
        font-size: 14px;
        border-bottom: 2px solid transparent;
        transition: all 0.2s ease;
      }

      .module-tab:hover {
        color: var(--primary-color);
      }

      .module-tab.active {
        color: var(--primary-color);
        border-bottom-color: var(--primary-color);
      }

      .module-tab-content {
        padding: 24px;
        flex: 1;
        overflow-y: auto;
        overflow-x: visible; /* allow dropdown menus to render outside content column */
        width: 100%;
        box-sizing: border-box;
        min-height: 0; /* Allow flex child to shrink below content size */
      }

      /* Design Subtabs */
      .design-subtabs {
        display: flex;
        margin-bottom: 16px;
        border: 1px solid var(--divider-color);
        border-radius: 4px;
        overflow: hidden;
      }

      .design-subtab {
        flex: 1;
        padding: 8px 12px;
        background: var(--secondary-background-color);
        border: none;
        cursor: pointer;
        color: var(--secondary-text-color);
        font-size: 12px;
        transition: all 0.2s ease;
      }

      .design-subtab:hover {
        color: var(--primary-color);
      }

      .design-subtab.active {
        background: var(--primary-color);
        color: white;
      }

      /* Settings Sections */
      .settings-section {
        margin-bottom: 20px;
        width: 100%;
        box-sizing: border-box;
      }

      .settings-section label {
        display: block;
        font-weight: 500;
        margin-bottom: 8px;
        font-size: 14px;
        color: var(--primary-text-color);
        width: 100%;
        box-sizing: border-box;
      }

      /* Color Section Styling */
      .color-section {
        display: flex;
        flex-direction: column;
        gap: 8px;
      }

      .color-picker-wrapper {
        display: flex;
        align-items: center;
      }

      .color-picker-wrapper ultra-color-picker {
        width: 100%;
        max-width: 300px;
      }

      /* Font Dropdown Styling */
      .font-dropdown {
        width: 100%;
        padding: 8px 12px;
        border: 1px solid var(--divider-color);
        border-radius: 4px;
        background: var(--secondary-background-color);
        color: var(--primary-text-color);
        font-size: 14px;
        font-family: inherit;
      }

      .font-dropdown:focus {
        outline: none;
        border-color: var(--primary-color);
      }

      .font-dropdown optgroup {
        font-weight: 600;
        color: var(--secondary-text-color);
        background: var(--card-background-color);
        padding: 4px 0;
      }

      .font-dropdown option {
        padding: 4px 8px;
        background: var(--secondary-background-color);
        color: var(--primary-text-color);
      }

      /* Font Size Input Styling */
      .font-size-input {
        width: 100%;
        padding: 8px 12px;
        border: 1px solid var(--divider-color);
        border-radius: 4px;
        background: var(--secondary-background-color);
        color: var(--primary-text-color);
        font-size: 14px;
      }

      .font-size-input:focus {
        outline: none;
        border-color: var(--primary-color);
      }

      /* Enhanced Alignment Buttons */
      .alignment-buttons {
        display: flex;
        gap: 6px;
        margin-top: 4px;
      }

      .alignment-btn {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 36px;
        height: 36px;
        padding: 0;
        border: 1px solid var(--divider-color);
        border-radius: 4px;
        background: var(--secondary-background-color);
        color: var(--secondary-text-color);
        cursor: pointer;
        transition: all 0.2s ease;
      }

      .alignment-btn:hover {
        border-color: var(--primary-color);
        color: var(--primary-color);
      }

      .alignment-btn.active {
        background: var(--primary-color);
        color: white;
        border-color: var(--primary-color);
      }

      .alignment-btn ha-icon {
        --mdc-icon-size: 16px;
      }

      .settings-section input,
      .settings-section select,
      .settings-section textarea {
        width: 100%;
        max-width: 100%;
        padding: 8px 12px;
        border: 1px solid var(--divider-color);
        border-radius: 4px;
        background: var(--secondary-background-color);
        color: var(--primary-text-color);
        font-size: 14px;
        box-sizing: border-box;
      }

      .settings-section textarea {
        min-height: 60px;
        resize: vertical;
      }

      /* Ensure form elements fit properly */
      .settings-section ha-form {
        width: 100%;
        max-width: 100%;
        box-sizing: border-box;
      }

      /* Ensure color pickers fit properly */
      .settings-section ultra-color-picker {
        width: 100%;
        max-width: 100%;
        box-sizing: border-box;
      }

      /* Consistent styling for all module settings */
      .module-tab-content .settings-section,
      .settings-tab-content .settings-section {
        border-radius: 8px;
        padding: 16px;
        background: var(--card-background-color);
        border: 1px solid var(--divider-color);
        margin-bottom: 16px;
      }

      .module-tab-content .settings-section:last-child,
      .settings-tab-content .settings-section:last-child {
        margin-bottom: 0;
      }

      /* Enhanced input field styling for consistency */
      .module-tab-content input[type='number'],
      .module-tab-content input[type='text'],
      .module-tab-content input[type='color'],
      .module-tab-content select,
      .module-tab-content textarea,
      .settings-tab-content input[type='number'],
      .settings-tab-content input[type='text'],
      .settings-tab-content input[type='color'],
      .settings-tab-content select,
      .settings-tab-content textarea {
        width: 100%;
        max-width: 100%;
        padding: 10px 12px;
        border: 1px solid var(--divider-color);
        border-radius: 6px;
        background: var(--secondary-background-color);
        color: var(--primary-text-color);
        font-size: 14px;
        font-family: inherit;
        box-sizing: border-box;
        transition: border-color 0.2s ease;
      }

      .module-tab-content input:focus,
      .module-tab-content select:focus,
      .module-tab-content textarea:focus,
      .settings-tab-content input:focus,
      .settings-tab-content select:focus,
      .settings-tab-content textarea:focus {
        outline: none;
        border-color: var(--primary-color);
        box-shadow: 0 0 0 1px var(--primary-color);
      }

      /* Range sliders consistent styling */
      .module-tab-content input[type='range'],
      .settings-tab-content input[type='range'] {
        width: 100%;
        height: 6px;
        border-radius: 3px;
        background: var(--divider-color);
        outline: none;
        -webkit-appearance: none;
      }

      .module-tab-content input[type='range']::-webkit-slider-thumb,
      .settings-tab-content input[type='range']::-webkit-slider-thumb {
        -webkit-appearance: none;
        appearance: none;
        width: 18px;
        height: 18px;
        border-radius: 50%;
        background: var(--primary-color);
        cursor: pointer;
      }

      /* Checkbox and radio button styling */
      .module-tab-content input[type='checkbox'],
      .module-tab-content input[type='radio'],
      .settings-tab-content input[type='checkbox'],
      .settings-tab-content input[type='radio'] {
        width: auto;
        margin-right: 8px;
        accent-color: var(--primary-color);
      }

      /* Label styling for form elements */
      .module-tab-content label,
      .settings-tab-content label {
        display: block;
        font-weight: 500;
        margin-bottom: 8px;
        font-size: 14px;
        color: var(--primary-text-color);
        line-height: 1.4;
      }

      /* Field groups */
      .module-tab-content .field-group,
      .settings-tab-content .field-group {
        gap: 12px;
        align-items: flex-end;
      }

      .module-tab-content .field-group > div,
      .settings-tab-content .field-group > div {
        flex: 1;
      }

      /* Button Groups */
      .alignment-buttons,
      .format-buttons {
        display: flex;
        gap: 4px;
      }

      .alignment-btn,
      .format-btn {
        padding: 8px;
        border: 1px solid var(--divider-color);
        border-radius: 4px;
        background: var(--secondary-background-color);
        cursor: pointer;
        transition: all 0.2s ease;
      }

      .alignment-btn:hover,
      .format-btn:hover {
        border-color: var(--primary-color);
      }

      .alignment-btn.active,
      .format-btn.active {
        background: var(--primary-color);
        color: white;
        border-color: var(--primary-color);
      }

      /* Value Position Buttons for Bar Module */
      .value-position-buttons {
        display: flex;
        gap: 8px;
      }

      .position-btn {
        padding: 8px 12px;
        border: 1px solid var(--divider-color);
        border-radius: 4px;
        background: var(--secondary-background-color);
        color: var(--primary-text-color);
        cursor: pointer;
        font-size: 12px;
        font-weight: 500;
        transition: all 0.2s ease;
      }

      .position-btn:hover {
        background: var(--primary-color);
        color: white;
        border-color: var(--primary-color);
      }

      .position-btn.active {
        background: var(--primary-color);
        color: white;
        border-color: var(--primary-color);
      }

      /* Spacing Grid */
      .spacing-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 24px;
      }

      .spacing-section h4 {
        margin: 0 0 12px 0;
        font-size: 14px;
        font-weight: 500;
      }

      .spacing-cross {
        display: grid;
        grid-template-columns: 1fr;
        gap: 8px;
        align-items: center;
        max-width: 120px;
        margin: 0 auto;
      }

      .spacing-row {
        display: grid;
        grid-template-columns: 1fr auto 1fr;
        gap: 8px;
        align-items: center;
      }

      .spacing-center {
        width: 32px;
        height: 32px;
        background: var(--primary-color);
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 4px;
        font-weight: bold;
        font-size: 12px;
      }

      .spacing-cross input {
        width: 60px;
        text-align: center;
        padding: 4px 8px;
        font-size: 12px;
      }

      /* Module Rendering */
      .text-module {
        word-wrap: break-word;
      }

      .separator-module {
        width: 100%;
      }

      .image-module {
        text-align: center;
      }

      .image-placeholder {
        padding: 20px;
        border: 2px dashed var(--divider-color);
        border-radius: 4px;
        color: var(--secondary-text-color);
        font-style: italic;
      }

      .module-placeholder {
        padding: 20px;
        text-align: center;
        color: var(--secondary-text-color);
        font-style: italic;
      }

      /* Logic Tab Styles */
      .logic-tab-content {
        display: flex;
        flex-direction: column;
        gap: 24px;
        padding: 16px;
      }

      .logic-section {
        background: var(--card-background-color);
        border-radius: 8px;
        padding: 16px;
        border: 1px solid var(--divider-color);
      }

      .section-header h3 {
        margin: 0 0 16px 0;
        color: var(--primary-text-color);
        font-size: 18px;
        font-weight: 600;
      }

      .display-mode-dropdown {
        width: 100%;
        padding: 12px;
        border: 1px solid var(--divider-color);
        border-radius: 8px;
        background: var(--card-background-color);
        color: var(--primary-text-color);
        font-size: 14px;
        min-height: 48px;
      }

      /* Conditions Section */
      .conditions-section {
        background: var(--card-background-color);
        border-radius: 8px;
        padding: 16px;
        border: 1px solid var(--divider-color);
      }

      .conditions-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 16px;
      }

      .conditions-header h4 {
        margin: 0;
        color: var(--primary-text-color);
        font-size: 16px;
        font-weight: 600;
      }

      .add-condition-btn {
        display: flex;
        align-items: center;
        gap: 8px;
        padding: 8px 16px;
        background: var(--primary-color);
        color: white;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        font-size: 14px;
        font-weight: 500;
        transition: all 0.2s ease;
      }

      .add-condition-btn:hover {
        opacity: 0.9;
        transform: translateY(-1px);
      }

      .add-condition-btn ha-icon {
        --mdc-icon-size: 16px;
      }

      .conditions-list {
        display: flex;
        flex-direction: column;
        gap: 12px;
      }

      .no-conditions {
        text-align: center;
        padding: 32px;
        color: var(--secondary-text-color);
        font-style: italic;
      }

      /* Individual Condition Item */
      .condition-item {
        background: var(--secondary-background-color);
        border: 1px solid var(--divider-color);
        border-radius: 8px;
        padding: 0;
        transition: all 0.2s ease;
      }

      .condition-item.disabled {
        opacity: 0.6;
      }

      .condition-item:hover {
        border-color: var(--primary-color);
      }

      .condition-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 12px 16px;
        background: var(--card-background-color);
        border-radius: 8px 8px 0 0;
        border-bottom: 1px solid var(--divider-color);
      }

      .condition-header-left {
        display: flex;
        align-items: center;
        gap: 8px;
        flex: 1;
      }

      .condition-toggle {
        background: none;
        border: none;
        color: var(--primary-text-color);
        cursor: pointer;
        padding: 4px;
        border-radius: 4px;
        transition: background 0.2s ease;
      }

      .condition-toggle:hover {
        background: var(--secondary-background-color);
      }

      .condition-toggle ha-icon {
        --mdc-icon-size: 18px;
        transition: transform 0.2s ease;
      }

      .condition-toggle.expanded ha-icon {
        transform: rotate(0deg);
      }

      .condition-label {
        font-weight: 500;
        color: var(--primary-text-color);
        font-size: 14px;
      }

      .condition-actions {
        display: flex;
        align-items: center;
        gap: 4px;
      }

      .condition-action-btn {
        background: none;
        border: none;
        color: var(--secondary-text-color);
        cursor: pointer;
        padding: 6px;
        border-radius: 4px;
        transition: all 0.2s ease;
        display: flex;
        align-items: center;
        justify-content: center;
      }

      .condition-action-btn:hover {
        background: var(--secondary-background-color);
        color: var(--primary-text-color);
      }

      .condition-action-btn.delete:hover {
        background: var(--error-color);
        color: white;
      }

      .condition-action-btn ha-icon {
        --mdc-icon-size: 16px;
      }

      .condition-drag-handle {
        background: none;
        border: none;
        color: var(--secondary-text-color);
        cursor: grab;
        padding: 6px;
        border-radius: 4px;
        transition: all 0.2s ease;
      }

      .condition-drag-handle:hover {
        background: var(--secondary-background-color);
        color: var(--primary-text-color);
      }

      .condition-drag-handle:active {
        cursor: grabbing;
      }

      /* Condition Content */
      .condition-content {
        padding: 16px;
        display: flex;
        flex-direction: column;
        gap: 16px;
      }

      .condition-field {
        display: flex;
        flex-direction: column;
        gap: 8px;
      }

      .condition-field label {
        font-weight: 500;
        color: var(--primary-text-color);
        font-size: 14px;
      }

      .condition-field select,
      .condition-field input,
      .condition-field textarea {
        padding: 10px 12px;
        border: 1px solid var(--divider-color);
        border-radius: 6px;
        background: var(--card-background-color);
        color: var(--primary-text-color);
        font-size: 14px;
        transition: border-color 0.2s ease;
      }

      .condition-field select:focus,
      .condition-field input:focus,
      .condition-field textarea:focus {
        outline: none;
        border-color: var(--primary-color);
      }

      .condition-enable-toggle {
        display: flex;
        align-items: center;
        gap: 8px;
        font-weight: normal !important;
        cursor: pointer;
      }

      /* Condition Type Specific Styles */
      .entity-condition-fields,
      .time-condition-fields,
      .custom-field-condition,
      .template-condition {
        display: flex;
        flex-direction: column;
        gap: 12px;
      }

      .time-inputs {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 16px;
      }

      .condition-info {
        margin: 0;
        padding: 8px 12px;
        background: var(--info-color, #2196f3);
        color: white;
        border-radius: 6px;
        font-size: 12px;
        text-align: center;
      }

      .template-help {
        font-size: 12px;
        color: var(--secondary-text-color);
        font-style: italic;
        margin-top: 4px;
      }

      /* Template Section */
      .template-section {
        background: var(--card-background-color);
        border-radius: 8px;
        padding: 16px;
        border: 1px solid var(--divider-color);
      }

      .template-header {
        margin-bottom: 16px;
      }

      .template-toggle {
        display: flex;
        align-items: center;
        gap: 8px;
        font-weight: 600;
        color: var(--primary-text-color);
        cursor: pointer;
      }

      .template-content {
        display: flex;
        flex-direction: column;
        gap: 8px;
      }

      .template-editor {
        min-height: 120px;
        font-family: 'Courier New', monospace;
        font-size: 13px;
        line-height: 1.4;
        resize: vertical;
      }

      @media (max-width: 768px) {
        .columns-container {
          flex-direction: column;
        }

        .column-builder {
          border-right: none;
          border-bottom: 1px solid var(--divider-color);
        }

        .column-builder:last-child {
          border-bottom: none;
        }

        .module-types {
          grid-template-columns: repeat(2, 1fr);
        }

        .spacing-grid {
          grid-template-columns: 1fr;
        }

        .time-inputs {
          grid-template-columns: 1fr;
        }
      }

      /* Logic Module Dimming */
      .module-with-logic {
        position: relative;
      }

      .module-with-logic.logic-hidden {
        opacity: 0.4;
        filter: grayscale(50%);
      }

      .logic-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.6);
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 12px;
        font-weight: 500;
        border-radius: 4px;
        pointer-events: none;
        z-index: 10;
      }

      .logic-overlay ha-icon {
        --mdc-icon-size: 20px;
        margin-bottom: 4px;
      }

      .logic-overlay span {
        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.8);
      }

      /* Toggle Switch Styles */
      .switch-container {
        display: flex;
        align-items: center;
        justify-content: space-between;
        gap: 12px;
        margin-bottom: 8px;
      }

      .switch-label {
        font-weight: 600;
        color: var(--primary-text-color);
        font-size: 16px;
      }

      .switch {
        position: relative;
        display: inline-block;
        width: 50px;
        height: 24px;
      }

      .switch input {
        opacity: 0;
        width: 0;
        height: 0;
      }

      .slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: var(--switch-unchecked-color, #ccc);
        transition: 0.3s;
        border-radius: 24px;
      }

      .slider:before {
        position: absolute;
        content: '';
        height: 18px;
        width: 18px;
        left: 3px;
        bottom: 3px;
        background-color: white;
        transition: 0.3s;
        border-radius: 50%;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
      }

      input:checked + .slider {
        background-color: var(--primary-color);
      }

      input:focus + .slider {
        box-shadow: 0 0 1px var(--primary-color);
      }

      input:checked + .slider:before {
        transform: translateX(26px);
      }

      .slider.round {
        border-radius: 24px;
      }

      .slider.round:before {
        border-radius: 50%;
      }

      /* Disabled state for conditions */
      .disabled-note {
        font-size: 12px;
        color: var(--warning-color, #ff9800);
        font-style: italic;
        font-weight: normal;
      }

      .template-description {
        font-size: 14px;
        color: var(--secondary-text-color);
        line-height: 1.4;
        margin-top: 4px;
      }

      /* Animation keyframes and classes for preview windows */
      @keyframes pulse {
        0%,
        100% {
          transform: scale(1);
        }
        50% {
          transform: scale(1.05);
        }
      }

      @keyframes vibrate {
        0%,
        100% {
          transform: translateX(0);
        }
        10%,
        30%,
        50%,
        70%,
        90% {
          transform: translateX(-2px);
        }
        20%,
        40%,
        60%,
        80% {
          transform: translateX(2px);
        }
      }

      @keyframes rotate-left {
        0% {
          transform: rotate(0deg);
        }
        100% {
          transform: rotate(-360deg);
        }
      }

      @keyframes rotate-right {
        0% {
          transform: rotate(0deg);
        }
        100% {
          transform: rotate(360deg);
        }
      }

      @keyframes hover {
        0%,
        100% {
          transform: translateY(0);
        }
        50% {
          transform: translateY(-10px);
        }
      }

      @keyframes fade {
        0%,
        100% {
          opacity: 1;
        }
        50% {
          opacity: 0.5;
        }
      }

      @keyframes scale {
        0%,
        100% {
          transform: scale(1);
        }
        50% {
          transform: scale(1.1);
        }
      }

      @keyframes bounce {
        0%,
        20%,
        50%,
        80%,
        100% {
          transform: translateY(0);
        }
        40% {
          transform: translateY(-10px);
        }
        60% {
          transform: translateY(-5px);
        }
      }

      @keyframes shake {
        0%,
        100% {
          transform: translateX(0);
        }
        10%,
        30%,
        50%,
        70%,
        90% {
          transform: translateX(-5px);
        }
        20%,
        40%,
        60%,
        80% {
          transform: translateX(5px);
        }
      }

      @keyframes tada {
        0% {
          transform: scale(1);
        }
        10%,
        20% {
          transform: scale(0.9) rotate(-3deg);
        }
        30%,
        50%,
        70%,
        90% {
          transform: scale(1.1) rotate(3deg);
        }
        40%,
        60%,
        80% {
          transform: scale(1.1) rotate(-3deg);
        }
        100% {
          transform: scale(1) rotate(0);
        }
      }

      .animation-pulse {
        animation-name: pulse;
        animation-iteration-count: infinite;
      }

      .animation-vibrate {
        animation-name: vibrate;
        animation-iteration-count: infinite;
      }

      .animation-rotate-left {
        animation-name: rotate-left;
        animation-timing-function: linear;
        animation-iteration-count: infinite;
      }

      .animation-rotate-right {
        animation-name: rotate-right;
        animation-timing-function: linear;
        animation-iteration-count: infinite;
      }

      .animation-hover {
        animation-name: hover;
        animation-timing-function: ease-in-out;
        animation-iteration-count: infinite;
      }

      .animation-fade {
        animation-name: fade;
        animation-timing-function: ease-in-out;
        animation-iteration-count: infinite;
      }

      .animation-scale {
        animation-name: scale;
        animation-timing-function: ease-in-out;
        animation-iteration-count: infinite;
      }

      .animation-bounce {
        animation-name: bounce;
        animation-iteration-count: infinite;
      }

      .animation-shake {
        animation-name: shake;
        animation-timing-function: cubic-bezier(0.36, 0.07, 0.19, 0.97);
        animation-iteration-count: infinite;
      }

      .animation-tada {
        animation-name: tada;
        animation-iteration-count: infinite;
      }

      /* Row and Column Preview Styles */
      .row-preview-content {
        display: flex;
        padding: 16px;
        border-radius: 8px;
        border: 1px solid var(--divider-color);
        min-height: 60px;
        align-items: center;
        justify-content: space-around;
      }

      .column-preview {
        flex: 1;
        padding: 12px;
        margin: 0 4px;
        background: var(--accent-color);
        color: white;
        border-radius: 4px;
        text-align: center;
        font-size: 14px;
        font-weight: 500;
      }

      .column-preview-content {
        padding: 16px;
        border-radius: 8px;
        border: 1px solid var(--divider-color);
        text-align: center;
        background: var(--secondary-background-color);
        min-height: 60px;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
      }

      .column-preview-content p {
        margin: 0 0 8px 0;
        font-weight: 500;
        color: var(--primary-text-color);
      }

      .module-count {
        font-size: 12px;
        color: var(--secondary-text-color);
      }

      /* Drag and Drop Styles */
      .row-builder[draggable='true'],
      .column-builder[draggable='true'],
      .module-item[draggable='true'] {
        cursor: grab;
      }

      .row-builder[draggable='true']:hover,
      .column-builder[draggable='true']:hover,
      .module-item[draggable='true']:hover {
        cursor: grab;
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
      }

      .row-builder[draggable='true']:active,
      .column-builder[draggable='true']:active,
      .module-item[draggable='true']:active {
        cursor: grabbing;
        transform: scale(0.98);
      }

      /* Invalid drop target indication */
      :host([dragging-column]) .module-item,
      :host([dragging-row]) .module-item,
      :host([dragging-row]) .column-builder {
        cursor: not-allowed !important;
        opacity: 0.5;
        pointer-events: auto;
      }

      .drop-target {
        box-shadow: 0 0 20px rgba(var(--rgb-primary-color), 0.6) !important;
        background: rgba(var(--rgb-primary-color), 0.1) !important;
        transform: scale(1.02) !important;
        transition: all 0.2s ease !important;
      }

      .drop-target.row-builder {
        border-color: var(--primary-color) !important;
        border-width: 3px !important;
        border-style: dashed !important;
      }

      .drop-target.column-builder {
        border-color: var(--primary-color) !important;
        border-width: 3px !important;
        border-style: dashed !important;
      }

      .drop-target.module-item {
        border-color: var(--primary-color) !important;
        border-width: 2px !important;
        border-style: dashed !important;
      }

      /* Drag handle indicators */
      .row-header::before {
        content: '⋮⋮';
        position: absolute;
        left: 8px;
        top: 50%;
        transform: translateY(-50%);
        color: rgba(255, 255, 255, 0.7);
        font-size: 14px;
        letter-spacing: -2px;
        pointer-events: none;
        opacity: 0;
        transition: opacity 0.2s ease;
      }

      .column-header::before {
        content: '⋮⋮';
        position: absolute;
        left: 8px;
        top: 50%;
        transform: translateY(-50%);
        color: rgba(255, 255, 255, 0.7);
        font-size: 12px;
        letter-spacing: -2px;
        pointer-events: none;
        opacity: 0;
        transition: opacity 0.2s ease;
      }

      .module-content::before {
        content: '⋮⋮';
        position: absolute;
        left: 4px;
        top: 8px;
        color: var(--secondary-text-color);
        font-size: 10px;
        letter-spacing: -1px;
        pointer-events: none;
        opacity: 0;
        transition: opacity 0.2s ease;
        z-index: 1;
      }

      .row-builder[draggable='true']:hover .row-header::before {
        opacity: 1;
      }

      .column-builder[draggable='true']:hover .column-header::before {
        opacity: 1;
      }

      .module-item[draggable='true']:hover .module-content::before {
        opacity: 0.8;
      }

      /* Module item hover effect - consolidated with action display */
      .module-item:hover {
        border-color: var(--primary-color) !important;
      }

      .row-header {
        position: relative;
      }

      .column-header {
        position: relative;
      }

      .module-content {
        position: relative;
      }

      /* Visual feedback during drag */
      .row-builder[draggable='true'][style*='opacity: 0.5'] {
        background: rgba(var(--rgb-primary-color), 0.1) !important;
        border: 2px dashed var(--primary-color) !important;
      }

      .column-builder[draggable='true'][style*='opacity: 0.5'] {
        background: rgba(var(--rgb-primary-color), 0.1) !important;
        border: 2px dashed var(--primary-color) !important;
      }

      .module-item[draggable='true'][style*='opacity: 0.5'] {
        background: rgba(var(--rgb-primary-color), 0.1) !important;
        border: 2px dashed var(--primary-color) !important;
      }

      /* Enhanced modules container styling */
      .modules-container {
        min-height: 80px;
        position: relative;
        transition: all 0.2s ease;
      }

      /* Module Name Field Styling */
      .module-name-input {
        width: 100%;
        max-width: 100%;
        padding: 8px 12px;
        border: 1px solid var(--divider-color);
        border-radius: 4px;
        background: var(--secondary-background-color);
        color: var(--primary-text-color);
        font-size: 14px;
        font-family: inherit;
        box-sizing: border-box;
      }

      .module-name-input:focus {
        outline: none;
        border-color: var(--primary-color);
        box-shadow: 0 0 0 1px var(--primary-color);
      }

      .field-help {
        font-size: 12px;
        color: var(--secondary-text-color);
        line-height: 1.4;
        margin-top: 4px;
        font-style: italic;
      }

      /* Note: Image module still shows "Image Name" field from the registry.
         This will need to be addressed in the image module itself to remove
         the duplicate field since we now have universal "Module Name" above. */

      .modules-container:empty {
        border: 2px dashed var(--divider-color);
        background: var(--secondary-background-color);
      }

      .modules-container:empty::before {
        content: 'Drop modules here or click Add Module';
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        color: var(--secondary-text-color);
        font-style: italic;
        font-size: 13px;
        pointer-events: none;
        text-align: center;
      }

      .modules-container::after {
        content: '';
        position: absolute;
        top: -2px;
        left: -2px;
        right: -2px;
        bottom: -2px;
        border: 2px dashed transparent;
        border-radius: 6px;
        pointer-events: none;
        transition: all 0.2s ease;
        z-index: 1;
      }

      .column-builder.drop-target .modules-container::after {
        border-color: var(--primary-color);
        background: rgba(var(--rgb-primary-color), 0.1);
      }

      /* Layout Module Styles - Column-like appearance */
      .layout-module-container {
        border: 2px solid var(--success-color, #4caf50);
        border-radius: 6px;
        background: var(--card-background-color);
        width: 100%;
        box-sizing: border-box;
        overflow: visible;
        margin-bottom: 8px;
      }

      .layout-module-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        font-size: 14px;
        font-weight: 500;
        padding: 8px 12px;
        background: var(--success-color, #4caf50);
        color: white;
        border-bottom: 2px solid var(--success-color, #4caf50);
        border-radius: 0px;
      }

      .layout-module-title {
        display: flex;
        align-items: center;
        gap: 8px;
      }

      .layout-module-drag-handle {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 18px;
        height: 18px;
        color: rgba(255, 255, 255, 0.7);
        cursor: grab;
        opacity: 0.8;
        transition: opacity 0.2s ease;
        --mdc-icon-size: 14px;
      }

      .layout-module-drag-handle:hover {
        opacity: 1;
      }

      .layout-module-drag-handle:active {
        cursor: grabbing;
      }

      .layout-module-actions {
        display: flex;
        gap: 4px;
        align-items: center;
      }

      .layout-module-add-btn,
      .layout-module-settings-btn,
      .layout-module-duplicate-btn,
      .layout-module-delete-btn {
        background: none;
        border: none;
        color: rgba(255, 255, 255, 0.8);
        cursor: pointer;
        padding: 4px;
        border-radius: 4px;
        transition: all 0.2s ease;
        --mdc-icon-size: 16px;
      }

      .layout-module-add-btn:hover,
      .layout-module-settings-btn:hover,
      .layout-module-duplicate-btn:hover {
        background: rgba(255, 255, 255, 0.2);
        color: white;
      }

      .layout-module-delete-btn:hover {
        background: rgba(255, 100, 100, 0.8);
        color: white;
      }

      .layout-modules-container {
        background: var(--card-background-color);
        border: 2px dashed var(--divider-color);
        border-radius: 4px;
        margin: 8px;
        transition: all 0.2s ease;
        position: relative;
      }

      .layout-modules-container:hover {
        border-color: var(--success-color, #4caf50);
        background: rgba(76, 175, 80, 0.05);
      }

      .layout-modules-container.layout-drop-target {
        border-color: var(--primary-color) !important;
        border-width: 3px !important;
        border-style: dashed !important;
        background: rgba(var(--rgb-primary-color), 0.1) !important;
        box-shadow: 0 0 20px rgba(var(--rgb-primary-color), 0.3) !important;
      }

      .layout-module-empty {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        gap: 8px;
        color: var(--secondary-text-color);
        font-style: italic;
        text-align: center;
        padding: 24px;
        width: 100%;
        cursor: pointer;
        user-select: none;
        transition:
          color 0.2s ease,
          opacity 0.2s ease;
      }

      .layout-module-empty ha-icon {
        --mdc-icon-size: 32px;
        opacity: 0.7;
      }

      .layout-module-empty:hover ha-icon {
        opacity: 1;
      }

      .layout-child-module-wrapper {
        width: 100%;
        box-sizing: border-box;
        cursor: grab;
      }

      .layout-child-module-wrapper:active {
        cursor: grabbing;
      }

      /* Simplified layout child module styling */
      .layout-child-simplified-module {
        width: 100%;
        background: var(--card-background-color);
        border: 1px solid var(--divider-color);
        border-radius: 4px;
        transition: all 0.2s ease;
        cursor: pointer;
        box-sizing: border-box;
        margin-bottom: 8px;
      }

      .layout-child-simplified-module:hover {
        border-color: var(--primary-color);
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        transform: translateY(-1px);
      }

      .layout-child-simplified-module:hover .layout-child-content {
        color: var(--primary-text-color);
      }

      .layout-child-simplified-module:active {
        cursor: grabbing;
        transform: scale(0.98);
      }

      .layout-child-module-header {
        display: flex;
        align-items: center;
        gap: 8px;
        padding: 8px 12px;
        min-height: 40px;
        box-sizing: border-box;
      }

      .layout-child-icon {
        --mdc-icon-size: 20px;
        color: var(--primary-color);
        flex-shrink: 0;
      }

      .layout-child-content {
        flex: 1;
        min-width: 0;
      }

      .layout-child-title {
        font-size: 14px;
        font-weight: 500;
        color: var(--primary-text-color);
        margin-bottom: 2px;
      }

      .layout-child-info {
        font-size: 12px;
        color: var(--secondary-text-color);
        line-height: 1.3;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
      }

      .layout-child-drag-handle {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 20px;
        height: 20px;
        color: var(--secondary-text-color);
        cursor: grab;
        opacity: 0.6;
        transition: opacity 0.2s ease;
        --mdc-icon-size: 14px;
      }

      .layout-child-drag-handle:hover {
        opacity: 1;
        color: var(--primary-color);
      }

      .layout-child-drag-handle:active {
        cursor: grabbing;
      }

      .layout-child-actions {
        display: flex;
        gap: 4px;
        align-items: center;
      }

      .layout-child-action-btn {
        background: none;
        border: none;
        color: var(--secondary-text-color);
        cursor: pointer;
        padding: 4px;
        border-radius: 4px;
        transition: all 0.2s ease;
        --mdc-icon-size: 14px;
        width: 24px;
        height: 24px;
        display: flex;
        align-items: center;
        justify-content: center;
      }

      .layout-child-action-btn.edit-btn:hover {
        background: var(--primary-color);
        color: white;
      }

      .layout-child-action-btn.delete-btn:hover {
        background: var(--error-color);
        color: white;
      }

      /* Drag handle indicators */
      .row-header::before,
      .column-header::before {
        content: '⠿⠿';
        position: absolute;
        left: 8px;
        top: 50%;
        transform: translateY(-50%);
        color: rgba(255, 255, 255, 0.7);
        font-size: 10px;
        line-height: 1;
        opacity: 0;
        transition: opacity 0.2s ease;
        pointer-events: none;
        letter-spacing: 1px;
      }

      .row-builder:hover .row-header::before,
      .column-builder:hover .column-header::before {
        opacity: 1;
      }

      /* Drag handle for touch devices */
      @media (hover: none) {
        .row-header::before,
        .column-header::before,
        .module-content::before {
          opacity: 1;
        }

        /* On touch devices, show action buttons on tap/focus */
        .module-item:active .module-hover-overlay,
        .module-item:focus-within .module-hover-overlay {
          opacity: 1;
          visibility: visible;
        }

        .module-action-btn {
          width: 36px;
          height: 36px;
        }

        .module-action-btn ha-icon {
          --mdc-icon-size: 20px;
        }
      }
    `}};$e([vt({attribute:!1})],ze.prototype,"hass",void 0),$e([vt({attribute:!1})],ze.prototype,"config",void 0),$e([_t()],ze.prototype,"_showModuleSelector",void 0),$e([_t()],ze.prototype,"_selectedRowIndex",void 0),$e([_t()],ze.prototype,"_selectedColumnIndex",void 0),$e([_t()],ze.prototype,"_showModuleSettings",void 0),$e([_t()],ze.prototype,"_selectedModule",void 0),$e([_t()],ze.prototype,"_activeModuleTab",void 0),$e([_t()],ze.prototype,"_activeDesignSubtab",void 0),$e([_t()],ze.prototype,"_showRowSettings",void 0),$e([_t()],ze.prototype,"_selectedRowForSettings",void 0),$e([_t()],ze.prototype,"_activeRowTab",void 0),$e([_t()],ze.prototype,"_showColumnSettings",void 0),$e([_t()],ze.prototype,"_selectedColumnForSettings",void 0),$e([_t()],ze.prototype,"_activeColumnTab",void 0),$e([_t()],ze.prototype,"_showColumnLayoutSelector",void 0),$e([_t()],ze.prototype,"_selectedRowForLayout",void 0),$e([_t()],ze.prototype,"_draggedItem",void 0),$e([_t()],ze.prototype,"_dropTarget",void 0),$e([_t()],ze.prototype,"_selectedLayoutModuleIndex",void 0),$e([_t()],ze.prototype,"_showLayoutChildSettings",void 0),$e([_t()],ze.prototype,"_selectedLayoutChild",void 0),$e([_t()],ze.prototype,"_popupDragState",void 0),$e([_t()],ze.prototype,"_popupResizeState",void 0),ze=$e([gt("ultra-layout-tab")],ze);var Ie=function(t,e,i,o){var n,a=arguments.length,r=a<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,i):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(t,e,i,o);else for(var s=t.length-1;s>=0;s--)(n=t[s])&&(r=(a<3?n(r):a>3?n(e,i,r):n(e,i))||r);return a>3&&r&&Object.defineProperty(e,i,r),r};let Te=class extends ut{constructor(){super(...arguments),this._activeTab="layout",this._isFullScreen=!1,this._isMobile=!1,this._moduleStylesInjected=!1}setConfig(t){this.config=t||{type:"custom:ultra-card",layout:{rows:[]}}}connectedCallback(){super.connectedCallback(),this.addEventListener("config-changed",this._handleConfigChanged),this.addEventListener("keydown",this._handleKeyDown),this._checkMobileDevice(),this._resizeListener=this._checkMobileDevice.bind(this),window.addEventListener("resize",this._resizeListener),this._injectModuleStyles()}disconnectedCallback(){super.disconnectedCallback(),this.removeEventListener("config-changed",this._handleConfigChanged),this.removeEventListener("keydown",this._handleKeyDown),this._resizeListener&&window.removeEventListener("resize",this._resizeListener),document.body.classList.remove("ultra-card-fullscreen")}_checkMobileDevice(){const t=window.innerWidth<=768,e=/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),i=this._isMobile;this._isMobile=t||e,this._isMobile&&!i&&this._isFullScreen&&this._toggleFullScreen()}_handleConfigChanged(t){if(t.stopPropagation(),t.detail&&t.detail.config&&(this.config=t.detail.config,!t.detail.isInternal)){const e=new CustomEvent("config-changed",{detail:{config:t.detail.config,isInternal:!0},bubbles:!0,composed:!0});this.dispatchEvent(e)}}_handleKeyDown(t){"Escape"===t.key&&this._isFullScreen&&(t.preventDefault(),this._toggleFullScreen())}_updateConfig(t){const e=Object.assign(Object.assign({},this.config),t);this._configDebounceTimeout&&clearTimeout(this._configDebounceTimeout),this._configDebounceTimeout=window.setTimeout((()=>{const t=he.validateAndCorrectConfig(e);if(!t.valid){console.error("❌ Ultra Card Editor: Config validation failed",{errors:t.errors,warnings:t.warnings});const i=new CustomEvent("config-changed",{detail:{config:e,isInternal:!0},bubbles:!0,composed:!0});return void this.dispatchEvent(i)}const i=he.validateUniqueModuleIds(t.correctedConfig);let o=t.correctedConfig;i.valid||(console.warn("⚠️  Ultra Card Editor: Duplicate module IDs detected, fixing...",{duplicates:i.duplicates}),o=he.fixDuplicateModuleIds(o)),t.warnings.length>0&&console.info("ℹ️  Ultra Card: Config corrected with warnings",{warnings:t.warnings.length});const n=new CustomEvent("config-changed",{detail:{config:o,isInternal:!0},bubbles:!0,composed:!0});this.dispatchEvent(n)}),100)}_toggleFullScreen(){this._isFullScreen=!this._isFullScreen,this._isFullScreen?(document.body.classList.add("ultra-card-fullscreen"),"layout"!==this._activeTab&&(this._activeTab="layout")):document.body.classList.remove("ultra-card-fullscreen")}render(){return this.hass&&this.config?q`
      <div class="card-config ${this._isFullScreen?"fullscreen":""}">
        <div class="tabs">
          <button
            class="tab ${"layout"===this._activeTab?"active":""}"
            @click=${()=>this._activeTab="layout"}
          >
            ${this._isFullScreen?"Ultra Card Layout Builder":"Layout Builder"}
          </button>
          ${this._isFullScreen?"":q`
                <button
                  class="tab ${"settings"===this._activeTab?"active":""}"
                  @click=${()=>this._activeTab="settings"}
                >
                  Settings
                </button>
                <button
                  class="tab ${"about"===this._activeTab?"active":""}"
                  @click=${()=>this._activeTab="about"}
                >
                  About
                </button>
              `}
          ${this._isMobile?"":q`
                <button
                  class="fullscreen-toggle"
                  @click=${this._toggleFullScreen}
                  title=${this._isFullScreen?"Return to Dashboard":"Enter Full Screen"}
                >
                  ${this._isFullScreen?q`
                        <svg viewBox="0 0 24 24" class="arrow-icon">
                          <path d="M15.41,7.41L14,6L8,12L14,18L15.41,16.59L10.83,12L15.41,7.41Z" />
                        </svg>
                        <span class="dashboard-text">Dashboard</span>
                      `:q`
                        <svg viewBox="0 0 24 24" class="arrow-icon">
                          <path d="M8.59,16.58L13.17,12L8.59,7.41L10,6L16,12L10,18L8.59,16.58Z" />
                        </svg>
                      `}
                </button>
              `}
        </div>

        <div class="tab-content">
          ${"layout"===this._activeTab?q`<ultra-layout-tab
                .hass=${this.hass}
                .config=${this.config}
                .isFullScreen=${this._isFullScreen}
              ></ultra-layout-tab>`:"settings"===this._activeTab?this._renderSettingsTab():q`<ultra-about-tab .hass=${this.hass}></ultra-about-tab>`}
        </div>
      </div>
    `:q`<div>Loading...</div>`}_renderSettingsTab(){var t,e,i;const o="var(--card-background-color)";return q`
      <div class="settings-tab">
        <div class="settings-header">
          <h3>Card Settings</h3>
          <p>Configure global card appearance and behavior.</p>
        </div>

        <div class="settings-container">
          <!-- Appearance Section -->
          <div class="settings-section">
            <div class="section-header">
              <h4>Appearance</h4>
              <p>Control the visual appearance of your card</p>
            </div>

            <div class="settings-grid">
              <div class="setting-item">
                <label>Card Background Color</label>
                <div class="setting-description">The background color of the entire card</div>
                <ultra-color-picker
                  .label=${"Card Background Color"}
                  .value=${this.config.card_background||o}
                  .defaultValue=${o}
                  .hass=${this.hass}
                  @value-changed=${t=>this._updateConfig({card_background:t.detail.value})}
                ></ultra-color-picker>
              </div>

              <div class="setting-item">
                <label>Border Radius</label>
                <div class="setting-description">Rounded corners for the card (in pixels)</div>
                <div class="input-with-unit">
                  <input
                    type="number"
                    min="0"
                    max="50"
                    .value=${null!==(t=this.config.card_border_radius)&&void 0!==t?t:""}
                    placeholder="12"
                    @input=${t=>{const e=t.target.value.trim();this._updateConfig({card_border_radius:""===e?12:Number(e)})}}
                  />
                  <span class="unit">px</span>
                  <button
                    class="reset-btn"
                    @click=${()=>this._updateConfig({card_border_radius:12})}
                    title="Reset to default (12px)"
                  >
                    ↺
                  </button>
                </div>
              </div>
            </div>
          </div>

          <!-- Spacing Section -->
          <div class="settings-section">
            <div class="section-header">
              <h4>Spacing</h4>
              <p>Control the spacing and positioning of your card</p>
            </div>

            <div class="settings-grid">
              <div class="setting-item">
                <label>Card Padding</label>
                <div class="setting-description">Internal spacing within the card</div>
                <div class="input-with-unit">
                  <input
                    type="number"
                    min="0"
                    max="100"
                    .value=${null!==(e=this.config.card_padding)&&void 0!==e?e:""}
                    placeholder="16"
                    @input=${t=>{const e=t.target.value.trim();this._updateConfig({card_padding:""===e?16:Number(e)})}}
                  />
                  <span class="unit">px</span>
                  <button
                    class="reset-btn"
                    @click=${()=>this._updateConfig({card_padding:16})}
                    title="Reset to default (16px)"
                  >
                    ↺
                  </button>
                </div>
              </div>

              <div class="setting-item">
                <label>Card Margin</label>
                <div class="setting-description">External spacing around the card</div>
                <div class="input-with-unit">
                  <input
                    type="number"
                    min="0"
                    max="50"
                    .value=${null!==(i=this.config.card_margin)&&void 0!==i?i:""}
                    placeholder="0"
                    @input=${t=>{const e=t.target.value.trim();this._updateConfig({card_margin:""===e?0:Number(e)})}}
                  />
                  <span class="unit">px</span>
                  <button
                    class="reset-btn"
                    @click=${()=>this._updateConfig({card_margin:0})}
                    title="Reset to default (0px)"
                  >
                    ↺
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    `}_injectModuleStyles(){if(this._moduleStylesInjected||!this.shadowRoot)return;const t=pe().getAllModuleStyles();if(t.trim().length){const e=document.createElement("style");e.textContent=t,this.shadowRoot.appendChild(e)}this._moduleStylesInjected=!0}static get styles(){return l`
      /* Global styles for hiding preview in full screen */
      :host {
        --ultra-editor-transition: all 0.3s ease;
      }

      .card-config {
        padding: 16px;
        max-width: 100%;
        margin: 0 auto;
        width: 100%;
        box-sizing: border-box;
        transition: var(--ultra-editor-transition);
      }

      /* Full screen mode styles */
      .card-config.fullscreen {
        max-width: none !important;
        width: 100vw !important;
        margin: 0 !important;
        padding: 20px !important;
        position: fixed !important;
        top: 0 !important;
        left: 0 !important;
        height: 100vh !important;
        z-index: 10000 !important;
        background: var(--card-background-color) !important;
        overflow-y: auto !important;
        box-sizing: border-box !important;
      }

      /* Full screen mode tab content */
      .card-config.fullscreen .tab-content {
        min-height: calc(100vh - 120px) !important;
        width: 100% !important;
        max-width: none !important;
      }

      /* Full screen mode header adjustments */
      .card-config.fullscreen .tabs {
        border: none;
        background: var(--card-background-color);
        padding: 16px;
        position: sticky;
        top: 0;
        z-index: 100;
        justify-content: center;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
      }

      /* Remove the gradient line in fullscreen */
      .card-config.fullscreen .tabs::before {
        display: none;
      }

      /* Center the single tab in fullscreen mode and remove borders */
      .card-config.fullscreen .tab {
        flex: none;
        min-width: auto;
        justify-content: center;
        border: none;
        border-radius: 12px;
        background: var(--primary-color);
        color: white;
        padding: 12px 24px;
        font-weight: 600;
        box-shadow: 0 2px 8px rgba(var(--rgb-primary-color), 0.3);
      }

      .card-config.fullscreen .tab:hover {
        background: var(--primary-color);
        opacity: 0.9;
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(var(--rgb-primary-color), 0.4);
      }

      /* Hide Home Assistant preview when in full screen mode */
      :global(body.ultra-card-fullscreen) {
        overflow: hidden !important;
      }

      :global(body.ultra-card-fullscreen *) {
        .element-preview,
        .element-preview-container,
        .preview-container,
        .card-preview,
        .preview-pane,
        hui-card-preview,
        .card-config > div:last-child:not(.card-config),
        .card-config-row > div:last-child,
        .mdc-dialog .mdc-dialog__container .mdc-dialog__surface > div:last-child:not(.card-config) {
          display: none !important;
        }

        .card-config-container,
        .editor-container,
        .card-config-row,
        .mdc-dialog .mdc-dialog__container .mdc-dialog__surface {
          width: 100% !important;
          max-width: none !important;
        }

        /* Override HA dialog sizing */
        .mdc-dialog .mdc-dialog__container {
          max-width: 100vw !important;
          width: 100vw !important;
          position: fixed !important;
          top: 0 !important;
          left: 0 !important;
          right: 0 !important;
          bottom: 0 !important;
          z-index: 9999 !important;
        }

        .mdc-dialog .mdc-dialog__surface {
          max-width: 100vw !important;
          width: 100vw !important;
          max-height: 100vh !important;
          height: 100vh !important;
          position: fixed !important;
          top: 0 !important;
          left: 0 !important;
          margin: 0 !important;
          border-radius: 0 !important;
        }

        /* Hide the backdrop */
        .mdc-dialog .mdc-dialog__scrim {
          display: none !important;
        }
      }

      /* Allow action forms to display all their elements properly */
      ha-form[data-action-form] *,
      ha-form[data-action-form] .mdc-form-field,
      ha-form[data-action-form] .mdc-text-field,
      ha-form[data-action-form] .mdc-floating-label,
      ha-form[data-action-form] .mdc-notched-outline__leading,
      ha-form[data-action-form] .mdc-notched-outline__notch,
      ha-form[data-action-form] .mdc-notched-outline__trailing,
      ha-form[data-action-form] .mdc-floating-label--float-above,
      ha-form[data-action-form] label,
      ha-form[data-action-form] .ha-form-label,
      ha-form[data-action-form] .form-label,
      ha-form[data-action-form] .mdc-text-field-character-counter,
      ha-form[data-action-form] .mdc-text-field-helper-text,
      ha-form[data-action-form] mwc-formfield,
      ha-form[data-action-form] .formfield {
        display: initial !important;
        visibility: visible !important;
      }

      /* Ensure action forms themselves are visible */
      ha-form[data-action-form] {
        display: block !important;
        visibility: visible !important;
      }

      /* Hide unwanted form labels with underscores - but only for non-action forms */
      ha-form:not([data-action-form]) .mdc-form-field > label,
      ha-form:not([data-action-form]) .mdc-text-field > label,
      ha-form:not([data-action-form]) .mdc-floating-label,
      ha-form:not([data-action-form]) .mdc-notched-outline__leading,
      ha-form:not([data-action-form]) .mdc-notched-outline__notch,
      ha-form:not([data-action-form]) .mdc-notched-outline__trailing,
      ha-form:not([data-action-form]) .mdc-floating-label--float-above,
      ha-form:not([data-action-form]) label[for],
      ha-form:not([data-action-form]) .ha-form-label,
      ha-form:not([data-action-form]) .form-label {
        display: none !important;
      }

      /* Hide labels containing underscores only for non-action forms */
      ha-form:not([data-action-form]) label[data-label*='_'],
      ha-form:not([data-action-form]) .label-text:contains('_'),
      :not([data-action-form]) label:contains('_') {
        display: none !important;
      }

      /* Additional safeguards for underscore labels in non-action forms */
      ha-form:not([data-action-form]) .mdc-text-field-character-counter,
      ha-form:not([data-action-form]) .mdc-text-field-helper-text,
      ha-form:not([data-action-form]) mwc-formfield,
      ha-form:not([data-action-form]) .formfield {
        display: none !important;
      }

      /* GLOBAL DROPDOWN POSITIONING FIXES - All Modules */
      /* These fixes ensure ha-select dropdowns render properly across all modules */
      ha-select {
        position: relative !important;
        overflow: visible !important;
        z-index: 9999 !important;
      }

      /* Ensure dropdown menus are properly positioned in ALL contexts */
      ha-select .mdc-select__menu,
      ha-select mwc-menu,
      ha-select .mdc-menu,
      ha-select ha-menu {
        position: fixed !important;
        z-index: 10001 !important;
        max-height: 300px !important;
        overflow-y: auto !important;
      }

      /* Ensure ha-form containers allow dropdown overflow */
      ha-form {
        overflow: visible !important;
        position: relative;
        z-index: 1;
      }

      /* Specific fixes for nested form contexts */
      .settings-section ha-form,
      .field-section ha-form,
      .module-general-settings ha-form,
      .module-tab-content ha-form {
        overflow: visible !important;
        position: relative;
        z-index: 1;
      }

      /* Ensure all select elements in forms have proper positioning */
      .settings-section ha-select,
      .field-section ha-select,
      .module-general-settings ha-select,
      .module-tab-content ha-select,
      ha-form ha-select {
        position: relative !important;
        overflow: visible !important;
        z-index: 9999 !important;
      }

      /* Fix for conditional fields and nested containers */
      .conditional-fields-content ha-select,
      .icon-settings-container ha-select,
      details ha-select {
        position: relative !important;
        overflow: visible !important;
        z-index: 9999 !important;
      }

      /* Ensure dropdown menus in nested contexts are properly positioned */
      .conditional-fields-content ha-select .mdc-select__menu,
      .conditional-fields-content ha-select mwc-menu,
      .icon-settings-container ha-select .mdc-select__menu,
      .icon-settings-container ha-select mwc-menu,
      details ha-select .mdc-select__menu,
      details ha-select mwc-menu {
        position: fixed !important;
        z-index: 10001 !important;
        max-height: 300px !important;
        overflow-y: auto !important;
      }

      /* Mobile responsive adjustments */
      @media (max-width: 768px) {
        .card-config {
          padding: 8px;
        }

        /* Hide fullscreen toggle on mobile as additional safeguard */
        .fullscreen-toggle {
          display: none !important;
        }
      }

      .tabs {
        display: flex;
        border-bottom: 2px solid var(--divider-color);
        margin-bottom: 16px;
      }

      .tab {
        background: none;
        border: none;
        padding: 12px 16px;
        cursor: pointer;
        color: var(--secondary-text-color);
        font-size: 14px;
        border-bottom: 2px solid transparent;
        transition: all 0.2s ease;
        flex: 1;
        text-align: center;
      }

      .tab:hover {
        color: var(--primary-color);
      }

      .tab.active {
        color: var(--primary-color);
        border-bottom-color: var(--primary-color);
      }

      .fullscreen-toggle {
        background: none;
        border: none;
        padding: 8px 12px;
        cursor: pointer;
        color: var(--secondary-text-color);
        margin-left: auto;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 6px;
        transition: var(--ultra-editor-transition);
        position: relative;
        min-width: 40px;
        height: 40px;
        gap: 6px;
      }

      .fullscreen-toggle:hover {
        background: var(--divider-color);
        color: var(--primary-color);
      }

      .fullscreen-toggle:active {
        transform: scale(0.95);
      }

      /* Active fullscreen state - Dashboard button styling */
      .card-config.fullscreen .fullscreen-toggle {
        background: rgba(var(--rgb-primary-color), 0.1);
        color: var(--primary-color);
        border: 1px solid rgba(var(--rgb-primary-color), 0.2);
        padding: 8px 16px;
        min-width: auto;
        height: auto;
      }

      .card-config.fullscreen .fullscreen-toggle:hover {
        background: var(--primary-color);
        color: white;
        border-color: var(--primary-color);
        transform: translateX(-2px);
      }

      .arrow-icon {
        width: 20px;
        height: 20px;
        fill: currentColor;
        transition: var(--ultra-editor-transition);
        flex-shrink: 0;
      }

      .dashboard-text {
        font-size: 14px;
        font-weight: 500;
        white-space: nowrap;
      }

      .tab-content {
        min-height: 400px;
        transition: var(--ultra-editor-transition);
      }

      /* Full screen mode tab content */
      .card-config.fullscreen .tab-content {
        min-height: calc(100vh - 120px);
      }

      .settings-tab {
        padding: 12px;
        background: var(--card-background-color);
        border-radius: 8px;
        width: 100%;
        max-width: 100%;
        box-sizing: border-box;
        height: 100%;
        display: flex;
        flex-direction: column;
      }

      .settings-header {
        margin-bottom: 24px;
        padding-bottom: 16px;
        border-bottom: 1px solid var(--divider-color);
      }

      .settings-header h3 {
        margin: 0 0 8px 0;
        color: var(--primary-text-color);
        font-size: 18px;
        font-weight: 600;
      }

      .settings-header p {
        margin: 0;
        color: var(--secondary-text-color);
        font-size: 14px;
        line-height: 1.4;
      }

      .settings-container {
        display: flex;
        flex-direction: column;
        gap: 24px;
        flex: 1;
      }

      .settings-section {
        background: var(--secondary-background-color);
        border: 2px solid var(--primary-color);
        border-radius: 8px;
        padding: 20px;
        box-sizing: border-box;
      }

      .section-header {
        margin-bottom: 20px;
        padding-bottom: 12px;
        border-bottom: 1px solid rgba(var(--rgb-primary-color), 0.2);
      }

      .section-header h4 {
        margin: 0 0 6px 0;
        color: var(--primary-text-color);
        font-size: 16px;
        font-weight: 600;
        display: flex;
        align-items: center;
        gap: 8px;
      }

      .section-header p {
        margin: 0;
        color: var(--secondary-text-color);
        font-size: 13px;
        line-height: 1.4;
      }

      .settings-grid {
        display: flex;
        flex-direction: column;
        gap: 20px;
      }

      .setting-item {
        display: flex;
        flex-direction: column;
        gap: 8px;
      }

      .setting-item label {
        color: var(--primary-text-color);
        font-size: 14px;
        font-weight: 500;
        margin: 0;
      }

      .setting-description {
        color: var(--secondary-text-color);
        font-size: 12px;
        line-height: 1.3;
        margin-bottom: 4px;
      }

      .input-with-unit {
        display: flex;
        align-items: center;
        gap: 8px;
        max-width: 200px;
      }

      .input-with-unit input {
        flex: 1;
        padding: 10px 12px;
        border: 1px solid var(--divider-color);
        border-radius: 6px;
        background: var(--card-background-color);
        color: var(--primary-text-color);
        font-size: 14px;
        transition: all 0.2s ease;
        min-width: 0;
      }

      .input-with-unit input:focus {
        outline: none;
        border-color: var(--primary-color);
        box-shadow: 0 0 0 2px rgba(var(--rgb-primary-color), 0.2);
      }

      .input-with-unit .unit {
        color: var(--secondary-text-color);
        font-size: 12px;
        font-weight: 500;
        min-width: 20px;
        text-align: center;
      }

      .reset-btn {
        background: var(--secondary-background-color);
        border: 1px solid var(--divider-color);
        border-radius: 4px;
        color: var(--secondary-text-color);
        cursor: pointer;
        font-size: 14px;
        font-weight: bold;
        width: 28px;
        height: 28px;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.2s ease;
        padding: 0;
        flex-shrink: 0;
      }

      .reset-btn:hover {
        background: var(--primary-color);
        color: white;
        border-color: var(--primary-color);
        transform: scale(1.05);
      }

      .reset-btn:active {
        transform: scale(0.95);
      }

      .setting-item ultra-color-picker {
        max-width: 300px;
      }

      /* Responsive adjustments */
      @media (max-width: 768px) {
        .settings-tab {
          padding: 16px 12px;
        }

        .settings-section {
          padding: 16px;
        }

        .settings-grid {
          gap: 16px;
        }
      }

      /* Full screen mode responsive behavior for builder columns */
      .card-config.fullscreen {
        /* Allow horizontal layout components to display side by side */
        ::slotted(ultra-layout-tab) {
          --layout-columns-display: flex;
          --layout-columns-direction: row;
          --layout-columns-gap: 16px;
        }

        /* Style for layout builder in full screen */
        ultra-layout-tab {
          --columns-layout: horizontal;
        }
      }

      /* Default preview mode - stack columns vertically */
      .card-config:not(.fullscreen) {
        ::slotted(ultra-layout-tab) {
          --layout-columns-display: flex;
          --layout-columns-direction: column;
          --layout-columns-gap: 12px;
        }

        ultra-layout-tab {
          --columns-layout: vertical;
        }
      }

      /* Enhanced mobile behavior */
      @media (max-width: 768px) {
        .card-config.fullscreen {
          width: 100vw;
          height: 100vh;
          padding: 12px;
          position: fixed;
          top: 0;
          left: 0;
          z-index: 9999;
          background: var(--card-background-color);
        }

        .fullscreen-toggle {
          padding: 6px 10px;
          min-width: 36px;
          height: 36px;
        }

        .arrow-icon {
          width: 16px;
          height: 16px;
        }
      }
    `}};Ie([vt({attribute:!1})],Te.prototype,"hass",void 0),Ie([vt({attribute:!1})],Te.prototype,"config",void 0),Ie([_t()],Te.prototype,"_activeTab",void 0),Ie([_t()],Te.prototype,"_configDebounceTimeout",void 0),Ie([_t()],Te.prototype,"_isFullScreen",void 0),Ie([_t()],Te.prototype,"_isMobile",void 0),Te=Ie([gt("ultra-card-editor")],Te);var Ae=function(t,e,i,o){var n,a=arguments.length,r=a<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,i):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(t,e,i,o);else for(var s=t.length-1;s>=0;s--)(n=t[s])&&(r=(a<3?n(r):a>3?n(e,i,r):n(e,i))||r);return a>3&&r&&Object.defineProperty(e,i,r),r};let Pe=class extends ut{constructor(){super(...arguments),this._moduleVisibilityState=new Map,this._animatingModules=new Set,this._lastHassChangeTime=0,this._moduleStylesInjected=!1}connectedCallback(){super.connectedCallback(),this._injectModuleStyles(),this._templateUpdateListener=()=>{this.requestUpdate()},window.addEventListener("ultra-card-template-update",this._templateUpdateListener)}disconnectedCallback(){super.disconnectedCallback(),this._templateUpdateListener&&window.removeEventListener("ultra-card-template-update",this._templateUpdateListener)}willUpdate(t){if(t.has("config")){const e=t.get("config"),i=this.config;e&&JSON.stringify(e.layout)===JSON.stringify(null==i?void 0:i.layout)||(this._moduleVisibilityState.clear(),this._animatingModules.clear()),this.requestUpdate()}if(t.has("hass")){const t=Date.now();t-this._lastHassChangeTime>100&&(this._lastHassChangeTime=t,this.hass&&me.setHass(this.hass),this.requestUpdate())}}setConfig(t){if(!t)throw new Error("Invalid configuration");const e=he.validateAndCorrectConfig(t);if(!e.valid)throw console.error("❌ Ultra Card: Config validation failed",{errors:e.errors,warnings:e.warnings}),new Error(`Invalid configuration: ${e.errors.join(", ")}`);const i=he.validateUniqueModuleIds(e.correctedConfig);let o=e.correctedConfig;i.valid||(console.warn("⚠️  Ultra Card: Duplicate module IDs detected, fixing...",{duplicates:i.duplicates}),o=he.fixDuplicateModuleIds(o)),this.config=Object.assign({},o),this.requestUpdate()}static getConfigElement(){return document.createElement("ultra-card-editor")}static getStubConfig(){return{type:"custom:ultra-card",layout:{rows:[{id:"row1",columns:[{id:"col1",modules:[{type:"text",text:"Ultra Card",font_size:24,color:"#2196f3",alignment:"center"},{type:"image",image_type:"default",width:100,height:200,alignment:"center",border_radius:8,object_fit:"cover"}]}]}]}}}render(){if(!this.config||!this.hass)return q`<div>Loading...</div>`;const t=this._getCardStyle();return this.config.layout&&this.config.layout.rows&&0!==this.config.layout.rows.length?q`
      <div class="card-container" style="${t}">
        ${this.config.layout.rows.map((t=>this._renderRow(t)))}
      </div>
    `:q`
        <div class="card-container" style="${t}">
          <div class="welcome-text">
            <h2>Ultra Card</h2>
            <p>Modular card builder for Home Assistant</p>
            <p>Configure using the visual editor</p>
          </div>
        </div>
      `}_getCardStyle(){if(!this.config)return"";const t=[];return this.config.card_background&&t.push(`background: ${this.config.card_background}`),void 0!==this.config.card_border_radius&&t.push(`border-radius: ${this.config.card_border_radius}px`),void 0!==this.config.card_padding&&t.push(`padding: ${this.config.card_padding}px`),void 0!==this.config.card_margin&&t.push(`margin: ${this.config.card_margin}px`),t.join("; ")}_renderRow(t){var e,i,o,n,a,r,s;this.hass&&me.setHass(this.hass);const l=me.evaluateRowVisibility(t),d=t,c=me.evaluateLogicProperties({logic_entity:null===(e=d.design)||void 0===e?void 0:e.logic_entity,logic_attribute:null===(i=d.design)||void 0===i?void 0:i.logic_attribute,logic_operator:null===(o=d.design)||void 0===o?void 0:o.logic_operator,logic_value:null===(n=d.design)||void 0===n?void 0:n.logic_value});if(!l||!c)return q``;const p=this._getStateBasedAnimationClass(t.design),u=this._generateRowStyles(t),m=q`
      <div class="card-row" style=${u}>
        ${t.columns.map((t=>this._renderColumn(t)))}
      </div>
    `;if(p){const e=(null===(a=t.design)||void 0===a?void 0:a.animation_duration)||"2s",i=(null===(r=t.design)||void 0===r?void 0:r.animation_delay)||"0s",o=(null===(s=t.design)||void 0===s?void 0:s.animation_timing)||"ease";return q`
        <div
          class="row-animation-wrapper ${p}"
          style="
            --animation-duration: ${e};
            --animation-delay: ${i};
            --animation-timing: ${o};
          "
        >
          ${m}
        </div>
      `}return m}_renderColumn(t){var e,i,o,n,a,r,s;const l=me.evaluateColumnVisibility(t),d=t,c=me.evaluateLogicProperties({logic_entity:null===(e=d.design)||void 0===e?void 0:e.logic_entity,logic_attribute:null===(i=d.design)||void 0===i?void 0:i.logic_attribute,logic_operator:null===(o=d.design)||void 0===o?void 0:o.logic_operator,logic_value:null===(n=d.design)||void 0===n?void 0:n.logic_value});if(!l||!c)return q``;const p=this._getStateBasedAnimationClass(t.design),u=this._generateColumnStyles(t),m=q`
      <div class="card-column" style=${u}>
        ${t.modules.map((t=>this._renderModule(t)))}
      </div>
    `;if(p){const e=(null===(a=t.design)||void 0===a?void 0:a.animation_duration)||"2s",i=(null===(r=t.design)||void 0===r?void 0:r.animation_delay)||"0s",o=(null===(s=t.design)||void 0===s?void 0:s.animation_timing)||"ease";return q`
        <div
          class="column-animation-wrapper ${p}"
          style="
            --animation-duration: ${e};
            --animation-delay: ${i};
            --animation-timing: ${o};
          "
        >
          ${m}
        </div>
      `}return m}_renderModule(t){var e,i,o,n,a,r,s,l,d,c,p,u,m,g;const h=me.evaluateModuleVisibility(t),b=t,v=me.evaluateLogicProperties({logic_entity:null===(e=b.design)||void 0===e?void 0:e.logic_entity,logic_attribute:null===(i=b.design)||void 0===i?void 0:i.logic_attribute,logic_operator:null===(o=b.design)||void 0===o?void 0:o.logic_operator,logic_value:null===(n=b.design)||void 0===n?void 0:n.logic_value}),_=h&&v,f=t.id||`${t.type}-${Math.random()}`,y=this._moduleVisibilityState.get(f),x=this._animatingModules.has(f),w=b.intro_animation||(null===(a=b.design)||void 0===a?void 0:a.intro_animation)||"none",$=b.outro_animation||(null===(r=b.design)||void 0===r?void 0:r.outro_animation)||"none",k=b.animation_duration||(null===(s=b.design)||void 0===s?void 0:s.animation_duration)||"2s",S=b.animation_delay||(null===(l=b.design)||void 0===l?void 0:l.animation_delay)||"0s",C=b.animation_timing||(null===(d=b.design)||void 0===d?void 0:d.animation_timing)||"ease",z=b.animation_type||(null===(c=b.design)||void 0===c?void 0:c.animation_type),I=b.animation_entity||(null===(p=b.design)||void 0===p?void 0:p.animation_entity),T=b.animation_trigger_type||(null===(u=b.design)||void 0===u?void 0:u.animation_trigger_type)||"state",A=b.animation_attribute||(null===(m=b.design)||void 0===m?void 0:m.animation_attribute),P=b.animation_state||(null===(g=b.design)||void 0===g?void 0:g.animation_state);console.log(`🎬 Main Card Animation: Reading properties for ${t.type}`,"moduleId:",f,"stateAnimationType:",z,"stateAnimationEntity:",I,"stateAnimationState:",P,"introAnimation:",w,"outroAnimation:",$,"hasDesign:",!!b.design,"design:",b.design);let D=!1;if(z&&"none"!==z)if(I){if(P&&this.hass){const t=this.hass.states[I];if(t){if("attribute"===T&&A){const e=t.attributes[A];D=String(e)===P}else D=t.state===P;console.log("🎬 Main Card Animation: Entity state check","moduleId:",f,"stateAnimationType:",z,"stateAnimationEntity:",I,"stateAnimationState:",P,"currentState:",t.state,"shouldTriggerStateAnimation:",D)}}}else D=!0,console.log("🎬 Main Card Animation: No entity - always animate","moduleId:",f,"stateAnimationType:",z,"shouldTriggerStateAnimation:",D);let L="",M=!1;if(D&&"none"!==z?(L=`animation-${z}`,console.log("🎬 Main Card Animation: Applied state animation class","moduleId:",f,"animationClass:",L,"stateAnimationType:",z)):void 0!==y&&y!==_?_&&"none"!==w?x?L=`animation-${w}`:(L=`animation-${w}`,M=!0,this._animatingModules.add(f),setTimeout((()=>{this._animatingModules.delete(f),this.requestUpdate()}),this._parseAnimationDuration(k)+this._parseAnimationDuration(S))):_||"none"===$||(x?L=`animation-${$}`:(L=`animation-${$}`,M=!0,this._animatingModules.add(f),setTimeout((()=>{this._animatingModules.delete(f),this.requestUpdate()}),this._parseAnimationDuration(k)+this._parseAnimationDuration(S)))):x&&(_&&"none"!==w?L=`animation-${w}`:_||"none"===$||(L=`animation-${$}`)),this._moduleVisibilityState.set(f,_),!_&&!x&&!M)return q``;const O=pe().getModule(t.type);let j;return j=O&&this.hass?O.renderPreview(t,this.hass):q`
        <div class="unknown-module">
          <span>Unknown Module: ${t.type}</span>
        </div>
      `,L||"none"!==w||"none"!==$||D?q`
        <div
          class="module-animation-wrapper ${L}"
          style="
            --animation-duration: ${k};
            --animation-delay: ${S};
            --animation-timing: ${C};
          "
        >
          ${j}
        </div>
      `:j}_parseAnimationDuration(t){const e=t.match(/^(\d*\.?\d+)(s|ms)?$/);if(!e)return 300;const i=parseFloat(e[1]),o=e[2];return o?"s"===o?1e3*i:i:1e3*i}_getStateBasedAnimationClass(t){if(!t)return"";const e=t.animation_type,i=t.animation_entity,o=t.animation_trigger_type||"state",n=t.animation_attribute,a=t.animation_state;if(!e||"none"===e)return"";if(!i)return`animation-${e}`;if(!a||!this.hass)return"";const r=this.hass.states[i];if(!r)return"";let s=!1;if("attribute"===o&&n){const t=r.attributes[n];s=String(t)===a}else s=r.state===a;return s?`animation-${e}`:""}_countTotalModules(t){return t.layout&&t.layout.rows?t.layout.rows.reduce(((t,e)=>t+e.columns.reduce(((t,e)=>t+e.modules.length),0)),0):0}_getGridTemplateColumns(t,e){return{"1-col":"1fr","1-2-1-2":"1fr 1fr","1-3-2-3":"1fr 2fr","2-3-1-3":"2fr 1fr","2-5-3-5":"2fr 3fr","3-5-2-5":"3fr 2fr","1-3-1-3-1-3":"1fr 1fr 1fr","1-4-1-2-1-4":"1fr 2fr 1fr","1-5-3-5-1-5":"1fr 3fr 1fr","1-6-2-3-1-6":"1fr 4fr 1fr","1-4-1-4-1-4-1-4":"1fr 1fr 1fr 1fr","1-5-1-5-1-5-1-5":"1fr 1fr 1fr 1fr","1-6-1-6-1-6-1-6":"1fr 1fr 1fr 1fr","1-8-1-4-1-4-1-8":"1fr 2fr 2fr 1fr","1-5-1-5-1-5-1-5-1-5":"1fr 1fr 1fr 1fr 1fr","1-6-1-6-1-3-1-6-1-6":"1fr 1fr 2fr 1fr 1fr","1-8-1-4-1-4-1-4-1-8":"1fr 2fr 2fr 2fr 1fr","1-6-1-6-1-6-1-6-1-6-1-6":"1fr 1fr 1fr 1fr 1fr 1fr","50-50":"1fr 1fr","30-70":"3fr 7fr","70-30":"7fr 3fr","40-60":"4fr 6fr","60-40":"6fr 4fr","33-33-33":"1fr 1fr 1fr","25-50-25":"1fr 2fr 1fr","20-60-20":"1fr 3fr 1fr","25-25-25-25":"1fr 1fr 1fr 1fr"}[t]||`repeat(${e}, 1fr)`}_addPixelUnit(t){return t?/^\d+$/.test(t)?`${t}px`:/^[\d\s]+$/.test(t)?t.split(" ").map((t=>t.trim()?`${t}px`:t)).join(" "):t:t}_generateRowStyles(t){const e=t.design||{},i=(t=>{switch(t){case"top":return"start";case"bottom":return"end";case"middle":return"center";default:return}})(t.column_alignment),o=(t=>{switch(t){case"start":return"start";case"end":return"end";case"center":return"center";case"stretch":return"stretch";default:return}})(t.content_alignment),n={display:"grid",gridTemplateColumns:this._getGridTemplateColumns(t.column_layout||"1-col",t.columns.length),gap:`${t.gap||16}px`};void 0!==i&&(n.alignItems=i),void 0!==o&&(n.justifyItems=o);const a={padding:e.padding_top||e.padding_bottom||e.padding_left||e.padding_right?`${e.padding_top||"0"} ${e.padding_right||"0"} ${e.padding_bottom||"0"} ${e.padding_left||"0"}`:t.padding?`${t.padding}px`:void 0,margin:e.margin_top||e.margin_bottom||e.margin_left||e.margin_right?`${e.margin_top||"0"} ${e.margin_right||"0"} ${e.margin_bottom||"0"} ${e.margin_left||"0"}`:t.margin?`${t.margin}px`:void 0,background:e.background_color||t.background_color||"transparent",border:e.border_style&&"none"!==e.border_style?`${e.border_width||"1px"} ${e.border_style} ${e.border_color||"var(--divider-color)"}`:"none",borderRadius:this._addPixelUnit(e.border_radius)||(t.border_radius?`${t.border_radius}px`:"0"),position:e.position||"inherit",top:e.top||"auto",bottom:e.bottom||"auto",left:e.left||"auto",right:e.right||"auto",zIndex:e.z_index||"auto",width:e.width||"100%",height:e.height||"auto",maxWidth:e.max_width||"none",maxHeight:e.max_height||"none",minWidth:e.min_width||"none",minHeight:e.min_height||"auto",overflow:e.overflow||"visible",clipPath:e.clip_path||"none",backdropFilter:e.backdrop_filter||"none",boxShadow:e.box_shadow_h&&e.box_shadow_v?`${e.box_shadow_h||"0"} ${e.box_shadow_v||"0"} ${e.box_shadow_blur||"0"} ${e.box_shadow_spread||"0"} ${e.box_shadow_color||"rgba(0,0,0,0.1)"}`:"none",boxSizing:"border-box"},r=Object.assign(Object.assign({},n),a),s=Object.fromEntries(Object.entries(r).filter((([t,e])=>void 0!==e)));return this._styleObjectToCss(s)}_generateColumnStyles(t){const e=t.design||{},i={display:"flex",flexDirection:"column",gap:"8px"};t.horizontal_alignment&&(i.alignItems="left"===t.horizontal_alignment?"flex-start":"right"===t.horizontal_alignment?"flex-end":"stretch"===t.horizontal_alignment?"stretch":"center"),t.vertical_alignment&&(i.justifyContent="top"===t.vertical_alignment?"flex-start":"bottom"===t.vertical_alignment?"flex-end":"stretch"===t.vertical_alignment?"stretch":"center");const o={padding:e.padding_top||e.padding_bottom||e.padding_left||e.padding_right?`${e.padding_top||"0"} ${e.padding_right||"0"} ${e.padding_bottom||"0"} ${e.padding_left||"0"}`:t.padding?`${t.padding}px`:void 0,margin:e.margin_top||e.margin_bottom||e.margin_left||e.margin_right?`${e.margin_top||"0"} ${e.margin_right||"0"} ${e.margin_bottom||"0"} ${e.margin_left||"0"}`:t.margin?`${t.margin}px`:void 0,background:e.background_color||t.background_color||"transparent",border:e.border_style&&"none"!==e.border_style?`${e.border_width||"1px"} ${e.border_style} ${e.border_color||"var(--divider-color)"}`:"none",borderRadius:this._addPixelUnit(e.border_radius)||(t.border_radius?`${t.border_radius}px`:"0"),position:e.position||"inherit",top:e.top||"auto",bottom:e.bottom||"auto",left:e.left||"auto",right:e.right||"auto",zIndex:e.z_index||"auto",width:e.width||"100%",height:e.height||"auto",maxWidth:e.max_width||"none",maxHeight:e.max_height||"none",minWidth:e.min_width||"none",minHeight:e.min_height||"auto",overflow:e.overflow||"visible",clipPath:e.clip_path||"none",backdropFilter:e.backdrop_filter||"none",boxShadow:e.box_shadow_h&&e.box_shadow_v?`${e.box_shadow_h||"0"} ${e.box_shadow_v||"0"} ${e.box_shadow_blur||"0"} ${e.box_shadow_spread||"0"} ${e.box_shadow_color||"rgba(0,0,0,0.1)"}`:"none",boxSizing:"border-box"},n=Object.assign(Object.assign({},i),o),a=Object.fromEntries(Object.entries(n).filter((([t,e])=>void 0!==e)));return this._styleObjectToCss(a)}_styleObjectToCss(t){return Object.entries(t).map((([t,e])=>`${t.replace(/[A-Z]/g,(t=>`-${t.toLowerCase()}`))}: ${e}`)).join("; ")}_injectModuleStyles(){if(this._moduleStylesInjected||!this.shadowRoot)return;const t=pe().getAllModuleStyles();if(t.trim().length>0){const e=document.createElement("style");e.textContent=t,this.shadowRoot.appendChild(e),this._moduleStylesInjected=!0}}static get styles(){return l`
      :host {
        display: block;
      }

      .card-container {
        background: var(--card-background-color, var(--ha-card-background, white));
        border-radius: 8px;
        box-shadow: var(--ha-card-box-shadow, 0 2px 4px rgba(0, 0, 0, 0.1));
        padding: 16px;
        transition: all 0.3s ease;
      }

      .welcome-text {
        text-align: center;
        padding: 24px;
      }

      .welcome-text h2 {
        margin: 0 0 16px 0;
        color: var(--primary-text-color);
      }

      .welcome-text p {
        margin: 8px 0;
        color: var(--secondary-text-color);
      }

      .card-row {
        margin-bottom: 16px;
      }

      .card-row:last-child {
        margin-bottom: 0;
      }

      .card-column {
        display: flex;
        flex-direction: column;
        gap: 8px;
      }

      .unknown-module {
        padding: 16px;
        background: var(--error-color);
        color: white;
        border-radius: 4px;
        text-align: center;
        font-size: 14px;
      }

      /* Animation Wrappers */
      .module-animation-wrapper,
      .row-animation-wrapper,
      .column-animation-wrapper {
        animation-duration: var(--animation-duration, 2s);
        animation-delay: var(--animation-delay, 0s);
        animation-timing-function: var(--animation-timing, ease);
        animation-fill-mode: both;
        /* Inherit width from content */
        display: inherit;
        width: inherit;
        height: inherit;
        flex: inherit;
      }

      /* Intro Animations */
      .animation-fadeIn {
        animation-name: fadeIn;
      }

      .animation-slideInUp {
        animation-name: slideInUp;
      }

      .animation-slideInDown {
        animation-name: slideInDown;
      }

      .animation-slideInLeft {
        animation-name: slideInLeft;
      }

      .animation-slideInRight {
        animation-name: slideInRight;
      }

      .animation-zoomIn {
        animation-name: zoomIn;
      }

      .animation-bounceIn {
        animation-name: bounceIn;
      }

      .animation-flipInX {
        animation-name: flipInX;
      }

      .animation-flipInY {
        animation-name: flipInY;
      }

      .animation-rotateIn {
        animation-name: rotateIn;
      }

      /* Outro Animations */
      .animation-fadeOut {
        animation-name: fadeOut;
      }

      .animation-slideOutUp {
        animation-name: slideOutUp;
      }

      .animation-slideOutDown {
        animation-name: slideOutDown;
      }

      .animation-slideOutLeft {
        animation-name: slideOutLeft;
      }

      .animation-slideOutRight {
        animation-name: slideOutRight;
      }

      .animation-zoomOut {
        animation-name: zoomOut;
      }

      .animation-bounceOut {
        animation-name: bounceOut;
      }

      .animation-flipOutX {
        animation-name: flipOutX;
      }

      .animation-flipOutY {
        animation-name: flipOutY;
      }

      .animation-rotateOut {
        animation-name: rotateOut;
      }

      /* State-based Animations */
      .animation-pulse {
        animation-name: pulse;
        animation-iteration-count: infinite;
      }

      .animation-vibrate {
        animation-name: vibrate;
        animation-iteration-count: infinite;
      }

      .animation-rotate-left {
        animation-name: rotateLeft;
        animation-iteration-count: infinite;
      }

      .animation-rotate-right {
        animation-name: rotateRight;
        animation-iteration-count: infinite;
      }

      .animation-hover {
        animation-name: hover;
        animation-iteration-count: infinite;
      }

      .animation-fade {
        animation-name: fadeInOut;
        animation-iteration-count: infinite;
      }

      .animation-scale {
        animation-name: scale;
        animation-iteration-count: infinite;
      }

      .animation-bounce {
        animation-name: bounce;
        animation-iteration-count: infinite;
      }

      .animation-shake {
        animation-name: shake;
        animation-iteration-count: infinite;
      }

      .animation-tada {
        animation-name: tada;
        animation-iteration-count: infinite;
      }

      /* Animation Keyframes */
      @keyframes fadeIn {
        from {
          opacity: 0;
        }
        to {
          opacity: 1;
        }
      }

      @keyframes fadeOut {
        from {
          opacity: 1;
        }
        to {
          opacity: 0;
        }
      }

      @keyframes slideInUp {
        from {
          transform: translateY(100%);
          opacity: 0;
        }
        to {
          transform: translateY(0);
          opacity: 1;
        }
      }

      @keyframes slideInDown {
        from {
          transform: translateY(-100%);
          opacity: 0;
        }
        to {
          transform: translateY(0);
          opacity: 1;
        }
      }

      @keyframes slideInLeft {
        from {
          transform: translateX(-100%);
          opacity: 0;
        }
        to {
          transform: translateX(0);
          opacity: 1;
        }
      }

      @keyframes slideInRight {
        from {
          transform: translateX(100%);
          opacity: 0;
        }
        to {
          transform: translateX(0);
          opacity: 1;
        }
      }

      @keyframes zoomIn {
        from {
          transform: scale(0);
          opacity: 0;
        }
        to {
          transform: scale(1);
          opacity: 1;
        }
      }

      @keyframes bounceIn {
        0% {
          transform: scale(0.3);
          opacity: 0;
        }
        50% {
          transform: scale(1.05);
        }
        70% {
          transform: scale(0.9);
        }
        100% {
          transform: scale(1);
          opacity: 1;
        }
      }

      @keyframes flipInX {
        from {
          transform: perspective(400px) rotateX(90deg);
          opacity: 0;
        }
        to {
          transform: perspective(400px) rotateX(0deg);
          opacity: 1;
        }
      }

      @keyframes flipInY {
        from {
          transform: perspective(400px) rotateY(90deg);
          opacity: 0;
        }
        to {
          transform: perspective(400px) rotateY(0deg);
          opacity: 1;
        }
      }

      @keyframes rotateIn {
        from {
          transform: rotate(-200deg);
          opacity: 0;
        }
        to {
          transform: rotate(0deg);
          opacity: 1;
        }
      }

      @keyframes slideOutUp {
        from {
          transform: translateY(0);
          opacity: 1;
        }
        to {
          transform: translateY(-100%);
          opacity: 0;
        }
      }

      @keyframes slideOutDown {
        from {
          transform: translateY(0);
          opacity: 1;
        }
        to {
          transform: translateY(100%);
          opacity: 0;
        }
      }

      @keyframes slideOutLeft {
        from {
          transform: translateX(0);
          opacity: 1;
        }
        to {
          transform: translateX(-100%);
          opacity: 0;
        }
      }

      @keyframes slideOutRight {
        from {
          transform: translateX(0);
          opacity: 1;
        }
        to {
          transform: translateX(100%);
          opacity: 0;
        }
      }

      @keyframes zoomOut {
        from {
          transform: scale(1);
          opacity: 1;
        }
        to {
          transform: scale(0);
          opacity: 0;
        }
      }

      @keyframes bounceOut {
        0% {
          transform: scale(1);
          opacity: 1;
        }
        25% {
          transform: scale(0.95);
        }
        50% {
          transform: scale(1.1);
        }
        100% {
          transform: scale(0);
          opacity: 0;
        }
      }

      @keyframes flipOutX {
        from {
          transform: perspective(400px) rotateX(0deg);
          opacity: 1;
        }
        to {
          transform: perspective(400px) rotateX(90deg);
          opacity: 0;
        }
      }

      @keyframes flipOutY {
        from {
          transform: perspective(400px) rotateY(0deg);
          opacity: 1;
        }
        to {
          transform: perspective(400px) rotateY(90deg);
          opacity: 0;
        }
      }

      @keyframes rotateOut {
        from {
          transform: rotate(0deg);
          opacity: 1;
        }
        to {
          transform: rotate(200deg);
          opacity: 0;
        }
      }

      /* State-based Animation Keyframes */
      @keyframes pulse {
        0%,
        100% {
          transform: scale(1);
        }
        50% {
          transform: scale(1.05);
        }
      }

      @keyframes vibrate {
        0%,
        100% {
          transform: translateX(0);
        }
        10%,
        30%,
        50%,
        70%,
        90% {
          transform: translateX(-2px);
        }
        20%,
        40%,
        60%,
        80% {
          transform: translateX(2px);
        }
      }

      @keyframes rotateLeft {
        from {
          transform: rotate(0deg);
        }
        to {
          transform: rotate(-360deg);
        }
      }

      @keyframes rotateRight {
        from {
          transform: rotate(0deg);
        }
        to {
          transform: rotate(360deg);
        }
      }

      @keyframes hover {
        0%,
        100% {
          transform: translateY(0);
        }
        50% {
          transform: translateY(-10px);
        }
      }

      @keyframes fadeInOut {
        0%,
        100% {
          opacity: 1;
        }
        50% {
          opacity: 0.5;
        }
      }

      @keyframes scale {
        0%,
        100% {
          transform: scale(1);
        }
        50% {
          transform: scale(1.1);
        }
      }

      @keyframes bounce {
        0%,
        20%,
        53%,
        80%,
        100% {
          transform: translateY(0);
        }
        40%,
        43% {
          transform: translateY(-15px);
        }
        70% {
          transform: translateY(-7px);
        }
        90% {
          transform: translateY(-3px);
        }
      }

      @keyframes shake {
        0%,
        100% {
          transform: translateX(0);
        }
        10%,
        30%,
        50%,
        70%,
        90% {
          transform: translateX(-5px);
        }
        20%,
        40%,
        60%,
        80% {
          transform: translateX(5px);
        }
      }

      @keyframes tada {
        0% {
          transform: scale(1);
        }
        10%,
        20% {
          transform: scale(0.9) rotate(-3deg);
        }
        30%,
        50%,
        70%,
        90% {
          transform: scale(1.1) rotate(3deg);
        }
        40%,
        60%,
        80% {
          transform: scale(1.1) rotate(-3deg);
        }
        100% {
          transform: scale(1) rotate(0);
        }
      }

      @keyframes slideOutUp {
        from {
          transform: translateY(0);
          opacity: 1;
        }
        to {
          transform: translateY(-100%);
          opacity: 0;
        }
      }

      @keyframes slideInDown {
        from {
          transform: translateY(-100%);
          opacity: 0;
        }
        to {
          transform: translateY(0);
          opacity: 1;
        }
      }

      @keyframes slideOutDown {
        from {
          transform: translateY(0);
          opacity: 1;
        }
        to {
          transform: translateY(100%);
          opacity: 0;
        }
      }

      @keyframes slideInLeft {
        from {
          transform: translateX(-100%);
          opacity: 0;
        }
        to {
          transform: translateX(0);
          opacity: 1;
        }
      }

      @keyframes slideOutLeft {
        from {
          transform: translateX(0);
          opacity: 1;
        }
        to {
          transform: translateX(-100%);
          opacity: 0;
        }
      }

      @keyframes slideInRight {
        from {
          transform: translateX(100%);
          opacity: 0;
        }
        to {
          transform: translateX(0);
          opacity: 1;
        }
      }

      @keyframes slideOutRight {
        from {
          transform: translateX(0);
          opacity: 1;
        }
        to {
          transform: translateX(100%);
          opacity: 0;
        }
      }

      @keyframes zoomIn {
        from {
          transform: scale(0.3);
          opacity: 0;
        }
        to {
          transform: scale(1);
          opacity: 1;
        }
      }

      @keyframes zoomOut {
        from {
          transform: scale(1);
          opacity: 1;
        }
        to {
          transform: scale(0.3);
          opacity: 0;
        }
      }

      @keyframes bounceIn {
        0% {
          transform: scale(0.3);
          opacity: 0;
        }
        50% {
          transform: scale(1.05);
        }
        70% {
          transform: scale(0.9);
        }
        100% {
          transform: scale(1);
          opacity: 1;
        }
      }

      @keyframes bounceOut {
        20% {
          transform: scale(0.9);
        }
        50%,
        55% {
          transform: scale(1.05);
          opacity: 1;
        }
        100% {
          transform: scale(0.3);
          opacity: 0;
        }
      }

      @keyframes flipInX {
        from {
          transform: perspective(400px) rotateX(90deg);
          opacity: 0;
        }
        40% {
          transform: perspective(400px) rotateX(-20deg);
        }
        60% {
          transform: perspective(400px) rotateX(10deg);
        }
        80% {
          transform: perspective(400px) rotateX(-5deg);
        }
        to {
          transform: perspective(400px) rotateX(0deg);
          opacity: 1;
        }
      }

      @keyframes flipOutX {
        from {
          transform: perspective(400px) rotateX(0deg);
          opacity: 1;
        }
        to {
          transform: perspective(400px) rotateX(90deg);
          opacity: 0;
        }
      }

      @keyframes flipInY {
        from {
          transform: perspective(400px) rotateY(90deg);
          opacity: 0;
        }
        40% {
          transform: perspective(400px) rotateY(-20deg);
        }
        60% {
          transform: perspective(400px) rotateY(10deg);
        }
        80% {
          transform: perspective(400px) rotateY(-5deg);
        }
        to {
          transform: perspective(400px) rotateY(0deg);
          opacity: 1;
        }
      }

      @keyframes flipOutY {
        from {
          transform: perspective(400px) rotateY(0deg);
          opacity: 1;
        }
        to {
          transform: perspective(400px) rotateY(90deg);
          opacity: 0;
        }
      }

      @keyframes rotateIn {
        from {
          transform: rotate(-200deg);
          opacity: 0;
        }
        to {
          transform: rotate(0);
          opacity: 1;
        }
      }

      @keyframes rotateOut {
        from {
          transform: rotate(0);
          opacity: 1;
        }
        to {
          transform: rotate(200deg);
          opacity: 0;
        }
      }
    `}};Ae([vt({attribute:!1})],Pe.prototype,"hass",void 0),Ae([vt({attribute:!1,type:Object})],Pe.prototype,"config",void 0),Ae([_t()],Pe.prototype,"_moduleVisibilityState",void 0),Ae([_t()],Pe.prototype,"_animatingModules",void 0),Pe=Ae([gt("ultra-card")],Pe),setTimeout((()=>{if(!customElements.get("ultra-card"))try{customElements.define("ultra-card",Pe)}catch(t){}}),0);var De=function(t,e,i,o){var n,a=arguments.length,r=a<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,i):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(t,e,i,o);else for(var s=t.length-1;s>=0;s--)(n=t[s])&&(r=(a<3?n(r):a>3?n(e,i,r):n(e,i))||r);return a>3&&r&&Object.defineProperty(e,i,r),r};let Le=class extends ut{constructor(){super(...arguments),this.value="",this.label="Navigation Target",this.disabled=!1}_valueChanged(t){const e=t.detail.value;this.dispatchEvent(new CustomEvent("value-changed",{detail:{value:e},bubbles:!0,composed:!0}))}render(){return q`
      <div class="navigation-picker">
        ${this.label?q`<label class="label">${this.label}</label>`:""}
        ${this.helper?q`<div class="helper">${this.helper}</div>`:""}

        <ha-selector
          .hass=${this.hass}
          .selector=${{navigation:{}}}
          .value=${this.value}
          .disabled=${this.disabled}
          @value-changed=${this._valueChanged}
        ></ha-selector>
      </div>
    `}};Le.styles=l`
    :host {
      display: block;
    }

    .navigation-picker {
      width: 100%;
    }

    .label {
      display: block;
      font-weight: 500;
      color: var(--primary-text-color);
      margin-bottom: 8px;
    }

    .helper {
      font-size: 12px;
      color: var(--secondary-text-color);
      margin-bottom: 8px;
    }

    ha-selector {
      width: 100%;
      display: block;
    }
  `,De([vt({attribute:!1})],Le.prototype,"hass",void 0),De([vt()],Le.prototype,"value",void 0),De([vt()],Le.prototype,"label",void 0),De([vt()],Le.prototype,"helper",void 0),De([vt({type:Boolean})],Le.prototype,"disabled",void 0),Le=De([gt("ultra-navigation-picker")],Le);const Me="1.0.0-beta3",Oe=pe();console.log(`🚀 Ultra Card v${Me} loaded with ${Oe.getRegistryStats().totalModules} modules`),window.customCards=window.customCards||[],window.customCards.push({type:"ultra-card",name:"Ultra Card",description:"A modular card system for Home Assistant with dynamic layouts and powerful customization options.",preview:!0,documentationURL:"https://github.com/WJDDesigns/Ultra-Card",version:Me})})();