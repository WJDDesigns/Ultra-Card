import { TemplateResult } from 'lit';
import { HomeAssistant } from 'custom-card-helpers';
import { BaseUltraModule, ModuleMetadata } from './base-module';
import { CardModule, CameraModule, UltraCardConfig } from '../types';
export declare class UltraCameraModule extends BaseUltraModule {
    metadata: ModuleMetadata;
    private clickTimeout;
    private holdTimeout;
    private isHolding;
    createDefault(id?: string, hass?: HomeAssistant): CameraModule;
    renderGeneralTab(module: CardModule, hass: HomeAssistant, config: any, updateModule: (updates: Partial<CardModule>) => void): TemplateResult;
    renderActionsTab(module: CardModule, hass: HomeAssistant, config: UltraCardConfig, updateModule: (updates: Partial<CardModule>) => void): TemplateResult;
    renderPreview(module: CardModule, hass: HomeAssistant): TemplateResult;
    renderLogicTab(module: CardModule, hass: HomeAssistant, config: UltraCardConfig, updateModule: (updates: Partial<CardModule>) => void): TemplateResult;
    validate(module: CardModule): {
        valid: boolean;
        errors: string[];
    };
    private handleClick;
    private handleDoubleClick;
    private handleMouseDown;
    private handleMouseUp;
    private handleMouseLeave;
    private handleTouchStart;
    private handleTouchEnd;
    private handleTapAction;
    private handleHoldAction;
    private handleDoubleAction;
    private _handleDimensionChange;
    private getCameraNamePositionStyles;
    private hasActiveLink;
    private refreshCamera;
    private getCameraImageUrl;
    private getCameraImageBlob;
    private getCameraImageViaWebSocket;
    private handleImageError;
    protected renderConditionalFieldsGroup(title: string, content: TemplateResult): TemplateResult;
    private getTextColor;
    private getTextSize;
    private getSmallTextSize;
    private getTextWeight;
    private getTextFont;
    private styleObjectToCss;
    private camelToKebab;
    private addPixelUnit;
    private getPaddingWithDesign;
    private getMarginWithDesign;
    private getBorderWithDesign;
    private getBackgroundImageWithDesign;
    private getPaddingCSS;
    private getMarginCSS;
    private getBackgroundCSS;
    private getBackgroundImageCSS;
    private getBorderCSS;
    private validateAction;
    getStyles(): string;
}
