import { LitElement, TemplateResult } from 'lit';
import { HomeAssistant } from 'custom-card-helpers';
import { UltraCardConfig } from '../../types';
import '../../components/ultra-color-picker';
import '../global-design-tab';
import '../../components/uc-favorite-dialog';
import '../../components/uc-import-dialog';
export declare class LayoutTab extends LitElement {
    hass: HomeAssistant;
    config: UltraCardConfig;
    cloudUser?: any | null;
    private _showModuleSelector;
    private _selectedRowIndex;
    private _selectedColumnIndex;
    private _showModuleSettings;
    private _selectedModule;
    private _activeModuleTab;
    private _activeDesignSubtab;
    private _showRowSettings;
    private _selectedRowForSettings;
    private _activeRowTab;
    private _showColumnSettings;
    private _selectedColumnForSettings;
    private _activeColumnTab;
    private _showColumnLayoutSelector;
    private _selectedRowForLayout;
    private _collapsedPreviewModules;
    private _isRowColumnPreviewCollapsed;
    private _collapsedConditionIds;
    private _isPreviewPinned;
    private _draggingCondition;
    private _activeModuleSelectorTab;
    private _activeModuleCategoryTab;
    private _selectedPresetCategory;
    private _showFavoriteDialog;
    private _favoriteRowToSave;
    private _showImportDialog;
    private _openMoreMenuRowIndex;
    private _undoStack;
    private _redoStack;
    private _maxHistorySize;
    private _isUndoRedoAction;
    /** Listen for template updates from modules to refresh live previews */
    private _templateUpdateListener?;
    private _documentClickListener?;
    private _keydownListener?;
    private _templateUpdateTimer?;
    private _lastTemplateUpdate;
    connectedCallback(): void;
    /** Determine if current device/viewport should be treated as mobile */
    private _isMobileDevice;
    private _handleWindowResize;
    private _repositionPopup;
    private _initializePopupPosition;
    private _togglePreviewCollapsed;
    private _getSelectedModuleKey;
    private _isCurrentModulePreviewCollapsed;
    private _toggleRowColumnPreviewCollapsed;
    private _toggleConditionExpanded;
    private _reorderArray;
    private _onConditionDragStart;
    private _onConditionDragOver;
    private _onConditionDrop;
    private _resolvePreviewBackgroundImageCSS;
    private _draggedItem;
    private _dropTarget;
    private _selectedLayoutModuleIndex;
    private _selectedNestedChildIndex;
    private _showLayoutChildSettings;
    private _selectedLayoutChild;
    private _popupDragState;
    private _popupResizeState;
    private _windowResizeListener;
    private _resizeTimeout;
    disconnectedCallback(): void;
    /**
     * Perform template update with single requestUpdate() call
     * This prevents animation loops caused by redundant re-renders
     */
    private _performTemplateUpdate;
    private _startPopupDrag;
    private _handlePopupDrag;
    private _endPopupDrag;
    private _startPopupResize;
    private _handlePopupResize;
    private _endPopupResize;
    private _createColumnIconHTML;
    private _createSimpleIcon;
    private readonly COLUMN_LAYOUTS;
    private _getLayoutsForColumnCount;
    private _migrateLegacyLayoutId;
    private _ensureLayout;
    private _updateConfig;
    private _updateLayout;
    private _saveStateToUndoStack;
    private _canUndo;
    private _canRedo;
    private _undo;
    private _redo;
    private _addRow;
    private _deleteRow;
    private _duplicateRow;
    private _addColumn;
    private _addColumnAfter;
    private _duplicateColumn;
    private _deleteColumn;
    private _openColumnLayoutSelector;
    private _changeColumnLayout;
    private _getCurrentLayoutDisplay;
    private _openModuleSelector;
    private _addModule;
    private _addPageBreakToSlider;
    private _addPageBreakToColumnSlider;
    private _addPreset;
    private _addFavorite;
    private _saveRowAsFavorite;
    private _exportRow;
    private _pasteRowFromClipboard;
    private _exportFavorite;
    private _deleteFavorite;
    private _cloneRowWithNewIds;
    private _toggleMoreMenu;
    private _showToast;
    private _duplicateModule;
    private _deleteModule;
    private _openModuleSettings;
    private _updateModule;
    private _updateLayoutChildModule;
    private _updateModuleDesign;
    private _closeModuleSettings;
    private _closeLayoutChildSettings;
    private _onDragStart;
    private _onDragEnd;
    private _onDragOver;
    private _onDragEnter;
    private _onDragLeave;
    private _onDrop;
    private _isValidDropTarget;
    private _performMove;
    private _moveModule;
    private _moveColumn;
    private _moveRow;
    private _moveNestedChild;
    private _openRowSettings;
    private _updateRow;
    private _openColumnSettings;
    private _updateColumn;
    private _loadGoogleFont;
    private _renderModulePreview;
    private _togglePreviewPin;
    private _renderSingleModule;
    private _renderSimplifiedModule;
    private _renderLayoutModuleAsColumn;
    private _getJustifyContent;
    private _renderLayoutChildModule;
    private _renderNestedLayoutModule;
    private _renderNestedChildModule;
    private _onLayoutModuleDragOver;
    private _onLayoutModuleDragEnter;
    private _onLayoutModuleDragLeave;
    private _onLayoutModuleDrop;
    private _onLayoutChildDragStart;
    private _onLayoutChildDragEnd;
    private _onNestedChildDragStart;
    private _onNestedChildDragEnd;
    private _onNestedChildDragOver;
    private _onNestedChildDragEnter;
    private _onNestedChildDragLeave;
    private _onNestedChildDrop;
    private _onLayoutChildDragEnter;
    private _onLayoutChildDrop;
    private _onLayoutAppendDragEnter;
    private _onLayoutAppendDrop;
    private _openLayoutModuleSelector;
    private _openNestedLayoutModuleSelector;
    private _openLayoutChildSettings;
    private _duplicateLayoutChildModule;
    private _duplicateNestedChildModule;
    private _deleteNestedChildModule;
    private _openNestedChildSettings;
    private _regenerateModuleIds;
    private _deleteLayoutChildModule;
    private _getModuleDisplayName;
    private _generateModuleInfo;
    private _renderSingleModuleWithAnimation;
    private _getRowPreviewAnimationData;
    private _getColumnPreviewAnimationData;
    private _renderRowPreview;
    private _renderColumnPreview;
    private _renderModuleSettings;
    private _renderLayoutChildSettings;
    private _renderLayoutChildGeneralTab;
    private _renderLayoutChildActionsTab;
    private _renderLayoutChildOtherTab;
    private _renderModuleLogicTab;
    private _renderLayoutChildLogicTab;
    private _renderLayoutChildDesignTab;
    private _renderRowSettings;
    private _renderColumnSettings;
    private _renderRowGeneralTab;
    private _renderRowActionsTab;
    private _renderRowLogicTab;
    private _renderRowDesignTab;
    private _renderColumnGeneralTab;
    private _renderColumnActionsTab;
    private _renderColumnLogicTab;
    private _renderColumnDesignTab;
    private _renderGeneralTab;
    private _renderActionsTab;
    private _renderOtherTab;
    private _addCondition;
    private _addRowCondition;
    private _addColumnCondition;
    private _removeCondition;
    private _updateCondition;
    private _duplicateCondition;
    private _renderRowCondition;
    private _renderColumnCondition;
    private _renderConditionGeneric;
    private _renderEntityConditionGeneric;
    private _renderEntityAttributeConditionGeneric;
    private _renderCondition;
    private _renderEntityCondition;
    private _renderEntityAttributeCondition;
    private _renderTimeCondition;
    private _renderTemplateCondition;
    private _renderLogicTab;
    private _renderDesignTab;
    private _renderTextDesignTab;
    private _renderBackgroundDesignTab;
    private _renderSpacingDesignTab;
    protected firstUpdated(changedProperties: Map<string, any>): void;
    protected updated(changedProperties: Map<string, any>): void;
    private _renderBorderDesignTab;
    protected render(): TemplateResult;
    private _renderModuleSelector;
    private _formatCategoryTitle;
    private _renderModulesTab;
    /**
     * Render PRO upgrade prompt for non-Pro users
     */
    private _renderProUpgradePrompt;
    /**
     * Handle upgrade button click - navigate to PRO tab
     */
    private _handleUpgradeClick;
    private _renderPresetImages;
    private _navigateSlider;
    private _goToSlide;
    private _handleSliderMouseDown;
    private _handleSliderTouchStart;
    private _renderPresetsTab;
    private _renderFavoritesTab;
    private _renderFavoriteDialog;
    private _renderImportDialog;
    private _handleImport;
    private _isLayoutModule;
    private _shouldAutoOpenSettings;
    private _getLayoutModuleColor;
    private _renderColumnLayoutSelector;
    static get styles(): import("lit").CSSResult;
    private _handleBackgroundImageUpload;
    private _truncatePath;
    private _getBackgroundSizeDropdownValue;
    private _getCustomSizeValue;
    /**
     * Collect all hover effect configurations from the current card config
     */
    private _collectHoverEffectConfigs;
    /**
     * Update hover effect styles based on current configuration
     */
    private _updateHoverEffectStyles;
}
