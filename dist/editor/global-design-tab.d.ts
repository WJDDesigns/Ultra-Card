import { LitElement, TemplateResult } from 'lit';
import { HomeAssistant } from 'custom-card-helpers';
import '../components/ultra-color-picker';
export interface DesignProperties {
    color?: string;
    text_align?: 'left' | 'center' | 'right' | 'justify';
    font_size?: string;
    line_height?: string;
    letter_spacing?: string;
    font_family?: string;
    font_weight?: string;
    text_transform?: 'none' | 'uppercase' | 'lowercase' | 'capitalize';
    font_style?: 'normal' | 'italic' | 'oblique';
    background_color?: string;
    background_image?: string;
    background_image_type?: 'none' | 'upload' | 'entity' | 'url';
    background_image_entity?: string;
    background_repeat?: 'repeat' | 'repeat-x' | 'repeat-y' | 'no-repeat';
    background_position?: 'left top' | 'left center' | 'left bottom' | 'center top' | 'center center' | 'center bottom' | 'right top' | 'right center' | 'right bottom';
    background_size?: 'cover' | 'contain' | 'auto' | string;
    backdrop_filter?: string;
    background_filter?: string;
    width?: string;
    height?: string;
    max_width?: string;
    max_height?: string;
    min_width?: string;
    min_height?: string;
    margin_top?: string;
    margin_bottom?: string;
    margin_left?: string;
    margin_right?: string;
    padding_top?: string;
    padding_bottom?: string;
    padding_left?: string;
    padding_right?: string;
    border_radius?: string;
    border_style?: 'none' | 'solid' | 'dashed' | 'dotted' | 'double';
    border_width?: string;
    border_color?: string;
    position?: 'static' | 'relative' | 'absolute' | 'fixed' | 'sticky';
    top?: string;
    bottom?: string;
    left?: string;
    right?: string;
    z_index?: string;
    text_shadow_h?: string;
    text_shadow_v?: string;
    text_shadow_blur?: string;
    text_shadow_color?: string;
    box_shadow_h?: string;
    box_shadow_v?: string;
    box_shadow_blur?: string;
    box_shadow_spread?: string;
    box_shadow_color?: string;
    overflow?: 'visible' | 'hidden' | 'scroll' | 'auto';
    clip_path?: string;
    animation_type?: 'none' | 'pulse' | 'vibrate' | 'rotate-left' | 'rotate-right' | 'hover' | 'fade' | 'scale' | 'bounce' | 'shake' | 'tada';
    animation_entity?: string;
    animation_trigger_type?: 'state' | 'attribute';
    animation_attribute?: string;
    animation_state?: string;
    intro_animation?: 'none' | 'fadeIn' | 'slideInUp' | 'slideInDown' | 'slideInLeft' | 'slideInRight' | 'zoomIn' | 'bounceIn' | 'flipInX' | 'flipInY' | 'rotateIn';
    outro_animation?: 'none' | 'fadeOut' | 'slideOutUp' | 'slideOutDown' | 'slideOutLeft' | 'slideOutRight' | 'zoomOut' | 'bounceOut' | 'flipOutX' | 'flipOutY' | 'rotateOut';
    animation_duration?: string;
    animation_delay?: string;
    animation_timing?: 'ease' | 'linear' | 'ease-in' | 'ease-out' | 'ease-in-out' | 'cubic-bezier(0.25,0.1,0.25,1)';
}
export declare class GlobalDesignTab extends LitElement {
    hass: HomeAssistant;
    designProperties: DesignProperties;
    onUpdate?: (properties: Partial<DesignProperties>) => void;
    private _expandedSections;
    private _marginLocked;
    private _paddingLocked;
    private _clipboardProperties;
    private static readonly CLIPBOARD_KEY;
    private static _lastAnimationTriggerType;
    connectedCallback(): void;
    disconnectedCallback(): void;
    private _storageEventListener?;
    private _handleStorageEvent;
    private _loadClipboardFromStorage;
    private _saveClipboardToStorage;
    private _clearClipboardFromStorage;
    private _toggleSection;
    private _updateProperty;
    private _updateSpacing;
    private _createRobustInputHandler;
    private _createProtectedKeydownHandler;
    private _handleNumericKeydown;
    private _toggleSpacingLock;
    private _resetSection;
    private _copyDesign;
    private _pasteDesign;
    private _resetAllDesign;
    private _clearClipboard;
    private _handleBackgroundImageUpload;
    private _truncatePath;
    private _getStateValueHint;
    private _getAttributeNameHint;
    private _getAttributeValueHint;
    private _hasModifiedProperties;
    private _renderAccordion;
    protected render(): TemplateResult;
    static get styles(): import("lit").CSSResult;
    private _getBackgroundSizeDropdownValue;
    private _getCustomSizeValue;
}
