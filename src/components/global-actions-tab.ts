import { TemplateResult, html } from 'lit';
import { cache } from 'lit/directives/cache.js';
import { HomeAssistant } from 'custom-card-helpers';
import { CardModule, UltraCardConfig } from '../types';
import { localize } from '../localize/localize';

export interface GlobalActionsConfig {
  tap_action?: ActionConfig;
  hold_action?: ActionConfig;
  double_tap_action?: ActionConfig;
}

export interface ActionConfig {
  action:
    | 'default'
    | 'more-info'
    | 'toggle'
    | 'navigate'
    | 'url'
    | 'perform-action'
    | 'assist'
    | 'nothing';
  entity?: string;
  navigation_path?: string;
  url_path?: string;
  // Modern perform-action property (preferred)
  perform_action?: string;
  // Legacy service property (for backward compatibility)
  service?: string;
  target?: Record<string, any> | string;
  service_data?: Record<string, any>;
  data?: Record<string, any>; // Modern data property for perform-action
  [key: string]: any; // Allow additional properties for HA action config
}

export class GlobalActionsTab {
  static render(
    module: CardModule,
    hass: HomeAssistant,
    config: UltraCardConfig,
    updateModule: (updates: Partial<CardModule>) => void
  ): TemplateResult {
    // Get the current actions from the module

    // Ensure the module has action properties - if missing, add them via updateModule
    if (
      !('tap_action' in module) ||
      !('hold_action' in module) ||
      !('double_tap_action' in module)
    ) {
      const updates: any = {};
      if (!('tap_action' in module)) {
        updates.tap_action = { action: 'default' };
      }
      if (!('hold_action' in module)) {
        updates.hold_action = { action: 'default' };
      }
      if (!('double_tap_action' in module)) {
        updates.double_tap_action = { action: 'default' };
      }
      if (Object.keys(updates).length > 0) {
        updateModule(updates);
      }
    }

    const currentActions: GlobalActionsConfig = {
      tap_action: (module as any).tap_action || { action: 'default' },
      hold_action: (module as any).hold_action || { action: 'default' },
      double_tap_action: (module as any).double_tap_action || { action: 'default' },
    };

    const lang = hass?.locale?.language || 'en';
    return html`
      <div class="global-actions-tab">
        <style>
          .global-actions-tab {
            padding: 0px;
          }

          .actions-section {
            background: var(--secondary-background-color);
            border: 2px solid var(--primary-color);
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
          }

          .section-header {
            margin-bottom: 16px;
            padding-bottom: 12px;
            border-bottom: 1px solid rgba(var(--rgb-primary-color), 0.2);
          }

          .section-header h4 {
            margin: 0;
            color: var(--primary-text-color);
            font-size: 16px;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 8px;
          }

          .section-header p {
            margin: 6px 0 0 0;
            color: var(--secondary-text-color);
            font-size: 13px;
            line-height: 1.4;
          }

          .action-form {
            margin-bottom: 20px;
          }

          .action-description {
            color: var(--secondary-text-color);
            font-size: 13px;
            margin-bottom: 16px;
            line-height: 1.4;
            font-style: italic;
          }

          /* Allow native HA form styling to show through */
          .global-actions-tab ha-form {
            display: block;
            margin: 0;
            padding: 0;
          }

          /* Style native expansion panels if they appear */
          .global-actions-tab ha-expansion-panel {
            margin-bottom: 8px;
          }

          /* Style the action selectors */
          ha-form .mdc-text-field,
          ha-form .mdc-select,
          ha-form ha-selector {
            margin-top: 0 !important;
          }

          ha-form .mdc-text-field--outlined .mdc-notched-outline {
            border-radius: 6px;
          }

          /* Hide any blank list items generated by selector internals */
          .global-actions-tab ha-select ha-list-item:not([value]),
          .global-actions-tab ha-select ha-list-item[value=''],
          .global-actions-tab ha-select ha-list-item[aria-label=''],
          .global-actions-tab ha-select .mdc-deprecated-list-item:not([data-value]),
          .global-actions-tab ha-select .mdc-deprecated-list-item[data-value=''],
          .global-actions-tab ha-select .mdc-list-item:not([data-value]),
          .global-actions-tab ha-select .mdc-list-item[data-value=''] {
            display: none !important;
          }

          /* Hide unwanted action options */
          .global-actions-tab ha-form mwc-list-item[value='toggle'],
          .global-actions-tab
            ha-form
            mwc-list-item[graphic='icon']:has(ha-icon[icon='mdi:gesture-tap']),
          .global-actions-tab ha-form .mdc-deprecated-list-item[data-value='toggle'],
          .global-actions-tab ha-form .mdc-list-item[data-value='toggle'],
          .global-actions-tab ha-form option[value='toggle'] {
            display: none !important;
          }

          /* Hide "Default ()" option - target by text content */
          .global-actions-tab ha-form mwc-list-item:has-text('Default ()'),
          .global-actions-tab ha-form .mdc-deprecated-list-item:has-text('Default ()'),
          .global-actions-tab ha-form .mdc-list-item:has-text('Default ()'),
          .global-actions-tab ha-form option:has-text('Default ()') {
            display: none !important;
          }

          /* Alternative approach using CSS attribute selectors for text content */
          .global-actions-tab ha-form mwc-list-item[textContent*='Default ()'],
          .global-actions-tab ha-form .mdc-deprecated-list-item[textContent*='Default ()'],
          .global-actions-tab ha-form .mdc-list-item[textContent*='Default ()'] {
            display: none !important;
          }

          /* Style the ha-select dropdown */
          ha-select {
            width: 100%;
            display: block;
            --mdc-theme-surface: var(--card-background-color);
            --mdc-theme-primary: var(--primary-color);
            --mdc-select-fill-color: var(--input-fill-color, transparent);
            --mdc-select-outlined-idle-border-color: var(--input-idle-line-color);
            --mdc-select-outlined-hover-border-color: var(--input-hover-line-color);
            --mdc-select-dropdown-icon-color: var(--secondary-text-color);
            --mdc-select-label-ink-color: var(--secondary-text-color);
            --mdc-select-ink-color: var(--primary-text-color);
          }
          /* Ensure consistent spacing */
        </style>

        <div class="actions-section">
          <div class="section-header">
            <h4>
              <ha-icon icon="mdi:gesture-tap"></ha-icon>
              ${localize('editor.actions.title', lang, 'Actions Configuration')}
            </h4>
            <p>
              ${localize(
                'editor.actions.description',
                lang,
                "Configure how this module responds to user interactions. Uses Home Assistant's native action system for consistent behavior across your dashboard."
              )}
            </p>
          </div>

          ${this.renderActionConfig(
            localize('editor.actions.tap_action', lang, 'Tap Action'),
            localize(
              'editor.actions.tap_action_desc',
              lang,
              'Action performed when tapping/clicking the module'
            ),
            currentActions.tap_action || { action: 'default' },
            hass,
            action => updateModule({ tap_action: action } as any)
          )}
          ${this.renderActionConfig(
            localize('editor.actions.hold_action', lang, 'Hold Action'),
            localize(
              'editor.actions.hold_action_desc',
              lang,
              'Action performed when holding down on the module'
            ),
            currentActions.hold_action || { action: 'default' },
            hass,
            action => updateModule({ hold_action: action } as any)
          )}
          ${this.renderActionConfig(
            localize('editor.actions.double_tap_action', lang, 'Double Tap Action'),
            localize(
              'editor.actions.double_tap_action_desc',
              lang,
              'Action performed when double-tapping the module'
            ),
            currentActions.double_tap_action || { action: 'default' },
            hass,
            action => updateModule({ double_tap_action: action } as any)
          )}
        </div>
      </div>
    `;
  }

  private static renderActionConfig(
    label: string,
    description: string,
    action: ActionConfig,
    hass: HomeAssistant,
    updateAction: (action: ActionConfig) => void
  ): TemplateResult {
    // Normalize legacy 'nothing' to 'default' for display to avoid blank entries
    const displayAction: ActionConfig =
      action?.action === 'nothing' ? ({ ...action, action: 'default' } as ActionConfig) : action;
    // Build a flat list of available services for fallback UI
    const services: Array<{ id: string; name: string }> = [];
    try {
      const servicesObj: Record<string, any> = (hass as any).services || {};
      Object.keys(servicesObj)
        .sort()
        .forEach(domain => {
          const domainServices = Object.keys(servicesObj[domain] || {}).sort();
          domainServices.forEach(svc =>
            services.push({ id: `${domain}.${svc}`, name: `${domain}.${svc}` })
          );
        });
    } catch (e) {
      // ignore
    }

    return html`
      <div class="action-form">
        <div class="action-description">${description}</div>

        <div style="margin-bottom: 16px;">
          <div
            style="font-size: 16px; font-weight: 600; margin-bottom: 8px; color: var(--primary-text-color);"
          >
            ${label}
          </div>
          <div style="margin-bottom: 12px;">
            <ha-form
              .hass=${hass}
              .data=${{ action_config: displayAction }}
              .schema=${[
                {
                  name: 'action_config',
                  label: '',
                  selector: {
                    ui_action: {
                      // Omit 'default' so the selector injects its own default option (prevents duplicate/blank)
                      actions: [
                        'more-info',
                        'toggle',
                        'navigate',
                        'url',
                        'perform-action',
                        'assist',
                      ],
                    },
                  },
                },
              ]}
              .computeLabel=${this.computeLabel}
              @value-changed=${(e: CustomEvent) => {
                const newAction = e.detail.value?.action_config;
                if (newAction) {
                  updateAction(newAction);
                }
              }}
            ></ha-form>
          </div>

          ${action?.action === 'more-info'
            ? html`
                <div
                  class="conditional-fields-group"
                  style="margin-top: 16px; border-left: 4px solid var(--primary-color); background: rgba(var(--rgb-primary-color), 0.08); border-radius: 0 8px 8px 0; overflow: hidden;"
                >
                  <div
                    class="conditional-fields-header"
                    style="background: rgba(var(--rgb-primary-color), 0.15); padding: 12px 16px; font-size: 14px; font-weight: 600; color: var(--primary-color); border-bottom: 1px solid rgba(var(--rgb-primary-color), 0.2); text-transform: uppercase; letter-spacing: 0.5px;"
                  >
                    More Info Configuration
                  </div>
                  <div class="conditional-fields-content" style="padding: 16px;">
                    <div
                      class="field-title"
                      style="font-size: 16px; font-weight: 600; margin-bottom: 4px;"
                    >
                      Entity
                    </div>
                    <div
                      class="field-description"
                      style="font-size: 13px; color: var(--secondary-text-color); margin-bottom: 12px; opacity: 0.8; line-height: 1.4;"
                    >
                      Select which entity to show more information for
                    </div>
                    <ha-form
                      .hass=${hass}
                      .data=${{ entity: action.entity || '' }}
                      .schema=${[
                        {
                          name: 'entity',
                          label: 'Entity',
                          selector: { entity: {} },
                        },
                      ]}
                      .computeLabel=${this.computeLabel}
                      @value-changed=${(e: CustomEvent) => {
                        const entity = e.detail.value?.entity;
                        updateAction({ ...action, entity });
                      }}
                    ></ha-form>
                  </div>
                </div>
              `
            : ''}
        </div>
      </div>
    `;
  }

  private static computeLabel = (schema: any): string => {
    // Explicitly honor empty string to hide the label entirely
    if (Object.prototype.hasOwnProperty.call(schema, 'label')) {
      return schema.label ?? '';
    }
    return '';
  };

  static getDefaultActions(): GlobalActionsConfig {
    return {
      tap_action: { action: 'default' },
      hold_action: { action: 'default' },
      double_tap_action: { action: 'default' },
    };
  }

  static validateActions(actions: GlobalActionsConfig): { valid: boolean; errors: string[] } {
    const errors: string[] = [];

    // Validate each action
    ['tap_action', 'hold_action', 'double_tap_action'].forEach(actionType => {
      const action = actions[actionType as keyof GlobalActionsConfig];
      if (action) {
        // Validate navigation action
        if (action.action === 'navigate' && !action.navigation_path) {
          errors.push(`${actionType}: Navigation path is required for navigate action`);
        }

        // Validate URL action
        if (action.action === 'url' && !action.url_path) {
          errors.push(`${actionType}: URL is required for URL action`);
        }

        // Validate perform-action action
        if (action.action === 'perform-action' && !action.perform_action && !action.service) {
          errors.push(`${actionType}: Action is required for perform-action`);
        }
      }
    });

    return {
      valid: errors.length === 0,
      errors,
    };
  }
}
