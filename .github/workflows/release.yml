name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: |
          npm run prebuild
          npm run build

      - name: Verify build files
        run: |
          echo "Checking dist directory..."
          ls -la dist/
          echo "Checking main files..."
          ls -la ultra-card.js* hacs.json README.md license

      - name: Create Release Archive
        run: |
          mkdir -p release
          cp ultra-card.js release/
          cp ultra-card.js.LICENSE.txt release/
          cp hacs.json release/
          cp README.md release/
          cp license release/
          cd release
          zip -r ../ultra-card-${{ github.ref_name }}.zip .
          cd ..
          echo "Archive contents:"
          unzip -l ultra-card-${{ github.ref_name }}.zip

      - name: Extract version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Generate Release Notes
        id: release_notes
        run: |
          VERSION="${{ github.ref_name }}"
          # Remove 'v' prefix from version for matching
          VERSION_NUM="${VERSION#v}"

          echo "Looking for release notes for version: $VERSION_NUM"

          # Try to extract release notes from RELEASE_NOTES.md
          if [ -f "RELEASE_NOTES.md" ]; then
            echo "Found RELEASE_NOTES.md, extracting notes for version $VERSION_NUM..."
            
            # Extract the section for this version from RELEASE_NOTES.md
            # Look for "## Version $VERSION_NUM" and extract until the next "## Version" or end of file
            RELEASE_NOTES=$(awk -v version="$VERSION_NUM" '
              BEGIN { found=0; printing=0 }
              /^## Version/ {
                if ($3 == version) {
                  found=1
                  printing=1
                  next
                } else if (found && printing) {
                  exit
                }
              }
              printing && found { print }
            ' RELEASE_NOTES.md)
            
            if [ -n "$RELEASE_NOTES" ]; then
              echo "Successfully extracted release notes from RELEASE_NOTES.md"
              echo "$RELEASE_NOTES" > release_notes.md
            else
              echo "Version $VERSION_NUM not found in RELEASE_NOTES.md, using fallback"
              cat > release_notes.md << 'EOF'
          ## üîó Recent Updates

          Please check the [Release Notes](https://github.com/WJDDesigns/Ultra-Card/blob/main/RELEASE_NOTES.md) for detailed information about this release.

          ## üìù Changes

          This release includes various improvements and bug fixes. See the full changelog in our repository.
          EOF
            fi
          else
            echo "RELEASE_NOTES.md not found, using default notes"
            cat > release_notes.md << 'EOF'
          ## üîó Recent Updates

          Please check the [Release Notes](https://github.com/WJDDesigns/Ultra-Card/blob/main/RELEASE_NOTES.md) for detailed information about this release.
          EOF
          fi

          echo "Generated release notes:"
          cat release_notes.md
          echo ""

          # Set the release notes as output
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
          cat release_notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: What's New in ${{ steps.version.outputs.VERSION }}
          draft: false
          prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
          generate_release_notes: false
          body: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
          files: |
            ultra-card-${{ github.ref_name }}.zip
            ultra-card.js

      - name: Announce to Discord
        if: success()
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          DISCORD_WEBHOOK_ANNOUNCEMENTS: ${{ secrets.DISCORD_WEBHOOK_ANNOUNCEMENTS }}
          BOT_NAME: 'UpdateBot'
          AVATAR_URL: 'https://raw.githubusercontent.com/${{ github.repository }}/main/Ultra.jpg'
        run: |
          if [ -z "$DISCORD_WEBHOOK" ]; then
            echo "Missing DISCORD_WEBHOOK secret - skipping Discord notification"
            exit 0
          fi

          VERSION="${{ steps.version.outputs.VERSION }}"
          TAG="${{ github.ref_name }}"
          URL="https://github.com/${{ github.repository }}/releases/tag/$TAG"
          REPO="${{ github.repository }}"
          REPO_NAME="${REPO#*/}"

          # Use the same release notes we generated
          DESC="${{ steps.release_notes.outputs.RELEASE_NOTES }}"

          # Truncate description to fit Discord embed limits
          DESC=$(echo "$DESC" | head -c 1900)

          COLOR=3447003    # Blue for stable release
          RELEASE_TYPE="Release"

          # Build JSON payload for Discord
          PAYLOAD=$(jq -n \
            --arg username "$BOT_NAME" \
            --arg avatar_url "$AVATAR_URL" \
            --arg title "What's New in $VERSION" \
            --arg url "$URL" \
            --arg desc "$DESC" \
            --arg repo "$REPO_NAME" \
            --arg tag "$TAG" \
            --arg rtype "$RELEASE_TYPE" \
            --arg ts "$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
            --arg footer "Ultra-Card ‚Ä¢ $RELEASE_TYPE ‚Ä¢ $TAG" \
            --arg author "WJDDesigns/Ultra-Card" \
            --argjson color $COLOR \
            '{
              "username": $username,
              "avatar_url": $avatar_url,
              "embeds": [
                {
                  "title": $title,
                  "url": $url,
                  "description": $desc,
                  "color": $color,
                  "timestamp": $ts,
                  "author": { "name": $author },
                  "footer": { "text": $footer },
                  "fields": [
                    { "name": "Tag", "value": $tag, "inline": true },
                    { "name": "Repo", "value": $repo, "inline": true }
                  ]
                }
              ]
            }')

          # Function to send Discord notification
          send_discord_notification() {
            local webhook_url="$1"
            local channel_name="$2"
            
            echo "Sending Discord notification to $channel_name..."
            RESPONSE=$(curl -s -w "\nHTTP_CODE:%{http_code}\n" -X POST -H "Content-Type: application/json" \
                            -d "$PAYLOAD" "$webhook_url")

            HTTP_CODE=$(echo "$RESPONSE" | grep "HTTP_CODE:" | cut -d: -f2)
            RESPONSE_BODY=$(echo "$RESPONSE" | sed '/HTTP_CODE:/d')

            echo "HTTP Response Code for $channel_name: $HTTP_CODE"
            if [ "$HTTP_CODE" = "204" ] || [ "$HTTP_CODE" = "200" ]; then
              echo "‚úÖ Successfully sent Discord notification to $channel_name"
              return 0
            else
              echo "‚ùå Failed to send Discord notification to $channel_name (HTTP $HTTP_CODE)"
              echo "Response: $RESPONSE_BODY"
              return 1
            fi
          }

          # Send to main channel
          send_discord_notification "$DISCORD_WEBHOOK" "main channel"
          MAIN_SUCCESS=$?

          # Send to announcements channel if webhook is configured
          if [ -n "$DISCORD_WEBHOOK_ANNOUNCEMENTS" ]; then
            echo ""
            send_discord_notification "$DISCORD_WEBHOOK_ANNOUNCEMENTS" "announcements channel"
            ANNOUNCEMENTS_SUCCESS=$?
          else
            echo "No DISCORD_WEBHOOK_ANNOUNCEMENTS configured - skipping announcements channel"
            ANNOUNCEMENTS_SUCCESS=0
          fi

          # Log results but don't fail the workflow for Discord issues
          if [ $MAIN_SUCCESS -eq 0 ]; then
            echo "‚úÖ Main channel notification successful"
          else
            echo "‚ö†Ô∏è Main channel notification failed"
          fi

          if [ -n "$DISCORD_WEBHOOK_ANNOUNCEMENTS" ]; then
            if [ $ANNOUNCEMENTS_SUCCESS -eq 0 ]; then
              echo "‚úÖ Announcements channel notification successful"
            else
              echo "‚ö†Ô∏è Announcements channel notification failed"
            fi
          fi

          echo "üéâ Discord notification process complete!"
