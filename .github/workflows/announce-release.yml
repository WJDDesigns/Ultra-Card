name: Announce GitHub Releases to Discord
on:
  release:
    types: [published, prereleased]
  workflow_dispatch: {}

jobs:
  announce:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get release information
        id: release_info
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "Manual trigger - fetching latest release"
            RELEASE_DATA=$(curl -s -H "Accept: application/vnd.github+json" "https://api.github.com/repos/${{ github.repository }}/releases" | jq '.[0]')
            TAG=$(echo "$RELEASE_DATA" | jq -r '.tag_name')
            NAME=$(echo "$RELEASE_DATA" | jq -r '.name // ""')
            BODY=$(echo "$RELEASE_DATA" | jq -r '.body // ""')
            IS_PRE=$(echo "$RELEASE_DATA" | jq -r '.prerelease')
          else
            TAG=$(jq -r '.release.tag_name' "$GITHUB_EVENT_PATH")
            NAME=$(jq -r '.release.name // ""' "$GITHUB_EVENT_PATH")
            BODY=$(jq -r '.release.body // ""' "$GITHUB_EVENT_PATH")
            IS_PRE=$(jq -r '.release.prerelease' "$GITHUB_EVENT_PATH")
          fi

          VERSION_NUM="${TAG#v}"

          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "name=$NAME" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRE" >> $GITHUB_OUTPUT
          echo "version=$VERSION_NUM" >> $GITHUB_OUTPUT
          
          # Handle multiline body content properly
          echo "body<<EOF" >> $GITHUB_OUTPUT
          echo "$BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Extract custom release notes
        id: custom_notes
        run: |
          VERSION="${{ steps.release_info.outputs.version }}"

          if [ -f "RELEASE_NOTES.md" ]; then
            echo "Extracting notes for version: $VERSION"
            
            # Extract version section
            sed -n "/^## Version $VERSION$/,/^## Version /p" RELEASE_NOTES.md | sed '$d' > temp_notes.txt
            
            if [ -s temp_notes.txt ]; then
              echo "Found custom release notes"
              echo "has_custom=true" >> $GITHUB_OUTPUT
              echo "NOTES<<EOF" >> $GITHUB_OUTPUT
              cat temp_notes.txt >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
            else
              echo "No custom notes found"
              echo "has_custom=false" >> $GITHUB_OUTPUT
            fi
            
            rm -f temp_notes.txt
          else
            echo "No RELEASE_NOTES.md file"
            echo "has_custom=false" >> $GITHUB_OUTPUT
          fi

      - name: Send Discord notification
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          if [ -z "$DISCORD_WEBHOOK" ]; then
            echo "No Discord webhook configured"
            exit 0
          fi

          TAG="${{ steps.release_info.outputs.tag }}"
          NAME="${{ steps.release_info.outputs.name }}"
          IS_PRE="${{ steps.release_info.outputs.is_prerelease }}"

          if [ -z "$NAME" ] || [ "$NAME" = "null" ]; then
            NAME="Release $TAG"
          fi

          if [ "${{ steps.custom_notes.outputs.has_custom }}" = "true" ]; then
            DESCRIPTION="${{ steps.custom_notes.outputs.NOTES }}"
          else
            DESCRIPTION="${{ steps.release_info.outputs.body }}"
          fi

          # Truncate description
          DESCRIPTION=$(echo "$DESCRIPTION" | head -c 1900)

          # Set color based on release type
          if [ "$IS_PRE" = "true" ]; then
            COLOR=11141290
            TYPE="Pre-release"
          else
            COLOR=3447003
            TYPE="Release"
          fi

          # Create Discord payload
          PAYLOAD=$(jq -n \
            --arg title "$NAME" \
            --arg url "https://github.com/${{ github.repository }}/releases/tag/$TAG" \
            --arg desc "$DESCRIPTION" \
            --arg tag "$TAG" \
            --arg type "$TYPE" \
            --argjson color $COLOR \
            '{
              "username": "UpdateBot",
              "avatar_url": "https://raw.githubusercontent.com/${{ github.repository }}/main/Ultra.jpg",
              "embeds": [{
                "title": $title,
                "url": $url,
                "description": $desc,
                "color": $color,
                "timestamp": (now | strftime("%Y-%m-%dT%H:%M:%SZ")),
                "footer": {"text": ("Ultra-Card • " + $type + " • " + $tag)},
                "fields": [
                  {"name": "Tag", "value": $tag, "inline": true},
                  {"name": "Repository", "value": "Ultra-Card", "inline": true}
                ]
              }]
            }')

          # Send to Discord
          curl -X POST -H "Content-Type: application/json" -d "$PAYLOAD" "$DISCORD_WEBHOOK"

          echo "Discord notification sent successfully!"
