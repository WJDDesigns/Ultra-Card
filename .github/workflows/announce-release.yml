name: Announce GitHub Releases to Discord
on:
  release:
    types: [published, prereleased]
  workflow_dispatch: {} # allows manual test runs

jobs:
  announce:
    runs-on: ubuntu-latest
    steps:
      - name: Use repo avatar file (optional)
        uses: actions/checkout@v4

      - name: Build and send Discord embed
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          BOT_NAME: 'UpdateBot'
          # Using existing Ultra.jpg as avatar
          AVATAR_URL: 'https://raw.githubusercontent.com/${{ github.repository }}/main/Ultra.jpg'
        run: |
          if [ -z "$DISCORD_WEBHOOK" ]; then
            echo "Missing DISCORD_WEBHOOK secret"; exit 1
          fi

          # Check if this is a manual trigger (workflow_dispatch)
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "Manual trigger detected - announcing v1.1.0-beta5 release"
            NAME="Ultra Card 1.1.0-beta5"
            TAG="v1.1.0-beta5"
            URL="https://github.com/${{ github.repository }}/releases/tag/$TAG"
            BODY="üìã Changelog Summary for v1.1.0-beta5:\\nüé® Enhanced Icon Module Features\\n‚ú® New: Use State Color Toggle\\nAutomatically extracts colors from entity attributes (RGB, HS, color names, hex)\\nPerfect for RGB lights, colored sensors, and smart devices\\nIntelligent fallbacks for binary sensors\\nüîß New: Dynamic Icon Color Template\\nJinja2-compatible color templates with real-time evaluation\\nFull CSS color format support\\nLive preview updates\\nüîÑ Enhanced color priority system with seamless integration\\nüõ†Ô∏è Technical improvements and comprehensive TypeScript support"
            IS_PRE="true"
          else
            # Pull data from the release event JSON
            NAME=$(jq -r '.release.name // ""' "$GITHUB_EVENT_PATH")
            TAG=$(jq -r '.release.tag_name' "$GITHUB_EVENT_PATH")
            URL=$(jq -r '.release.html_url' "$GITHUB_EVENT_PATH")
            BODY=$(jq -r '.release.body // ""' "$GITHUB_EVENT_PATH")
            IS_PRE=$(jq -r '.release.prerelease' "$GITHUB_EVENT_PATH")
          fi

          REPO="${GITHUB_REPOSITORY#*/}"

          # Fallback title if .name is empty
          if [ -z "$NAME" ] || [ "$NAME" = "null" ]; then
            NAME="Release $TAG"
          fi

          # Trim body to fit Discord embed description (~2048 chars); keep some headroom
          DESC=$(printf "%s" "$BODY" | head -c 1900)

          # Color: purple for prerelease, blue for stable
          if [ "$IS_PRE" = "true" ]; then
            COLOR=11141290   # 0xAA66DA
            RELEASE_TYPE="Prerelease"
          else
            COLOR=3447003    # 0x3498db
            RELEASE_TYPE="Release"
          fi

          # Build JSON payload with jq (avoids escaping headaches)
          PAYLOAD=$(jq -n \
            --arg username "$BOT_NAME" \
            --arg avatar_url "$AVATAR_URL" \
            --arg title "$NAME" \
            --arg url "$URL" \
            --arg desc "$DESC" \
            --arg repo "$REPO" \
            --arg tag "$TAG" \
            --arg rtype "$RELEASE_TYPE" \
            --arg commit_url "https://github.com/${{ github.repository }}/commits/$TAG" \
            --arg ts "$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
            --arg footer "Ultra-Card ‚Ä¢ $RELEASE_TYPE ‚Ä¢ $tag" \
            --arg author "WJDDesigns/Ultra-Card" \
            --arg thumb "https://raw.githubusercontent.com/${{ github.repository }}/main/Ultra.jpg" \
            --argjson color $COLOR \
            '{
              "username": $username,
              "avatar_url": $avatar_url,
              "embeds": [
                {
                  "title": $title,
                  "url": $url,
                  "description": $desc,
                  "color": $color,
                  "timestamp": $ts,
                  "author": { "name": $author },
                  "footer": { "text": $footer },
                  "fields": [
                    { "name": "Tag", "value": $tag, "inline": true },
                    { "name": "Repo", "value": $repo, "inline": true }
                  ]
                }
              ]
            }')

          echo "Debug info:"
          echo "Event name: ${{ github.event_name }}"
          echo "Repository: ${{ github.repository }}"
          echo "Tag: $TAG"
          echo "Name: $NAME"
          echo "Is Pre-release: $IS_PRE"
          echo ""

          echo "Sending payload to Discord:"
          echo "$PAYLOAD" | jq .
          echo ""

          echo "Testing webhook URL accessibility..."
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$DISCORD_WEBHOOK")
          echo "Webhook HTTP status: $HTTP_STATUS"
          echo ""

          echo "Sending Discord notification..."
          RESPONSE=$(curl -s -w "\nHTTP_CODE:%{http_code}\n" -X POST -H "Content-Type: application/json" \
                          -d "$PAYLOAD" "$DISCORD_WEBHOOK")

          HTTP_CODE=$(echo "$RESPONSE" | grep "HTTP_CODE:" | cut -d: -f2)
          RESPONSE_BODY=$(echo "$RESPONSE" | sed '/HTTP_CODE:/d')

          echo "HTTP Response Code: $HTTP_CODE"
          echo "Response Body: $RESPONSE_BODY"

          if [ "$HTTP_CODE" = "204" ] || [ "$HTTP_CODE" = "200" ]; then
            echo "‚úÖ Successfully sent Discord notification"
          else
            echo "‚ùå Failed to send Discord notification"
            echo "HTTP Code: $HTTP_CODE"
            echo "Response: $RESPONSE_BODY"
            exit 1
          fi
